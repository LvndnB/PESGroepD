
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005198  08005198  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a0  080051a0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080051a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000060  08005208  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08005208  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe96  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c4  00000000  00000000  0002ff69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00032630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9d  00000000  00000000  000333f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff15  00000000  00000000  00033e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d11  00000000  00000000  00053da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0835  00000000  00000000  00064ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003edc  00000000  00000000  001252e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001291c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fdc 	.word	0x08004fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004fdc 	.word	0x08004fdc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b4      	sub	sp, #208	; 0xd0
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fd36 	bl	8001012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f831 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f933 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f8ff 	bl	80007b0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 f8cd 	bl	8000750 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005b6:	f000 f88b 	bl	80006d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  tm1637Init();
 80005ba:	f000 f9e7 	bl	800098c <tm1637Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, rx_write_ptn, uart_buff_size);
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0x60>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2232      	movs	r2, #50	; 0x32
 80005c4:	4619      	mov	r1, r3
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <main+0x64>)
 80005c8:	f002 fbf2 	bl	8002db0 <HAL_UART_Receive_IT>
  int i = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  while (1)
  {
	 if (rx_data_ready) {
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <main+0x68>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <main+0x42>
		 parse_data();
 80005da:	f000 f9a1 	bl	8000920 <parse_data>
	 // Sensor data
	 // TODO: implement sensor data.
	 //char data[] = "dadada";

	 char msg[200];
	 tm1637DisplayDecimal(rpm, 0);
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <main+0x6c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fa15 	bl	8000a14 <tm1637DisplayDecimal>
	 //HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
	 //HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);

	 //HAL_UART_Transmit(&huart2, data, strlen(data), HAL_MAX_DELAY);
	 //HAL_UART_Transmit(&huart2, "aaaa", 4, HAL_MAX_DELAY);
	 HAL_Delay(10);
 80005ea:	200a      	movs	r0, #10
 80005ec:	f000 fd86 	bl	80010fc <HAL_Delay>
	 i++;
 80005f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80005f4:	3301      	adds	r3, #1
 80005f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  {
 80005fa:	e7ea      	b.n	80005d2 <main+0x36>
 80005fc:	20000000 	.word	0x20000000
 8000600:	200000d0 	.word	0x200000d0
 8000604:	200005c8 	.word	0x200005c8
 8000608:	200005cc 	.word	0x200005cc

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 ff54 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f001 f9e9 	bl	8001a08 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f9a0 	bl	8000980 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f001 f9c4 	bl	80019cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <SystemClock_Config+0xc0>)
 8000646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xc0>)
 800064c:	f023 0318 	bic.w	r3, r3, #24
 8000650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000654:	2314      	movs	r3, #20
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066c:	2301      	movs	r3, #1
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fa13 	bl	8001ab4 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000694:	f000 f974 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fe13 	bl	80022dc <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006bc:	f000 f960 	bl	8000980 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c0:	f002 fa26 	bl	8002b10 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c4:	bf00      	nop
 80006c6:	3758      	adds	r7, #88	; 0x58
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_I2C1_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_I2C1_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_I2C1_Init+0x74>)
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <MX_I2C1_Init+0x7c>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_I2C1_Init+0x74>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <MX_I2C1_Init+0x74>)
 800070c:	f001 f82c 	bl	8001768 <HAL_I2C_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000716:	f000 f933 	bl	8000980 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <MX_I2C1_Init+0x74>)
 800071e:	f001 f8be 	bl	800189e <HAL_I2CEx_ConfigAnalogFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000728:	f000 f92a 	bl	8000980 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2C1_Init+0x74>)
 8000730:	f001 f900 	bl	8001934 <HAL_I2CEx_ConfigDigitalFilter>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 f921 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000007c 	.word	0x2000007c
 8000748:	40005400 	.word	0x40005400
 800074c:	00707cbb 	.word	0x00707cbb

08000750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART1_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800075c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000774:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000778:	220c      	movs	r2, #12
 800077a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_USART1_UART_Init+0x58>)
 8000796:	f002 fabd 	bl	8002d14 <HAL_UART_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80007a0:	f000 f8ee 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000d0 	.word	0x200000d0
 80007ac:	40013800 	.word	0x40013800

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007b6:	4a16      	ldr	r2, [pc, #88]	; (8000810 <MX_USART2_UART_Init+0x60>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007bc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007f2:	2300      	movs	r3, #0
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007fa:	f003 fd33 	bl	8004264 <HAL_RS485Ex_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 f8bc 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000158 	.word	0x20000158
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_GPIO_Init+0x8c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_GPIO_Init+0x8c>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_GPIO_Init+0x8c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_GPIO_Init+0x8c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x8c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_GPIO_Init+0x8c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_GPIO_Init+0x8c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_GPIO_Init+0x8c>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_GPIO_Init+0x8c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0x90>)
 8000878:	f000 ff5e 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800087c:	2308      	movs	r3, #8
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0x90>)
 8000894:	f000 fde6 	bl	8001464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400

080008a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < uart_buff_size; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e013      	b.n	80008de <HAL_UART_RxCpltCallback+0x36>
		if (!rx_data_ready && *rx_write_ptn == '\n') {
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_RxCpltCallback+0x64>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d107      	bne.n	80008ce <HAL_UART_RxCpltCallback+0x26>
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_RxCpltCallback+0x68>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	d102      	bne.n	80008ce <HAL_UART_RxCpltCallback+0x26>
			rx_data_ready = 1;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_UART_RxCpltCallback+0x64>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
			//rx_data_ready_ptn = rx_write_ptn;
		}
		rx_write_ptn++;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_UART_RxCpltCallback+0x68>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_UART_RxCpltCallback+0x68>)
 80008d6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < uart_buff_size; i++) {
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3301      	adds	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b31      	cmp	r3, #49	; 0x31
 80008e2:	dde8      	ble.n	80008b6 <HAL_UART_RxCpltCallback+0xe>
	}

	if (rx_write_ptn + uart_buff_size > (rx_data_buff)+500 ) {
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_UART_RxCpltCallback+0x68>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3332      	adds	r3, #50	; 0x32
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_UART_RxCpltCallback+0x6c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d902      	bls.n	80008f6 <HAL_UART_RxCpltCallback+0x4e>
		rx_write_ptn = rx_data_buff;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_UART_RxCpltCallback+0x68>)
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <HAL_UART_RxCpltCallback+0x70>)
 80008f4:	601a      	str	r2, [r3, #0]
	}


	HAL_UART_Receive_IT(&huart1, rx_write_ptn, uart_buff_size);
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_UART_RxCpltCallback+0x68>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2232      	movs	r2, #50	; 0x32
 80008fc:	4619      	mov	r1, r3
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <HAL_UART_RxCpltCallback+0x74>)
 8000900:	f002 fa56 	bl	8002db0 <HAL_UART_Receive_IT>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200005c8 	.word	0x200005c8
 8000910:	20000000 	.word	0x20000000
 8000914:	200003d4 	.word	0x200003d4
 8000918:	200001e0 	.word	0x200001e0
 800091c:	200000d0 	.word	0x200000d0

08000920 <parse_data>:
void parse_data() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	parse_pdu();
 8000924:	f000 f802 	bl	800092c <parse_pdu>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <parse_pdu>:

void parse_pdu() {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
	char key[20];
	char value[20];
	if (sscanf(rx_data_buff,"%19[^=]=%s[^\n]", key, value) == 2 ) {
 8000932:	463b      	mov	r3, r7
 8000934:	f107 0214 	add.w	r2, r7, #20
 8000938:	490d      	ldr	r1, [pc, #52]	; (8000970 <parse_pdu+0x44>)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <parse_pdu+0x48>)
 800093c:	f003 fd96 	bl	800446c <siscanf>
 8000940:	4603      	mov	r3, r0
 8000942:	2b02      	cmp	r3, #2
 8000944:	d10f      	bne.n	8000966 <parse_pdu+0x3a>

		if (!strcmp(key, "ENCODERRPM")) {
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	490b      	ldr	r1, [pc, #44]	; (8000978 <parse_pdu+0x4c>)
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc3f 	bl	80001d0 <strcmp>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d106      	bne.n	8000966 <parse_pdu+0x3a>
			rpm = atoi(value);
 8000958:	463b      	mov	r3, r7
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fcf3 	bl	8004346 <atoi>
 8000960:	4603      	mov	r3, r0
 8000962:	4a06      	ldr	r2, [pc, #24]	; (800097c <parse_pdu+0x50>)
 8000964:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	08004ff4 	.word	0x08004ff4
 8000974:	200001e0 	.word	0x200001e0
 8000978:	08005004 	.word	0x08005004
 800097c:	200005cc 	.word	0x200005cc

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <tm1637Init+0x80>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <tm1637Init+0x80>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <tm1637Init+0x80>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <tm1637Init+0x80>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <tm1637Init+0x80>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <tm1637Init+0x80>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 80009d6:	2311      	movs	r3, #17
 80009d8:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 80009de:	2320      	movs	r3, #32
 80009e0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <tm1637Init+0x84>)
 80009ea:	f000 fd3b 	bl	8001464 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 80009ee:	2310      	movs	r3, #16
 80009f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <tm1637Init+0x84>)
 80009fa:	f000 fd33 	bl	8001464 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 80009fe:	2008      	movs	r0, #8
 8000a00:	f000 f876 	bl	8000af0 <tm1637SetBrightness>
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000400 	.word	0x48000400

08000a14 <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e032      	b.n	8000a8a <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <tm1637DisplayDecimal+0xd4>)
 8000a28:	fb83 2301 	smull	r2, r3, r3, r1
 8000a2c:	109a      	asrs	r2, r3, #2
 8000a2e:	17cb      	asrs	r3, r1, #31
 8000a30:	1ad2      	subs	r2, r2, r3
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	1aca      	subs	r2, r1, r3
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <tm1637DisplayDecimal+0xd8>)
 8000a3e:	5c99      	ldrb	r1, [r3, r2]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d110      	bne.n	8000a74 <tm1637DisplayDecimal+0x60>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00d      	beq.n	8000a74 <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a66:	b2d9      	uxtb	r1, r3
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	4413      	add	r3, r2
 8000a70:	460a      	mov	r2, r1
 8000a72:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <tm1637DisplayDecimal+0xd4>)
 8000a78:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7c:	1092      	asrs	r2, r2, #2
 8000a7e:	17db      	asrs	r3, r3, #31
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3301      	adds	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	ddc9      	ble.n	8000a24 <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 8000a90:	f000 f843 	bl	8000b1a <_tm1637Start>
    _tm1637WriteByte(0x40);
 8000a94:	2040      	movs	r0, #64	; 0x40
 8000a96:	f000 f872 	bl	8000b7e <_tm1637WriteByte>
    _tm1637ReadResult();
 8000a9a:	f000 f860 	bl	8000b5e <_tm1637ReadResult>
    _tm1637Stop();
 8000a9e:	f000 f849 	bl	8000b34 <_tm1637Stop>

    _tm1637Start();
 8000aa2:	f000 f83a 	bl	8000b1a <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8000aa6:	20c0      	movs	r0, #192	; 0xc0
 8000aa8:	f000 f869 	bl	8000b7e <_tm1637WriteByte>
    _tm1637ReadResult();
 8000aac:	f000 f857 	bl	8000b5e <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	e00e      	b.n	8000ad4 <tm1637DisplayDecimal+0xc0>
        _tm1637WriteByte(digitArr[3 - i]);
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	f1c3 0303 	rsb	r3, r3, #3
 8000abc:	3318      	adds	r3, #24
 8000abe:	443b      	add	r3, r7
 8000ac0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f85a 	bl	8000b7e <_tm1637WriteByte>
        _tm1637ReadResult();
 8000aca:	f000 f848 	bl	8000b5e <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	dded      	ble.n	8000ab6 <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 8000ada:	f000 f82b 	bl	8000b34 <_tm1637Stop>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	66666667 	.word	0x66666667
 8000aec:	0800501c 	.word	0x0800501c

08000af0 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8000afa:	f000 f80e 	bl	8000b1a <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	3b79      	subs	r3, #121	; 0x79
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f83a 	bl	8000b7e <_tm1637WriteByte>
    _tm1637ReadResult();
 8000b0a:	f000 f828 	bl	8000b5e <_tm1637ReadResult>
    _tm1637Stop();
 8000b0e:	f000 f811 	bl	8000b34 <_tm1637Stop>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_tm1637Start>:

void _tm1637Start(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8000b1e:	f000 f875 	bl	8000c0c <_tm1637ClkHigh>
    _tm1637DioHigh();
 8000b22:	f000 f88b 	bl	8000c3c <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8000b26:	2002      	movs	r0, #2
 8000b28:	f000 f853 	bl	8000bd2 <_tm1637DelayUsec>
    _tm1637DioLow();
 8000b2c:	f000 f892 	bl	8000c54 <_tm1637DioLow>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8000b38:	f000 f874 	bl	8000c24 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f000 f848 	bl	8000bd2 <_tm1637DelayUsec>
    _tm1637DioLow();
 8000b42:	f000 f887 	bl	8000c54 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8000b46:	2002      	movs	r0, #2
 8000b48:	f000 f843 	bl	8000bd2 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8000b4c:	f000 f85e 	bl	8000c0c <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f000 f83e 	bl	8000bd2 <_tm1637DelayUsec>
    _tm1637DioHigh();
 8000b56:	f000 f871 	bl	8000c3c <_tm1637DioHigh>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8000b62:	f000 f85f 	bl	8000c24 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8000b66:	2005      	movs	r0, #5
 8000b68:	f000 f833 	bl	8000bd2 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8000b6c:	f000 f84e 	bl	8000c0c <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 f82e 	bl	8000bd2 <_tm1637DelayUsec>
    _tm1637ClkLow();
 8000b76:	f000 f855 	bl	8000c24 <_tm1637ClkLow>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b084      	sub	sp, #16
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e019      	b.n	8000bc2 <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8000b8e:	f000 f849 	bl	8000c24 <_tm1637ClkLow>
        if (b & 0x01) {
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8000b9c:	f000 f84e 	bl	8000c3c <_tm1637DioHigh>
 8000ba0:	e001      	b.n	8000ba6 <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8000ba2:	f000 f857 	bl	8000c54 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f000 f813 	bl	8000bd2 <_tm1637DelayUsec>
        b >>= 1;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8000bb2:	f000 f82b 	bl	8000c0c <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f80b 	bl	8000bd2 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b07      	cmp	r3, #7
 8000bc6:	dde2      	ble.n	8000b8e <_tm1637WriteByte+0x10>
    }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8000bda:	e00c      	b.n	8000bf6 <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 10; ++j) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e003      	b.n	8000bea <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 8000be2:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3301      	adds	r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2b09      	cmp	r3, #9
 8000bee:	ddf8      	ble.n	8000be2 <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1ef      	bne.n	8000bdc <_tm1637DelayUsec+0xa>
        }
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2120      	movs	r1, #32
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <_tm1637ClkHigh+0x14>)
 8000c16:	f000 fd8f 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	48000400 	.word	0x48000400

08000c24 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <_tm1637ClkLow+0x14>)
 8000c2e:	f000 fd83 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400

08000c3c <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <_tm1637DioHigh+0x14>)
 8000c46:	f000 fd77 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	48000400 	.word	0x48000400

08000c54 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <_tm1637DioLow+0x14>)
 8000c5e:	f000 fd6b 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	48000400 	.word	0x48000400

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	; 0x58
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b09e      	sub	sp, #120	; 0x78
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	2254      	movs	r2, #84	; 0x54
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fbf7 	bl	80044c8 <memset>
  if(hi2c->Instance==I2C1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_I2C_MspInit+0xa4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d135      	bne.n	8000d50 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fd17 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cfc:	f7ff fe40 	bl	8000980 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d18:	23c0      	movs	r3, #192	; 0xc0
 8000d1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <HAL_I2C_MspInit+0xac>)
 8000d34:	f000 fb96 	bl	8001464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d42:	6593      	str	r3, [r2, #88]	; 0x58
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3778      	adds	r7, #120	; 0x78
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000400 	.word	0x48000400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0a0      	sub	sp, #128	; 0x80
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	2254      	movs	r2, #84	; 0x54
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fb9f 	bl	80044c8 <memset>
  if(huart->Instance==USART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <HAL_UART_MspInit+0x158>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d140      	bne.n	8000e16 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fcbf 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff fde8 	bl	8000980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db4:	4a42      	ldr	r2, [pc, #264]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbc:	4b40      	ldr	r3, [pc, #256]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000de0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000de4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df2:	2307      	movs	r3, #7
 8000df4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f000 fb30 	bl	8001464 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2025      	movs	r0, #37	; 0x25
 8000e0a:	f000 fa76 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0e:	2025      	movs	r0, #37	; 0x25
 8000e10:	f000 fa8f 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e14:	e04d      	b.n	8000eb2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <HAL_UART_MspInit+0x160>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d148      	bne.n	8000eb2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fc79 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000e38:	f7ff fda2 	bl	8000980 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e40:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e46:	6593      	str	r3, [r2, #88]	; 0x58
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x15c>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|VCP_TX_Pin;
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f000 faeb 	bl	8001464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f000 fad9 	bl	8001464 <HAL_GPIO_Init>
}
 8000eb2:	bf00      	nop
 8000eb4:	3780      	adds	r7, #128	; 0x80
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f8d2 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <USART1_IRQHandler+0x10>)
 8000f22:	f001 ff91 	bl	8002e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000d0 	.word	0x200000d0

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f003 faba 	bl	80044d8 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20010000 	.word	0x20010000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	200005d0 	.word	0x200005d0
 8000f98:	20000720 	.word	0x20000720

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc4:	f7ff ffea 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	; (8001000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <LoopForever+0xe>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	; (800100c <LoopForever+0x16>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f003 fa79 	bl	80044e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff2:	f7ff fad3 	bl	800059c <main>

08000ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff6:	e7fe      	b.n	8000ff6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001004:	080051a8 	.word	0x080051a8
  ldr r2, =_sbss
 8001008:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800100c:	20000720 	.word	0x20000720

08001010 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC1_IRQHandler>

08001012 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f961 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f80e 	bl	8001044 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e001      	b.n	8001038 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001034:	f7ff fe1a 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001038:	79fb      	ldrb	r3, [r7, #7]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d023      	beq.n	80010a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_InitTick+0x70>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f96d 	bl	800134e <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10f      	bne.n	800109a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d809      	bhi.n	8001094 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001088:	f000 f937 	bl	80012fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_InitTick+0x74>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e007      	b.n	80010a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e004      	b.n	80010a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e001      	b.n	80010a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000004 	.word	0x20000004
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	200005d4 	.word	0x200005d4

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200005d4 	.word	0x200005d4

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000000c 	.word	0x2000000c

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d008      	beq.n	8001390 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2204      	movs	r2, #4
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e022      	b.n	80013d6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 020e 	bic.w	r2, r2, #14
 800139e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f003 021c 	and.w	r2, r3, #28
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d005      	beq.n	8001406 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2204      	movs	r2, #4
 80013fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e029      	b.n	800145a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 020e 	bic.w	r2, r2, #14
 8001414:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 021c 	and.w	r2, r3, #28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
    }
  }
  return status;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e148      	b.n	8001706 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 813a 	beq.w	8001700 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8094 	beq.w	8001700 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	4b52      	ldr	r3, [pc, #328]	; (8001724 <HAL_GPIO_Init+0x2c0>)
 80015da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015dc:	4a51      	ldr	r2, [pc, #324]	; (8001724 <HAL_GPIO_Init+0x2c0>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6613      	str	r3, [r2, #96]	; 0x60
 80015e4:	4b4f      	ldr	r3, [pc, #316]	; (8001724 <HAL_GPIO_Init+0x2c0>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f0:	4a4d      	ldr	r2, [pc, #308]	; (8001728 <HAL_GPIO_Init+0x2c4>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1d4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a43      	ldr	r2, [pc, #268]	; (800172c <HAL_GPIO_Init+0x2c8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1d0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a42      	ldr	r2, [pc, #264]	; (8001730 <HAL_GPIO_Init+0x2cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1cc>
 800162c:	2302      	movs	r3, #2
 800162e:	e004      	b.n	800163a <HAL_GPIO_Init+0x1d6>
 8001630:	2307      	movs	r3, #7
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x1d6>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x1d6>
 8001638:	2300      	movs	r3, #0
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800164a:	4937      	ldr	r1, [pc, #220]	; (8001728 <HAL_GPIO_Init+0x2c4>)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800167c:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f aeaf 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000800 	.word	0x48000800
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e08d      	b.n	8001896 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fa90 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2224      	movs	r2, #36	; 0x24
 8001798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	e006      	b.n	80017f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d108      	bne.n	800180a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	e007      	b.n	800181a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001818:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800183c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69d9      	ldr	r1, [r3, #28]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2220      	movs	r2, #32
 8001882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	d138      	bne.n	8001926 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018be:	2302      	movs	r3, #2
 80018c0:	e032      	b.n	8001928 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2224      	movs	r2, #36	; 0x24
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6819      	ldr	r1, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b20      	cmp	r3, #32
 8001948:	d139      	bne.n	80019be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001954:	2302      	movs	r3, #2
 8001956:	e033      	b.n	80019c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001986:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019be:	2302      	movs	r3, #2
  }
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a16:	d130      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a24:	d038      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2232      	movs	r2, #50	; 0x32
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4c:	e002      	b.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a60:	d102      	bne.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f2      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a74:	d110      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e00f      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d007      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f000 bc02 	b.w	80022cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac8:	4b96      	ldr	r3, [pc, #600]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad2:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80e4 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4c>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	f040 808b 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 8087 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b00:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_OscConfig+0x64>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e3d9      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_RCC_OscConfig+0x7e>
 8001b28:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b30:	e005      	b.n	8001b3e <HAL_RCC_OscConfig+0x8a>
 8001b32:	4b7c      	ldr	r3, [pc, #496]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d223      	bcs.n	8001b8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fd8c 	bl	8002664 <RCC_SetFlashLatencyFromMSIRange>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e3ba      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a72      	ldr	r2, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	496d      	ldr	r1, [pc, #436]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b74:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	4968      	ldr	r1, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e025      	b.n	8001bd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8a:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4960      	ldr	r1, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	495b      	ldr	r1, [pc, #364]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd4c 	bl	8002664 <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e37a      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd6:	f000 fc81 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4950      	ldr	r1, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	; (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fa22 	bl	8001044 <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d052      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	e35e      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d032      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a42      	ldr	r2, [pc, #264]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fa5f 	bl	80010e4 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fa5b 	bl	80010e4 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e347      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4930      	ldr	r1, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	492b      	ldr	r1, [pc, #172]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e01a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fa2c 	bl	80010e4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c90:	f7ff fa28 	bl	80010e4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e314      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1dc>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d073      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x21c>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d063      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d15f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e2f1      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x24c>
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e025      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_OscConfig+0x280>
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a02      	ldr	r2, [pc, #8]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08005030 	.word	0x08005030
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	20000008 	.word	0x20000008
 8001d34:	4ba0      	ldr	r3, [pc, #640]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a9f      	ldr	r2, [pc, #636]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b9d      	ldr	r3, [pc, #628]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a9c      	ldr	r2, [pc, #624]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f9c6 	bl	80010e4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f9c2 	bl	80010e4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e2ae      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b92      	ldr	r3, [pc, #584]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2a8>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f9b2 	bl	80010e4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f9ae 	bl	80010e4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e29a      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2d0>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x310>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x328>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e277      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4973      	ldr	r1, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	e040      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6e      	ldr	r2, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f96d 	bl	80010e4 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f969 	bl	80010e4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e255      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	495f      	ldr	r1, [pc, #380]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a5c      	ldr	r2, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f949 	bl	80010e4 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff f945 	bl	80010e4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e231      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03c      	beq.n	8001efa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f924 	bl	80010e4 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f920 	bl	80010e4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e20c      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3ec>
 8001ec0:	e01b      	b.n	8001efa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f907 	bl	80010e4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff f903 	bl	80010e4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1ef      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80a6 	beq.w	8002054 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d118      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f8ca 	bl	80010e4 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7ff f8c6 	bl	80010e4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1b2      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d8>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8a:	e029      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x50c>
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	4b9a      	ldr	r3, [pc, #616]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	4a99      	ldr	r2, [pc, #612]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd0:	4b96      	ldr	r3, [pc, #600]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	4a95      	ldr	r2, [pc, #596]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d016      	beq.n	8002016 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f87c 	bl	80010e4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f878 	bl	80010e4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e162      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002006:	4b89      	ldr	r3, [pc, #548]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ed      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x53c>
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff f865 	bl	80010e4 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff f861 	bl	80010e4 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e14b      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002034:	4b7d      	ldr	r3, [pc, #500]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ed      	bne.n	800201e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	4a77      	ldr	r2, [pc, #476]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03c      	beq.n	80020da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800206a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206e:	4a6f      	ldr	r2, [pc, #444]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff f834 	bl	80010e4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002080:	f7ff f830 	bl	80010e4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e11c      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002092:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ef      	beq.n	8002080 <HAL_RCC_OscConfig+0x5cc>
 80020a0:	e01b      	b.n	80020da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a8:	4a60      	ldr	r2, [pc, #384]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7ff f817 	bl	80010e4 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ba:	f7ff f813 	bl	80010e4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0ff      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020cc:	4b57      	ldr	r3, [pc, #348]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ef      	bne.n	80020ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80f3 	beq.w	80022ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f040 80c9 	bne.w	8002280 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ee:	4b4f      	ldr	r3, [pc, #316]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0203 	and.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	429a      	cmp	r2, r3
 8002100:	d12c      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	3b01      	subs	r3, #1
 800210e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d123      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d11b      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d113      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d109      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	3b01      	subs	r3, #1
 8002156:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d06b      	beq.n	8002234 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d062      	beq.n	8002228 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0ac      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800217c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800217e:	f7fe ffb1 	bl	80010e4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe ffad 	bl	80010e4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e099      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_RCC_OscConfig+0x77c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021be:	0212      	lsls	r2, r2, #8
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021c6:	0852      	lsrs	r2, r2, #1
 80021c8:	3a01      	subs	r2, #1
 80021ca:	0552      	lsls	r2, r2, #21
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021d2:	0852      	lsrs	r2, r2, #1
 80021d4:	3a01      	subs	r2, #1
 80021d6:	0652      	lsls	r2, r2, #25
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021de:	06d2      	lsls	r2, r2, #27
 80021e0:	430a      	orrs	r2, r1
 80021e2:	4912      	ldr	r1, [pc, #72]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a0c      	ldr	r2, [pc, #48]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002200:	f7fe ff70 	bl	80010e4 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe ff6c 	bl	80010e4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e058      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002226:	e050      	b.n	80022ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e04f      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
 800222c:	40021000 	.word	0x40021000
 8002230:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d144      	bne.n	80022ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002258:	f7fe ff44 	bl	80010e4 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe ff40 	bl	80010e4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e02c      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x7ac>
 800227e:	e024      	b.n	80022ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d01f      	beq.n	80022c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 800228c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7fe ff27 	bl	80010e4 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe ff23 	bl	80010e4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e00f      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4905      	ldr	r1, [pc, #20]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_OscConfig+0x824>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
 80022c4:	e001      	b.n	80022ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	feeefffc 	.word	0xfeeefffc

080022dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0e7      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d910      	bls.n	8002320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4970      	ldr	r1, [pc, #448]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b6e      	ldr	r3, [pc, #440]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cf      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d010      	beq.n	800234e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4b66      	ldr	r3, [pc, #408]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002338:	429a      	cmp	r2, r3
 800233a:	d908      	bls.n	800234e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4960      	ldr	r1, [pc, #384]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04c      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d121      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0a6      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237a:	4b54      	ldr	r3, [pc, #336]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e09a      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002392:	4b4e      	ldr	r3, [pc, #312]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e08e      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e086      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b46      	ldr	r3, [pc, #280]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4943      	ldr	r1, [pc, #268]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c4:	f7fe fe8e 	bl	80010e4 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fe8a 	bl	80010e4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e06e      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	429a      	cmp	r2, r3
 800240e:	d208      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	492b      	ldr	r1, [pc, #172]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d210      	bcs.n	8002452 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 0207 	bic.w	r2, r3, #7
 8002438:	4923      	ldr	r1, [pc, #140]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e036      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4918      	ldr	r1, [pc, #96]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4910      	ldr	r1, [pc, #64]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002490:	f000 f824 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	490b      	ldr	r1, [pc, #44]	; (80024d0 <HAL_RCC_ClockConfig+0x1f4>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1fc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fdc5 	bl	8001044 <HAL_InitTick>
 80024ba:	4603      	mov	r3, r0
 80024bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80024be:	7afb      	ldrb	r3, [r7, #11]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	08005030 	.word	0x08005030
 80024d4:	20000004 	.word	0x20000004
 80024d8:	20000008 	.word	0x20000008

080024dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ea:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x34>
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d121      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d11e      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e005      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002538:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10d      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d102      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e004      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d101      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002562:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d134      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0xa6>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d003      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0xac>
 8002580:	e005      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002584:	617b      	str	r3, [r7, #20]
      break;
 8002586:	e005      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800258a:	617b      	str	r3, [r7, #20]
      break;
 800258c:	e002      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	617b      	str	r3, [r7, #20]
      break;
 8002592:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	3301      	adds	r3, #1
 80025a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	fb03 f202 	mul.w	r2, r3, r2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	0e5b      	lsrs	r3, r3, #25
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	3301      	adds	r3, #1
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025d4:	69bb      	ldr	r3, [r7, #24]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08005048 	.word	0x08005048
 80025ec:	00f42400 	.word	0x00f42400
 80025f0:	007a1200 	.word	0x007a1200

080025f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_GetHCLKFreq+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002610:	f7ff fff0 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4904      	ldr	r1, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	08005040 	.word	0x08005040

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800263c:	f7ff ffda 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0adb      	lsrs	r3, r3, #11
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x28>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	08005040 	.word	0x08005040

08002664 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800267c:	f7ff f9b6 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002680:	6178      	str	r0, [r7, #20]
 8002682:	e014      	b.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	4a24      	ldr	r2, [pc, #144]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268e:	6593      	str	r3, [r2, #88]	; 0x58
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800269c:	f7ff f9a6 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 80026a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b4:	d10b      	bne.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d919      	bls.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2ba0      	cmp	r3, #160	; 0xa0
 80026c0:	d902      	bls.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c2:	2302      	movs	r3, #2
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	e013      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c8:	2301      	movs	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e010      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d902      	bls.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026d4:	2303      	movs	r3, #3
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e00a      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d102      	bne.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026e0:	2302      	movs	r3, #2
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e004      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d101      	bne.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ec:	2301      	movs	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 0207 	bic.w	r2, r3, #7
 80026f8:	4909      	ldr	r1, [pc, #36]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	40022000 	.word	0x40022000

08002724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800272c:	2300      	movs	r3, #0
 800272e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002730:	2300      	movs	r3, #0
 8002732:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273c:	2b00      	cmp	r3, #0
 800273e:	d031      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002748:	d01a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800274a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800274e:	d814      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002754:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002758:	d10f      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002766:	e00c      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f9de 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002778:	e003      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	74fb      	strb	r3, [r7, #19]
      break;
 800277e:	e000      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002788:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	494e      	ldr	r1, [pc, #312]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800279e:	e001      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 809e 	beq.w	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	; 0x58
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e8:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a39      	ldr	r2, [pc, #228]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fc76 	bl	80010e4 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fa:	e009      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe fc72 	bl	80010e4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d902      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	74fb      	strb	r3, [r7, #19]
        break;
 800280e:	e005      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002810:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ef      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d15a      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01e      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	429a      	cmp	r2, r3
 800283c:	d019      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002848:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800286a:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d016      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fc32 	bl	80010e4 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	e00b      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fc2e 	bl	80010e4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d902      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	74fb      	strb	r3, [r7, #19]
            break;
 800289a:	e006      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ec      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
 80028cc:	e006      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028dc:	7c7b      	ldrb	r3, [r7, #17]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b8a      	ldr	r3, [pc, #552]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	4a89      	ldr	r2, [pc, #548]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fa:	4b84      	ldr	r3, [pc, #528]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f023 0203 	bic.w	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4980      	ldr	r1, [pc, #512]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291c:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 020c 	bic.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	4978      	ldr	r1, [pc, #480]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	496f      	ldr	r1, [pc, #444]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	4967      	ldr	r1, [pc, #412]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002982:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	495e      	ldr	r1, [pc, #376]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	4956      	ldr	r1, [pc, #344]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029c6:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	494d      	ldr	r1, [pc, #308]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d028      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4945      	ldr	r1, [pc, #276]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a06:	d106      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a12:	60d3      	str	r3, [r2, #12]
 8002a14:	e011      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f882 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d028      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	492d      	ldr	r1, [pc, #180]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a70:	60d3      	str	r3, [r2, #12]
 8002a72:	e011      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f853 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	4916      	ldr	r1, [pc, #88]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f830 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b00:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000

08002b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b3e:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b4a:	4b71      	ldr	r3, [pc, #452]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0203 	and.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10d      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b62:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
       ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d047      	beq.n	8002c06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e044      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d018      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0x86>
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d825      	bhi.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa4>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d002      	beq.n	8002b92 <RCCEx_PLLSAI1_Config+0x62>
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d009      	beq.n	8002ba4 <RCCEx_PLLSAI1_Config+0x74>
 8002b90:	e020      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba2:	e01a      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba4:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e013      	b.n	8002bde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bb6:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bd2:	e006      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e004      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002be2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bea:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	4943      	ldr	r1, [pc, #268]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d17c      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c0c:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3f      	ldr	r2, [pc, #252]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe fa64 	bl	80010e4 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1e:	e009      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c20:	f7fe fa60 	bl	80010e4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	73fb      	strb	r3, [r7, #15]
        break;
 8002c32:	e005      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ef      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d15f      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d110      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6892      	ldr	r2, [r2, #8]
 8002c5c:	0211      	lsls	r1, r2, #8
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	06d2      	lsls	r2, r2, #27
 8002c64:	430a      	orrs	r2, r1
 8002c66:	492a      	ldr	r1, [pc, #168]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	610b      	str	r3, [r1, #16]
 8002c6c:	e027      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d112      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c74:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	0211      	lsls	r1, r2, #8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6912      	ldr	r2, [r2, #16]
 8002c8a:	0852      	lsrs	r2, r2, #1
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	0552      	lsls	r2, r2, #21
 8002c90:	430a      	orrs	r2, r1
 8002c92:	491f      	ldr	r1, [pc, #124]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	610b      	str	r3, [r1, #16]
 8002c98:	e011      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ca2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	0211      	lsls	r1, r2, #8
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6952      	ldr	r2, [r2, #20]
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0652      	lsls	r2, r2, #25
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	4915      	ldr	r1, [pc, #84]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe fa0b 	bl	80010e4 <HAL_GetTick>
 8002cce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd0:	e009      	b.n	8002ce6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd2:	f7fe fa07 	bl	80010e4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d902      	bls.n	8002ce6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce4:	e005      	b.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ef      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000

08002d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e040      	b.n	8002da8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe f814 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fdaa 	bl	80038b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fb7b 	bl	800345c <UART_SetConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e01b      	b.n	8002da8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fe29 	bl	80039f8 <UART_CheckIdleState>
 8002da6:	4603      	mov	r3, r0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d137      	bne.n	8002e38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_Receive_IT+0x24>
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e030      	b.n	8002e3a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <HAL_UART_Receive_IT+0x94>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d01f      	beq.n	8002e28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d018      	beq.n	8002e28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	613b      	str	r3, [r7, #16]
   return(result);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	623b      	str	r3, [r7, #32]
 8002e16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	69f9      	ldr	r1, [r7, #28]
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e6      	bne.n	8002df6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fef2 	bl	8003c18 <UART_Start_Receive_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	e000      	b.n	8002e3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3728      	adds	r7, #40	; 0x28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40008000 	.word	0x40008000

08002e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0ba      	sub	sp, #232	; 0xe8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e72:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e76:	4013      	ands	r3, r2
 8002e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d115      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00f      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 82ae 	beq.w	8003402 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
      }
      return;
 8002eae:	e2a8      	b.n	8003402 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8117 	beq.w	80030e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ec6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002eca:	4b85      	ldr	r3, [pc, #532]	; (80030e0 <HAL_UART_IRQHandler+0x298>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 810a 	beq.w	80030e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d011      	beq.n	8002f04 <HAL_UART_IRQHandler+0xbc>
 8002ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d011      	beq.n	8002f34 <HAL_UART_IRQHandler+0xec>
 8002f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2202      	movs	r2, #2
 8002f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d011      	beq.n	8002f64 <HAL_UART_IRQHandler+0x11c>
 8002f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2204      	movs	r2, #4
 8002f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f96:	f043 0208 	orr.w	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d012      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x18a>
 8002fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8214 	beq.w	8003406 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d005      	beq.n	800302a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800301e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003022:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003026:	2b00      	cmp	r3, #0
 8003028:	d04f      	beq.n	80030ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 feba 	bl	8003da4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d141      	bne.n	80030c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3308      	adds	r3, #8
 8003044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3308      	adds	r3, #8
 8003066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800306a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800306e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1d9      	bne.n	800303e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	2b00      	cmp	r3, #0
 8003090:	d013      	beq.n	80030ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <HAL_UART_IRQHandler+0x29c>)
 8003098:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f99f 	bl	80013e2 <HAL_DMA_Abort_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d017      	beq.n	80030da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030b4:	4610      	mov	r0, r2
 80030b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	e00f      	b.n	80030da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9b8 	bl	8003430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	e00b      	b.n	80030da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9b4 	bl	8003430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c8:	e007      	b.n	80030da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9b0 	bl	8003430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80030d8:	e195      	b.n	8003406 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030da:	bf00      	nop
    return;
 80030dc:	e193      	b.n	8003406 <HAL_UART_IRQHandler+0x5be>
 80030de:	bf00      	nop
 80030e0:	04000120 	.word	0x04000120
 80030e4:	08003e6d 	.word	0x08003e6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 814e 	bne.w	800338e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8147 	beq.w	800338e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8140 	beq.w	800338e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2210      	movs	r2, #16
 8003114:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	f040 80b8 	bne.w	8003296 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003132:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8167 	beq.w	800340a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003146:	429a      	cmp	r2, r3
 8003148:	f080 815f 	bcs.w	800340a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 8086 	bne.w	8003274 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800317c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003196:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800319e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1da      	bne.n	8003168 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3308      	adds	r3, #8
 80031b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3308      	adds	r3, #8
 80031d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e1      	bne.n	80031b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3308      	adds	r3, #8
 80031f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e3      	bne.n	80031ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003244:	f023 0310 	bic.w	r3, r3, #16
 8003248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003256:	65bb      	str	r3, [r7, #88]	; 0x58
 8003258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800325c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e4      	bne.n	8003234 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe f879 	bl	8001366 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003286:	b29b      	uxth	r3, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	b29b      	uxth	r3, r3
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8d8 	bl	8003444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003294:	e0b9      	b.n	800340a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80ab 	beq.w	800340e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80032b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a6 	beq.w	800340e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032e4:	647b      	str	r3, [r7, #68]	; 0x44
 80032e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e4      	bne.n	80032c2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	623b      	str	r3, [r7, #32]
   return(result);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800331c:	633a      	str	r2, [r7, #48]	; 0x30
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e3      	bne.n	80032f8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	60fb      	str	r3, [r7, #12]
   return(result);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f023 0310 	bic.w	r3, r3, #16
 8003358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	69b9      	ldr	r1, [r7, #24]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	617b      	str	r3, [r7, #20]
   return(result);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e4      	bne.n	8003344 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f85c 	bl	8003444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800338c:	e03f      	b.n	800340e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <HAL_UART_IRQHandler+0x570>
 800339a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 ffbe 	bl	8004332 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033b6:	e02d      	b.n	8003414 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01c      	beq.n	8003412 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
    }
    return;
 80033e0:	e017      	b.n	8003412 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <HAL_UART_IRQHandler+0x5cc>
 80033ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fd4c 	bl	8003e98 <UART_EndTransmit_IT>
    return;
 8003400:	e008      	b.n	8003414 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003402:	bf00      	nop
 8003404:	e006      	b.n	8003414 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003406:	bf00      	nop
 8003408:	e004      	b.n	8003414 <HAL_UART_IRQHandler+0x5cc>
      return;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <HAL_UART_IRQHandler+0x5cc>
      return;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003412:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003414:	37e8      	adds	r7, #232	; 0xe8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop

0800341c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800345c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003460:	b08a      	sub	sp, #40	; 0x28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4313      	orrs	r3, r2
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4bb4      	ldr	r3, [pc, #720]	; (800375c <UART_SetConfig+0x300>)
 800348c:	4013      	ands	r3, r2
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003494:	430b      	orrs	r3, r1
 8003496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4aa9      	ldr	r2, [pc, #676]	; (8003760 <UART_SetConfig+0x304>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	4313      	orrs	r3, r2
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4aa0      	ldr	r2, [pc, #640]	; (8003764 <UART_SetConfig+0x308>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d126      	bne.n	8003534 <UART_SetConfig+0xd8>
 80034e6:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <UART_SetConfig+0x30c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d81b      	bhi.n	800352c <UART_SetConfig+0xd0>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0xa0>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	0800351d 	.word	0x0800351d
 8003504:	08003515 	.word	0x08003515
 8003508:	08003525 	.word	0x08003525
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003512:	e080      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003514:	2302      	movs	r3, #2
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351a:	e07c      	b.n	8003616 <UART_SetConfig+0x1ba>
 800351c:	2304      	movs	r3, #4
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	e078      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003524:	2308      	movs	r3, #8
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352a:	e074      	b.n	8003616 <UART_SetConfig+0x1ba>
 800352c:	2310      	movs	r3, #16
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003532:	e070      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a8c      	ldr	r2, [pc, #560]	; (800376c <UART_SetConfig+0x310>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d138      	bne.n	80035b0 <UART_SetConfig+0x154>
 800353e:	4b8a      	ldr	r3, [pc, #552]	; (8003768 <UART_SetConfig+0x30c>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d82d      	bhi.n	80035a8 <UART_SetConfig+0x14c>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <UART_SetConfig+0xf8>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003589 	.word	0x08003589
 8003558:	080035a9 	.word	0x080035a9
 800355c:	080035a9 	.word	0x080035a9
 8003560:	080035a9 	.word	0x080035a9
 8003564:	08003599 	.word	0x08003599
 8003568:	080035a9 	.word	0x080035a9
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
 8003574:	08003591 	.word	0x08003591
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035a1 	.word	0x080035a1
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e042      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003590:	2302      	movs	r3, #2
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003596:	e03e      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003598:	2304      	movs	r3, #4
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359e:	e03a      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035a0:	2308      	movs	r3, #8
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a6:	e036      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e032      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6a      	ldr	r2, [pc, #424]	; (8003760 <UART_SetConfig+0x304>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d12a      	bne.n	8003610 <UART_SetConfig+0x1b4>
 80035ba:	4b6b      	ldr	r3, [pc, #428]	; (8003768 <UART_SetConfig+0x30c>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c8:	d01a      	beq.n	8003600 <UART_SetConfig+0x1a4>
 80035ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ce:	d81b      	bhi.n	8003608 <UART_SetConfig+0x1ac>
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d4:	d00c      	beq.n	80035f0 <UART_SetConfig+0x194>
 80035d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035da:	d815      	bhi.n	8003608 <UART_SetConfig+0x1ac>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <UART_SetConfig+0x18c>
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e4:	d008      	beq.n	80035f8 <UART_SetConfig+0x19c>
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x1ac>
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ee:	e012      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035f0:	2302      	movs	r3, #2
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f6:	e00e      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035f8:	2304      	movs	r3, #4
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fe:	e00a      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003600:	2308      	movs	r3, #8
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003606:	e006      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003608:	2310      	movs	r3, #16
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e002      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a51      	ldr	r2, [pc, #324]	; (8003760 <UART_SetConfig+0x304>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d17a      	bne.n	8003716 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003624:	2b08      	cmp	r3, #8
 8003626:	d824      	bhi.n	8003672 <UART_SetConfig+0x216>
 8003628:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <UART_SetConfig+0x1d4>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003655 	.word	0x08003655
 8003634:	08003673 	.word	0x08003673
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003673 	.word	0x08003673
 8003640:	08003663 	.word	0x08003663
 8003644:	08003673 	.word	0x08003673
 8003648:	08003673 	.word	0x08003673
 800364c:	08003673 	.word	0x08003673
 8003650:	0800366b 	.word	0x0800366b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe ffda 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8003658:	61f8      	str	r0, [r7, #28]
        break;
 800365a:	e010      	b.n	800367e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365c:	4b44      	ldr	r3, [pc, #272]	; (8003770 <UART_SetConfig+0x314>)
 800365e:	61fb      	str	r3, [r7, #28]
        break;
 8003660:	e00d      	b.n	800367e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003662:	f7fe ff3b 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8003666:	61f8      	str	r0, [r7, #28]
        break;
 8003668:	e009      	b.n	800367e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366e:	61fb      	str	r3, [r7, #28]
        break;
 8003670:	e005      	b.n	800367e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800367c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8107 	beq.w	8003894 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	429a      	cmp	r2, r3
 8003694:	d305      	bcc.n	80036a2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d903      	bls.n	80036aa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036a8:	e0f4      	b.n	8003894 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2200      	movs	r2, #0
 80036ae:	461c      	mov	r4, r3
 80036b0:	4615      	mov	r5, r2
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	022b      	lsls	r3, r5, #8
 80036bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036c0:	0222      	lsls	r2, r4, #8
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	6849      	ldr	r1, [r1, #4]
 80036c6:	0849      	lsrs	r1, r1, #1
 80036c8:	2000      	movs	r0, #0
 80036ca:	4688      	mov	r8, r1
 80036cc:	4681      	mov	r9, r0
 80036ce:	eb12 0a08 	adds.w	sl, r2, r8
 80036d2:	eb43 0b09 	adc.w	fp, r3, r9
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e4:	4650      	mov	r0, sl
 80036e6:	4659      	mov	r1, fp
 80036e8:	f7fc fdda 	bl	80002a0 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d308      	bcc.n	800370e <UART_SetConfig+0x2b2>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003702:	d204      	bcs.n	800370e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	e0c2      	b.n	8003894 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003714:	e0be      	b.n	8003894 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371e:	d16a      	bne.n	80037f6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003724:	2b08      	cmp	r3, #8
 8003726:	d834      	bhi.n	8003792 <UART_SetConfig+0x336>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <UART_SetConfig+0x2d4>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003755 	.word	0x08003755
 8003734:	08003775 	.word	0x08003775
 8003738:	0800377d 	.word	0x0800377d
 800373c:	08003793 	.word	0x08003793
 8003740:	08003783 	.word	0x08003783
 8003744:	08003793 	.word	0x08003793
 8003748:	08003793 	.word	0x08003793
 800374c:	08003793 	.word	0x08003793
 8003750:	0800378b 	.word	0x0800378b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003754:	f7fe ff5a 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8003758:	61f8      	str	r0, [r7, #28]
        break;
 800375a:	e020      	b.n	800379e <UART_SetConfig+0x342>
 800375c:	efff69f3 	.word	0xefff69f3
 8003760:	40008000 	.word	0x40008000
 8003764:	40013800 	.word	0x40013800
 8003768:	40021000 	.word	0x40021000
 800376c:	40004400 	.word	0x40004400
 8003770:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7fe ff60 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8003778:	61f8      	str	r0, [r7, #28]
        break;
 800377a:	e010      	b.n	800379e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <UART_SetConfig+0x454>)
 800377e:	61fb      	str	r3, [r7, #28]
        break;
 8003780:	e00d      	b.n	800379e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe feab 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8003786:	61f8      	str	r0, [r7, #28]
        break;
 8003788:	e009      	b.n	800379e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378e:	61fb      	str	r3, [r7, #28]
        break;
 8003790:	e005      	b.n	800379e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800379c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d077      	beq.n	8003894 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005a      	lsls	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	d916      	bls.n	80037ee <UART_SetConfig+0x392>
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d212      	bcs.n	80037ee <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f023 030f 	bic.w	r3, r3, #15
 80037d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	b29a      	uxth	r2, r3
 80037de:	8afb      	ldrh	r3, [r7, #22]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	8afa      	ldrh	r2, [r7, #22]
 80037ea:	60da      	str	r2, [r3, #12]
 80037ec:	e052      	b.n	8003894 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037f4:	e04e      	b.n	8003894 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d827      	bhi.n	800384e <UART_SetConfig+0x3f2>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0x3a8>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003829 	.word	0x08003829
 8003808:	08003831 	.word	0x08003831
 800380c:	08003839 	.word	0x08003839
 8003810:	0800384f 	.word	0x0800384f
 8003814:	0800383f 	.word	0x0800383f
 8003818:	0800384f 	.word	0x0800384f
 800381c:	0800384f 	.word	0x0800384f
 8003820:	0800384f 	.word	0x0800384f
 8003824:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fef0 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 800382c:	61f8      	str	r0, [r7, #28]
        break;
 800382e:	e014      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7fe ff02 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8003834:	61f8      	str	r0, [r7, #28]
        break;
 8003836:	e010      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <UART_SetConfig+0x454>)
 800383a:	61fb      	str	r3, [r7, #28]
        break;
 800383c:	e00d      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fe4d 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8003842:	61f8      	str	r0, [r7, #28]
        break;
 8003844:	e009      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	61fb      	str	r3, [r7, #28]
        break;
 800384c:	e005      	b.n	800385a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003858:	bf00      	nop
    }

    if (pclk != 0U)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d019      	beq.n	8003894 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	085a      	lsrs	r2, r3, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	441a      	add	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	d909      	bls.n	800388e <UART_SetConfig+0x432>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d205      	bcs.n	800388e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	e002      	b.n	8003894 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ae:	bf00      	nop
 80038b0:	00f42400 	.word	0x00f42400

080038b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01a      	beq.n	80039ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b2:	d10a      	bne.n	80039ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b098      	sub	sp, #96	; 0x60
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a08:	f7fd fb6c 	bl	80010e4 <HAL_GetTick>
 8003a0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d12e      	bne.n	8003a7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f88c 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d021      	beq.n	8003a7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
 8003a56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e6      	bne.n	8003a36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e062      	b.n	8003b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d149      	bne.n	8003b1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f856 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d03c      	beq.n	8003b1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	617b      	str	r3, [r7, #20]
   return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e011      	b.n	8003b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3758      	adds	r7, #88	; 0x58
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	e049      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b60:	d045      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fd fabf 	bl	80010e4 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e048      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d031      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d110      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8ff 	bl	8003da4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e029      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc8:	d111      	bne.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f8e5 	bl	8003da4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e00f      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d0a6      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b097      	sub	sp, #92	; 0x5c
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4a:	d10e      	bne.n	8003c6a <UART_Start_Receive_IT+0x52>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <UART_Start_Receive_IT+0x48>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c5e:	e02d      	b.n	8003cbc <UART_Start_Receive_IT+0xa4>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	22ff      	movs	r2, #255	; 0xff
 8003c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c68:	e028      	b.n	8003cbc <UART_Start_Receive_IT+0xa4>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <UART_Start_Receive_IT+0x76>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <UART_Start_Receive_IT+0x6c>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c82:	e01b      	b.n	8003cbc <UART_Start_Receive_IT+0xa4>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	227f      	movs	r2, #127	; 0x7f
 8003c88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c8c:	e016      	b.n	8003cbc <UART_Start_Receive_IT+0xa4>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c96:	d10d      	bne.n	8003cb4 <UART_Start_Receive_IT+0x9c>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <UART_Start_Receive_IT+0x92>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	227f      	movs	r2, #127	; 0x7f
 8003ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca8:	e008      	b.n	8003cbc <UART_Start_Receive_IT+0xa4>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	223f      	movs	r2, #63	; 0x3f
 8003cae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cb2:	e003      	b.n	8003cbc <UART_Start_Receive_IT+0xa4>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2222      	movs	r2, #34	; 0x22
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cec:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d107      	bne.n	8003d1a <UART_Start_Receive_IT+0x102>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <UART_Start_Receive_IT+0x184>)
 8003d16:	669a      	str	r2, [r3, #104]	; 0x68
 8003d18:	e002      	b.n	8003d20 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <UART_Start_Receive_IT+0x188>)
 8003d1e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d019      	beq.n	8003d5c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
 8003d48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e6      	bne.n	8003d28 <UART_Start_Receive_IT+0x110>
 8003d5a:	e018      	b.n	8003d8e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	653b      	str	r3, [r7, #80]	; 0x50
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	69f9      	ldr	r1, [r7, #28]
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	375c      	adds	r7, #92	; 0x5c
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	080040a9 	.word	0x080040a9
 8003da0:	08003eed 	.word	0x08003eed

08003da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b095      	sub	sp, #84	; 0x54
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dca:	643b      	str	r3, [r7, #64]	; 0x40
 8003dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3308      	adds	r3, #8
 8003de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d118      	bne.n	8003e4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f023 0310 	bic.w	r3, r3, #16
 8003e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6979      	ldr	r1, [r7, #20]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	613b      	str	r3, [r7, #16]
   return(result);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e60:	bf00      	nop
 8003e62:	3754      	adds	r7, #84	; 0x54
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff fad0 	bl	8003430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e6      	bne.n	8003ea0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fa9c 	bl	800341c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee4:	bf00      	nop
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b09c      	sub	sp, #112	; 0x70
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003efa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f04:	2b22      	cmp	r3, #34	; 0x22
 8003f06:	f040 80be 	bne.w	8004086 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f18:	b2d9      	uxtb	r1, r3
 8003f1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	400a      	ands	r2, r1
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 80a3 	bne.w	800409a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e6      	bne.n	8003f54 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fa6:	647a      	str	r2, [r7, #68]	; 0x44
 8003fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <UART_RxISR_8BIT+0x1b8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01f      	beq.n	8004018 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d018      	beq.n	8004018 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
 8004006:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e6      	bne.n	8003fe6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401c:	2b01      	cmp	r3, #1
 800401e:	d12e      	bne.n	800407e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	60fb      	str	r3, [r7, #12]
   return(result);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	617b      	str	r3, [r7, #20]
   return(result);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e6      	bne.n	8004026 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d103      	bne.n	800406e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2210      	movs	r2, #16
 800406c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff f9e4 	bl	8003444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800407c:	e00d      	b.n	800409a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fc12 	bl	80008a8 <HAL_UART_RxCpltCallback>
}
 8004084:	e009      	b.n	800409a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	8b1b      	ldrh	r3, [r3, #24]
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	b292      	uxth	r2, r2
 8004098:	831a      	strh	r2, [r3, #24]
}
 800409a:	bf00      	nop
 800409c:	3770      	adds	r7, #112	; 0x70
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40008000 	.word	0x40008000

080040a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b09c      	sub	sp, #112	; 0x70
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c0:	2b22      	cmp	r3, #34	; 0x22
 80040c2:	f040 80be 	bne.w	8004242 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80040d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80040da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80040de:	4013      	ands	r3, r2
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 80a3 	bne.w	8004256 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800411e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004124:	667b      	str	r3, [r7, #100]	; 0x64
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412e:	657b      	str	r3, [r7, #84]	; 0x54
 8004130:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800413c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e6      	bne.n	8004110 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	663b      	str	r3, [r7, #96]	; 0x60
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004162:	643a      	str	r2, [r7, #64]	; 0x40
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e5      	bne.n	8004142 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a34      	ldr	r2, [pc, #208]	; (8004260 <UART_RxISR_16BIT+0x1b8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d01f      	beq.n	80041d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e6      	bne.n	80041a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d12e      	bne.n	800423a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0310 	bic.w	r3, r3, #16
 80041f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6979      	ldr	r1, [r7, #20]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	613b      	str	r3, [r7, #16]
   return(result);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e6      	bne.n	80041e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d103      	bne.n	800422a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2210      	movs	r2, #16
 8004228:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff f906 	bl	8003444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004238:	e00d      	b.n	8004256 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc fb34 	bl	80008a8 <HAL_UART_RxCpltCallback>
}
 8004240:	e009      	b.n	8004256 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	8b1b      	ldrh	r3, [r3, #24]
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0208 	orr.w	r2, r2, #8
 8004252:	b292      	uxth	r2, r2
 8004254:	831a      	strh	r2, [r3, #24]
}
 8004256:	bf00      	nop
 8004258:	3770      	adds	r7, #112	; 0x70
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40008000 	.word	0x40008000

08004264 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e056      	b.n	800432a <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7fc fd69 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2224      	movs	r2, #36	; 0x24
 8004296:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff faff 	bl	80038b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff f8d0 	bl	800345c <UART_SetConfig>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e031      	b.n	800432a <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	055b      	lsls	r3, r3, #21
 80042ee:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8004304:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	430b      	orrs	r3, r1
 8004310:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fb68 	bl	80039f8 <UART_CheckIdleState>
 8004328:	4603      	mov	r3, r0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <atoi>:
 8004346:	220a      	movs	r2, #10
 8004348:	2100      	movs	r1, #0
 800434a:	f000 b885 	b.w	8004458 <strtol>
	...

08004350 <_strtol_l.constprop.0>:
 8004350:	2b01      	cmp	r3, #1
 8004352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004356:	d001      	beq.n	800435c <_strtol_l.constprop.0+0xc>
 8004358:	2b24      	cmp	r3, #36	; 0x24
 800435a:	d906      	bls.n	800436a <_strtol_l.constprop.0+0x1a>
 800435c:	f000 f8bc 	bl	80044d8 <__errno>
 8004360:	2316      	movs	r3, #22
 8004362:	6003      	str	r3, [r0, #0]
 8004364:	2000      	movs	r0, #0
 8004366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004450 <_strtol_l.constprop.0+0x100>
 800436e:	460d      	mov	r5, r1
 8004370:	462e      	mov	r6, r5
 8004372:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004376:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800437a:	f017 0708 	ands.w	r7, r7, #8
 800437e:	d1f7      	bne.n	8004370 <_strtol_l.constprop.0+0x20>
 8004380:	2c2d      	cmp	r4, #45	; 0x2d
 8004382:	d132      	bne.n	80043ea <_strtol_l.constprop.0+0x9a>
 8004384:	782c      	ldrb	r4, [r5, #0]
 8004386:	2701      	movs	r7, #1
 8004388:	1cb5      	adds	r5, r6, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d05b      	beq.n	8004446 <_strtol_l.constprop.0+0xf6>
 800438e:	2b10      	cmp	r3, #16
 8004390:	d109      	bne.n	80043a6 <_strtol_l.constprop.0+0x56>
 8004392:	2c30      	cmp	r4, #48	; 0x30
 8004394:	d107      	bne.n	80043a6 <_strtol_l.constprop.0+0x56>
 8004396:	782c      	ldrb	r4, [r5, #0]
 8004398:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800439c:	2c58      	cmp	r4, #88	; 0x58
 800439e:	d14d      	bne.n	800443c <_strtol_l.constprop.0+0xec>
 80043a0:	786c      	ldrb	r4, [r5, #1]
 80043a2:	2310      	movs	r3, #16
 80043a4:	3502      	adds	r5, #2
 80043a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80043aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80043ae:	f04f 0e00 	mov.w	lr, #0
 80043b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80043b6:	4676      	mov	r6, lr
 80043b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80043bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80043c0:	f1bc 0f09 	cmp.w	ip, #9
 80043c4:	d816      	bhi.n	80043f4 <_strtol_l.constprop.0+0xa4>
 80043c6:	4664      	mov	r4, ip
 80043c8:	42a3      	cmp	r3, r4
 80043ca:	dd24      	ble.n	8004416 <_strtol_l.constprop.0+0xc6>
 80043cc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80043d0:	d008      	beq.n	80043e4 <_strtol_l.constprop.0+0x94>
 80043d2:	45b1      	cmp	r9, r6
 80043d4:	d31c      	bcc.n	8004410 <_strtol_l.constprop.0+0xc0>
 80043d6:	d101      	bne.n	80043dc <_strtol_l.constprop.0+0x8c>
 80043d8:	45a2      	cmp	sl, r4
 80043da:	db19      	blt.n	8004410 <_strtol_l.constprop.0+0xc0>
 80043dc:	fb06 4603 	mla	r6, r6, r3, r4
 80043e0:	f04f 0e01 	mov.w	lr, #1
 80043e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043e8:	e7e8      	b.n	80043bc <_strtol_l.constprop.0+0x6c>
 80043ea:	2c2b      	cmp	r4, #43	; 0x2b
 80043ec:	bf04      	itt	eq
 80043ee:	782c      	ldrbeq	r4, [r5, #0]
 80043f0:	1cb5      	addeq	r5, r6, #2
 80043f2:	e7ca      	b.n	800438a <_strtol_l.constprop.0+0x3a>
 80043f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80043f8:	f1bc 0f19 	cmp.w	ip, #25
 80043fc:	d801      	bhi.n	8004402 <_strtol_l.constprop.0+0xb2>
 80043fe:	3c37      	subs	r4, #55	; 0x37
 8004400:	e7e2      	b.n	80043c8 <_strtol_l.constprop.0+0x78>
 8004402:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004406:	f1bc 0f19 	cmp.w	ip, #25
 800440a:	d804      	bhi.n	8004416 <_strtol_l.constprop.0+0xc6>
 800440c:	3c57      	subs	r4, #87	; 0x57
 800440e:	e7db      	b.n	80043c8 <_strtol_l.constprop.0+0x78>
 8004410:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004414:	e7e6      	b.n	80043e4 <_strtol_l.constprop.0+0x94>
 8004416:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800441a:	d105      	bne.n	8004428 <_strtol_l.constprop.0+0xd8>
 800441c:	2322      	movs	r3, #34	; 0x22
 800441e:	6003      	str	r3, [r0, #0]
 8004420:	4646      	mov	r6, r8
 8004422:	b942      	cbnz	r2, 8004436 <_strtol_l.constprop.0+0xe6>
 8004424:	4630      	mov	r0, r6
 8004426:	e79e      	b.n	8004366 <_strtol_l.constprop.0+0x16>
 8004428:	b107      	cbz	r7, 800442c <_strtol_l.constprop.0+0xdc>
 800442a:	4276      	negs	r6, r6
 800442c:	2a00      	cmp	r2, #0
 800442e:	d0f9      	beq.n	8004424 <_strtol_l.constprop.0+0xd4>
 8004430:	f1be 0f00 	cmp.w	lr, #0
 8004434:	d000      	beq.n	8004438 <_strtol_l.constprop.0+0xe8>
 8004436:	1e69      	subs	r1, r5, #1
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	e7f3      	b.n	8004424 <_strtol_l.constprop.0+0xd4>
 800443c:	2430      	movs	r4, #48	; 0x30
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1b1      	bne.n	80043a6 <_strtol_l.constprop.0+0x56>
 8004442:	2308      	movs	r3, #8
 8004444:	e7af      	b.n	80043a6 <_strtol_l.constprop.0+0x56>
 8004446:	2c30      	cmp	r4, #48	; 0x30
 8004448:	d0a5      	beq.n	8004396 <_strtol_l.constprop.0+0x46>
 800444a:	230a      	movs	r3, #10
 800444c:	e7ab      	b.n	80043a6 <_strtol_l.constprop.0+0x56>
 800444e:	bf00      	nop
 8004450:	08005079 	.word	0x08005079

08004454 <_strtol_r>:
 8004454:	f7ff bf7c 	b.w	8004350 <_strtol_l.constprop.0>

08004458 <strtol>:
 8004458:	4613      	mov	r3, r2
 800445a:	460a      	mov	r2, r1
 800445c:	4601      	mov	r1, r0
 800445e:	4802      	ldr	r0, [pc, #8]	; (8004468 <strtol+0x10>)
 8004460:	6800      	ldr	r0, [r0, #0]
 8004462:	f7ff bf75 	b.w	8004350 <_strtol_l.constprop.0>
 8004466:	bf00      	nop
 8004468:	2000005c 	.word	0x2000005c

0800446c <siscanf>:
 800446c:	b40e      	push	{r1, r2, r3}
 800446e:	b510      	push	{r4, lr}
 8004470:	b09f      	sub	sp, #124	; 0x7c
 8004472:	ac21      	add	r4, sp, #132	; 0x84
 8004474:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004478:	f854 2b04 	ldr.w	r2, [r4], #4
 800447c:	9201      	str	r2, [sp, #4]
 800447e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004482:	9004      	str	r0, [sp, #16]
 8004484:	9008      	str	r0, [sp, #32]
 8004486:	f7fb fead 	bl	80001e4 <strlen>
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <siscanf+0x50>)
 800448c:	9005      	str	r0, [sp, #20]
 800448e:	9009      	str	r0, [sp, #36]	; 0x24
 8004490:	930d      	str	r3, [sp, #52]	; 0x34
 8004492:	480b      	ldr	r0, [pc, #44]	; (80044c0 <siscanf+0x54>)
 8004494:	9a01      	ldr	r2, [sp, #4]
 8004496:	6800      	ldr	r0, [r0, #0]
 8004498:	9403      	str	r4, [sp, #12]
 800449a:	2300      	movs	r3, #0
 800449c:	9311      	str	r3, [sp, #68]	; 0x44
 800449e:	9316      	str	r3, [sp, #88]	; 0x58
 80044a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80044a8:	a904      	add	r1, sp, #16
 80044aa:	4623      	mov	r3, r4
 80044ac:	f000 f992 	bl	80047d4 <__ssvfiscanf_r>
 80044b0:	b01f      	add	sp, #124	; 0x7c
 80044b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b6:	b003      	add	sp, #12
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	2000005c 	.word	0x2000005c

080044c4 <__seofread>:
 80044c4:	2000      	movs	r0, #0
 80044c6:	4770      	bx	lr

080044c8 <memset>:
 80044c8:	4402      	add	r2, r0
 80044ca:	4603      	mov	r3, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <__errno>:
 80044d8:	4b01      	ldr	r3, [pc, #4]	; (80044e0 <__errno+0x8>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	2000005c 	.word	0x2000005c

080044e4 <__libc_init_array>:
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	4d0d      	ldr	r5, [pc, #52]	; (800451c <__libc_init_array+0x38>)
 80044e8:	4c0d      	ldr	r4, [pc, #52]	; (8004520 <__libc_init_array+0x3c>)
 80044ea:	1b64      	subs	r4, r4, r5
 80044ec:	10a4      	asrs	r4, r4, #2
 80044ee:	2600      	movs	r6, #0
 80044f0:	42a6      	cmp	r6, r4
 80044f2:	d109      	bne.n	8004508 <__libc_init_array+0x24>
 80044f4:	4d0b      	ldr	r5, [pc, #44]	; (8004524 <__libc_init_array+0x40>)
 80044f6:	4c0c      	ldr	r4, [pc, #48]	; (8004528 <__libc_init_array+0x44>)
 80044f8:	f000 fd70 	bl	8004fdc <_init>
 80044fc:	1b64      	subs	r4, r4, r5
 80044fe:	10a4      	asrs	r4, r4, #2
 8004500:	2600      	movs	r6, #0
 8004502:	42a6      	cmp	r6, r4
 8004504:	d105      	bne.n	8004512 <__libc_init_array+0x2e>
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	f855 3b04 	ldr.w	r3, [r5], #4
 800450c:	4798      	blx	r3
 800450e:	3601      	adds	r6, #1
 8004510:	e7ee      	b.n	80044f0 <__libc_init_array+0xc>
 8004512:	f855 3b04 	ldr.w	r3, [r5], #4
 8004516:	4798      	blx	r3
 8004518:	3601      	adds	r6, #1
 800451a:	e7f2      	b.n	8004502 <__libc_init_array+0x1e>
 800451c:	080051a0 	.word	0x080051a0
 8004520:	080051a0 	.word	0x080051a0
 8004524:	080051a0 	.word	0x080051a0
 8004528:	080051a4 	.word	0x080051a4

0800452c <__retarget_lock_acquire_recursive>:
 800452c:	4770      	bx	lr

0800452e <__retarget_lock_release_recursive>:
 800452e:	4770      	bx	lr

08004530 <_free_r>:
 8004530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004532:	2900      	cmp	r1, #0
 8004534:	d044      	beq.n	80045c0 <_free_r+0x90>
 8004536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453a:	9001      	str	r0, [sp, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f1a1 0404 	sub.w	r4, r1, #4
 8004542:	bfb8      	it	lt
 8004544:	18e4      	addlt	r4, r4, r3
 8004546:	f000 f8df 	bl	8004708 <__malloc_lock>
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <_free_r+0x94>)
 800454c:	9801      	ldr	r0, [sp, #4]
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	b933      	cbnz	r3, 8004560 <_free_r+0x30>
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	6014      	str	r4, [r2, #0]
 8004556:	b003      	add	sp, #12
 8004558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800455c:	f000 b8da 	b.w	8004714 <__malloc_unlock>
 8004560:	42a3      	cmp	r3, r4
 8004562:	d908      	bls.n	8004576 <_free_r+0x46>
 8004564:	6825      	ldr	r5, [r4, #0]
 8004566:	1961      	adds	r1, r4, r5
 8004568:	428b      	cmp	r3, r1
 800456a:	bf01      	itttt	eq
 800456c:	6819      	ldreq	r1, [r3, #0]
 800456e:	685b      	ldreq	r3, [r3, #4]
 8004570:	1949      	addeq	r1, r1, r5
 8004572:	6021      	streq	r1, [r4, #0]
 8004574:	e7ed      	b.n	8004552 <_free_r+0x22>
 8004576:	461a      	mov	r2, r3
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	b10b      	cbz	r3, 8004580 <_free_r+0x50>
 800457c:	42a3      	cmp	r3, r4
 800457e:	d9fa      	bls.n	8004576 <_free_r+0x46>
 8004580:	6811      	ldr	r1, [r2, #0]
 8004582:	1855      	adds	r5, r2, r1
 8004584:	42a5      	cmp	r5, r4
 8004586:	d10b      	bne.n	80045a0 <_free_r+0x70>
 8004588:	6824      	ldr	r4, [r4, #0]
 800458a:	4421      	add	r1, r4
 800458c:	1854      	adds	r4, r2, r1
 800458e:	42a3      	cmp	r3, r4
 8004590:	6011      	str	r1, [r2, #0]
 8004592:	d1e0      	bne.n	8004556 <_free_r+0x26>
 8004594:	681c      	ldr	r4, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	6053      	str	r3, [r2, #4]
 800459a:	440c      	add	r4, r1
 800459c:	6014      	str	r4, [r2, #0]
 800459e:	e7da      	b.n	8004556 <_free_r+0x26>
 80045a0:	d902      	bls.n	80045a8 <_free_r+0x78>
 80045a2:	230c      	movs	r3, #12
 80045a4:	6003      	str	r3, [r0, #0]
 80045a6:	e7d6      	b.n	8004556 <_free_r+0x26>
 80045a8:	6825      	ldr	r5, [r4, #0]
 80045aa:	1961      	adds	r1, r4, r5
 80045ac:	428b      	cmp	r3, r1
 80045ae:	bf04      	itt	eq
 80045b0:	6819      	ldreq	r1, [r3, #0]
 80045b2:	685b      	ldreq	r3, [r3, #4]
 80045b4:	6063      	str	r3, [r4, #4]
 80045b6:	bf04      	itt	eq
 80045b8:	1949      	addeq	r1, r1, r5
 80045ba:	6021      	streq	r1, [r4, #0]
 80045bc:	6054      	str	r4, [r2, #4]
 80045be:	e7ca      	b.n	8004556 <_free_r+0x26>
 80045c0:	b003      	add	sp, #12
 80045c2:	bd30      	pop	{r4, r5, pc}
 80045c4:	20000718 	.word	0x20000718

080045c8 <sbrk_aligned>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4e0e      	ldr	r6, [pc, #56]	; (8004604 <sbrk_aligned+0x3c>)
 80045cc:	460c      	mov	r4, r1
 80045ce:	6831      	ldr	r1, [r6, #0]
 80045d0:	4605      	mov	r5, r0
 80045d2:	b911      	cbnz	r1, 80045da <sbrk_aligned+0x12>
 80045d4:	f000 fc38 	bl	8004e48 <_sbrk_r>
 80045d8:	6030      	str	r0, [r6, #0]
 80045da:	4621      	mov	r1, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 fc33 	bl	8004e48 <_sbrk_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	d00a      	beq.n	80045fc <sbrk_aligned+0x34>
 80045e6:	1cc4      	adds	r4, r0, #3
 80045e8:	f024 0403 	bic.w	r4, r4, #3
 80045ec:	42a0      	cmp	r0, r4
 80045ee:	d007      	beq.n	8004600 <sbrk_aligned+0x38>
 80045f0:	1a21      	subs	r1, r4, r0
 80045f2:	4628      	mov	r0, r5
 80045f4:	f000 fc28 	bl	8004e48 <_sbrk_r>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d101      	bne.n	8004600 <sbrk_aligned+0x38>
 80045fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004600:	4620      	mov	r0, r4
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	2000071c 	.word	0x2000071c

08004608 <_malloc_r>:
 8004608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800460c:	1ccd      	adds	r5, r1, #3
 800460e:	f025 0503 	bic.w	r5, r5, #3
 8004612:	3508      	adds	r5, #8
 8004614:	2d0c      	cmp	r5, #12
 8004616:	bf38      	it	cc
 8004618:	250c      	movcc	r5, #12
 800461a:	2d00      	cmp	r5, #0
 800461c:	4607      	mov	r7, r0
 800461e:	db01      	blt.n	8004624 <_malloc_r+0x1c>
 8004620:	42a9      	cmp	r1, r5
 8004622:	d905      	bls.n	8004630 <_malloc_r+0x28>
 8004624:	230c      	movs	r3, #12
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	2600      	movs	r6, #0
 800462a:	4630      	mov	r0, r6
 800462c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004630:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004704 <_malloc_r+0xfc>
 8004634:	f000 f868 	bl	8004708 <__malloc_lock>
 8004638:	f8d8 3000 	ldr.w	r3, [r8]
 800463c:	461c      	mov	r4, r3
 800463e:	bb5c      	cbnz	r4, 8004698 <_malloc_r+0x90>
 8004640:	4629      	mov	r1, r5
 8004642:	4638      	mov	r0, r7
 8004644:	f7ff ffc0 	bl	80045c8 <sbrk_aligned>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	4604      	mov	r4, r0
 800464c:	d155      	bne.n	80046fa <_malloc_r+0xf2>
 800464e:	f8d8 4000 	ldr.w	r4, [r8]
 8004652:	4626      	mov	r6, r4
 8004654:	2e00      	cmp	r6, #0
 8004656:	d145      	bne.n	80046e4 <_malloc_r+0xdc>
 8004658:	2c00      	cmp	r4, #0
 800465a:	d048      	beq.n	80046ee <_malloc_r+0xe6>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	4631      	mov	r1, r6
 8004660:	4638      	mov	r0, r7
 8004662:	eb04 0903 	add.w	r9, r4, r3
 8004666:	f000 fbef 	bl	8004e48 <_sbrk_r>
 800466a:	4581      	cmp	r9, r0
 800466c:	d13f      	bne.n	80046ee <_malloc_r+0xe6>
 800466e:	6821      	ldr	r1, [r4, #0]
 8004670:	1a6d      	subs	r5, r5, r1
 8004672:	4629      	mov	r1, r5
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ffa7 	bl	80045c8 <sbrk_aligned>
 800467a:	3001      	adds	r0, #1
 800467c:	d037      	beq.n	80046ee <_malloc_r+0xe6>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	442b      	add	r3, r5
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	f8d8 3000 	ldr.w	r3, [r8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d038      	beq.n	80046fe <_malloc_r+0xf6>
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	42a2      	cmp	r2, r4
 8004690:	d12b      	bne.n	80046ea <_malloc_r+0xe2>
 8004692:	2200      	movs	r2, #0
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	e00f      	b.n	80046b8 <_malloc_r+0xb0>
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	1b52      	subs	r2, r2, r5
 800469c:	d41f      	bmi.n	80046de <_malloc_r+0xd6>
 800469e:	2a0b      	cmp	r2, #11
 80046a0:	d917      	bls.n	80046d2 <_malloc_r+0xca>
 80046a2:	1961      	adds	r1, r4, r5
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	6025      	str	r5, [r4, #0]
 80046a8:	bf18      	it	ne
 80046aa:	6059      	strne	r1, [r3, #4]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	bf08      	it	eq
 80046b0:	f8c8 1000 	streq.w	r1, [r8]
 80046b4:	5162      	str	r2, [r4, r5]
 80046b6:	604b      	str	r3, [r1, #4]
 80046b8:	4638      	mov	r0, r7
 80046ba:	f104 060b 	add.w	r6, r4, #11
 80046be:	f000 f829 	bl	8004714 <__malloc_unlock>
 80046c2:	f026 0607 	bic.w	r6, r6, #7
 80046c6:	1d23      	adds	r3, r4, #4
 80046c8:	1af2      	subs	r2, r6, r3
 80046ca:	d0ae      	beq.n	800462a <_malloc_r+0x22>
 80046cc:	1b9b      	subs	r3, r3, r6
 80046ce:	50a3      	str	r3, [r4, r2]
 80046d0:	e7ab      	b.n	800462a <_malloc_r+0x22>
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	6862      	ldr	r2, [r4, #4]
 80046d6:	d1dd      	bne.n	8004694 <_malloc_r+0x8c>
 80046d8:	f8c8 2000 	str.w	r2, [r8]
 80046dc:	e7ec      	b.n	80046b8 <_malloc_r+0xb0>
 80046de:	4623      	mov	r3, r4
 80046e0:	6864      	ldr	r4, [r4, #4]
 80046e2:	e7ac      	b.n	800463e <_malloc_r+0x36>
 80046e4:	4634      	mov	r4, r6
 80046e6:	6876      	ldr	r6, [r6, #4]
 80046e8:	e7b4      	b.n	8004654 <_malloc_r+0x4c>
 80046ea:	4613      	mov	r3, r2
 80046ec:	e7cc      	b.n	8004688 <_malloc_r+0x80>
 80046ee:	230c      	movs	r3, #12
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	4638      	mov	r0, r7
 80046f4:	f000 f80e 	bl	8004714 <__malloc_unlock>
 80046f8:	e797      	b.n	800462a <_malloc_r+0x22>
 80046fa:	6025      	str	r5, [r4, #0]
 80046fc:	e7dc      	b.n	80046b8 <_malloc_r+0xb0>
 80046fe:	605b      	str	r3, [r3, #4]
 8004700:	deff      	udf	#255	; 0xff
 8004702:	bf00      	nop
 8004704:	20000718 	.word	0x20000718

08004708 <__malloc_lock>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__malloc_lock+0x8>)
 800470a:	f7ff bf0f 	b.w	800452c <__retarget_lock_acquire_recursive>
 800470e:	bf00      	nop
 8004710:	20000714 	.word	0x20000714

08004714 <__malloc_unlock>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__malloc_unlock+0x8>)
 8004716:	f7ff bf0a 	b.w	800452e <__retarget_lock_release_recursive>
 800471a:	bf00      	nop
 800471c:	20000714 	.word	0x20000714

08004720 <_sungetc_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	1c4b      	adds	r3, r1, #1
 8004724:	4614      	mov	r4, r2
 8004726:	d103      	bne.n	8004730 <_sungetc_r+0x10>
 8004728:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800472c:	4628      	mov	r0, r5
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	8993      	ldrh	r3, [r2, #12]
 8004732:	f023 0320 	bic.w	r3, r3, #32
 8004736:	8193      	strh	r3, [r2, #12]
 8004738:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800473a:	6852      	ldr	r2, [r2, #4]
 800473c:	b2cd      	uxtb	r5, r1
 800473e:	b18b      	cbz	r3, 8004764 <_sungetc_r+0x44>
 8004740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004742:	4293      	cmp	r3, r2
 8004744:	dd08      	ble.n	8004758 <_sungetc_r+0x38>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	1e5a      	subs	r2, r3, #1
 800474a:	6022      	str	r2, [r4, #0]
 800474c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004750:	6863      	ldr	r3, [r4, #4]
 8004752:	3301      	adds	r3, #1
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	e7e9      	b.n	800472c <_sungetc_r+0xc>
 8004758:	4621      	mov	r1, r4
 800475a:	f000 fb3a 	bl	8004dd2 <__submore>
 800475e:	2800      	cmp	r0, #0
 8004760:	d0f1      	beq.n	8004746 <_sungetc_r+0x26>
 8004762:	e7e1      	b.n	8004728 <_sungetc_r+0x8>
 8004764:	6921      	ldr	r1, [r4, #16]
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	b151      	cbz	r1, 8004780 <_sungetc_r+0x60>
 800476a:	4299      	cmp	r1, r3
 800476c:	d208      	bcs.n	8004780 <_sungetc_r+0x60>
 800476e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004772:	42a9      	cmp	r1, r5
 8004774:	d104      	bne.n	8004780 <_sungetc_r+0x60>
 8004776:	3b01      	subs	r3, #1
 8004778:	3201      	adds	r2, #1
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	6062      	str	r2, [r4, #4]
 800477e:	e7d5      	b.n	800472c <_sungetc_r+0xc>
 8004780:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004788:	6363      	str	r3, [r4, #52]	; 0x34
 800478a:	2303      	movs	r3, #3
 800478c:	63a3      	str	r3, [r4, #56]	; 0x38
 800478e:	4623      	mov	r3, r4
 8004790:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	2301      	movs	r3, #1
 8004798:	e7dc      	b.n	8004754 <_sungetc_r+0x34>

0800479a <__ssrefill_r>:
 800479a:	b510      	push	{r4, lr}
 800479c:	460c      	mov	r4, r1
 800479e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80047a0:	b169      	cbz	r1, 80047be <__ssrefill_r+0x24>
 80047a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047a6:	4299      	cmp	r1, r3
 80047a8:	d001      	beq.n	80047ae <__ssrefill_r+0x14>
 80047aa:	f7ff fec1 	bl	8004530 <_free_r>
 80047ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	2000      	movs	r0, #0
 80047b4:	6360      	str	r0, [r4, #52]	; 0x34
 80047b6:	b113      	cbz	r3, 80047be <__ssrefill_r+0x24>
 80047b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	bd10      	pop	{r4, pc}
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	6063      	str	r3, [r4, #4]
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f043 0320 	orr.w	r3, r3, #32
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d2:	e7f3      	b.n	80047bc <__ssrefill_r+0x22>

080047d4 <__ssvfiscanf_r>:
 80047d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d8:	460c      	mov	r4, r1
 80047da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80047de:	2100      	movs	r1, #0
 80047e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80047e4:	49a6      	ldr	r1, [pc, #664]	; (8004a80 <__ssvfiscanf_r+0x2ac>)
 80047e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80047e8:	f10d 0804 	add.w	r8, sp, #4
 80047ec:	49a5      	ldr	r1, [pc, #660]	; (8004a84 <__ssvfiscanf_r+0x2b0>)
 80047ee:	4fa6      	ldr	r7, [pc, #664]	; (8004a88 <__ssvfiscanf_r+0x2b4>)
 80047f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004a8c <__ssvfiscanf_r+0x2b8>
 80047f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80047f8:	4606      	mov	r6, r0
 80047fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	7813      	ldrb	r3, [r2, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 815a 	beq.w	8004aba <__ssvfiscanf_r+0x2e6>
 8004806:	5cf9      	ldrb	r1, [r7, r3]
 8004808:	f011 0108 	ands.w	r1, r1, #8
 800480c:	f102 0501 	add.w	r5, r2, #1
 8004810:	d019      	beq.n	8004846 <__ssvfiscanf_r+0x72>
 8004812:	6863      	ldr	r3, [r4, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	dd0f      	ble.n	8004838 <__ssvfiscanf_r+0x64>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	5cba      	ldrb	r2, [r7, r2]
 800481e:	0712      	lsls	r2, r2, #28
 8004820:	d401      	bmi.n	8004826 <__ssvfiscanf_r+0x52>
 8004822:	462a      	mov	r2, r5
 8004824:	e7eb      	b.n	80047fe <__ssvfiscanf_r+0x2a>
 8004826:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004828:	3201      	adds	r2, #1
 800482a:	9245      	str	r2, [sp, #276]	; 0x114
 800482c:	6862      	ldr	r2, [r4, #4]
 800482e:	3301      	adds	r3, #1
 8004830:	3a01      	subs	r2, #1
 8004832:	6062      	str	r2, [r4, #4]
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	e7ec      	b.n	8004812 <__ssvfiscanf_r+0x3e>
 8004838:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800483a:	4621      	mov	r1, r4
 800483c:	4630      	mov	r0, r6
 800483e:	4798      	blx	r3
 8004840:	2800      	cmp	r0, #0
 8004842:	d0e9      	beq.n	8004818 <__ssvfiscanf_r+0x44>
 8004844:	e7ed      	b.n	8004822 <__ssvfiscanf_r+0x4e>
 8004846:	2b25      	cmp	r3, #37	; 0x25
 8004848:	d012      	beq.n	8004870 <__ssvfiscanf_r+0x9c>
 800484a:	469a      	mov	sl, r3
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f340 8091 	ble.w	8004976 <__ssvfiscanf_r+0x1a2>
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	7813      	ldrb	r3, [r2, #0]
 8004858:	4553      	cmp	r3, sl
 800485a:	f040 812e 	bne.w	8004aba <__ssvfiscanf_r+0x2e6>
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	3b01      	subs	r3, #1
 8004862:	6063      	str	r3, [r4, #4]
 8004864:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004866:	3201      	adds	r2, #1
 8004868:	3301      	adds	r3, #1
 800486a:	6022      	str	r2, [r4, #0]
 800486c:	9345      	str	r3, [sp, #276]	; 0x114
 800486e:	e7d8      	b.n	8004822 <__ssvfiscanf_r+0x4e>
 8004870:	9141      	str	r1, [sp, #260]	; 0x104
 8004872:	9143      	str	r1, [sp, #268]	; 0x10c
 8004874:	7853      	ldrb	r3, [r2, #1]
 8004876:	2b2a      	cmp	r3, #42	; 0x2a
 8004878:	bf02      	ittt	eq
 800487a:	2310      	moveq	r3, #16
 800487c:	1c95      	addeq	r5, r2, #2
 800487e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004880:	220a      	movs	r2, #10
 8004882:	46aa      	mov	sl, r5
 8004884:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004888:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800488c:	2b09      	cmp	r3, #9
 800488e:	d91c      	bls.n	80048ca <__ssvfiscanf_r+0xf6>
 8004890:	487e      	ldr	r0, [pc, #504]	; (8004a8c <__ssvfiscanf_r+0x2b8>)
 8004892:	2203      	movs	r2, #3
 8004894:	f7fb fcb4 	bl	8000200 <memchr>
 8004898:	b138      	cbz	r0, 80048aa <__ssvfiscanf_r+0xd6>
 800489a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800489c:	eba0 0009 	sub.w	r0, r0, r9
 80048a0:	2301      	movs	r3, #1
 80048a2:	4083      	lsls	r3, r0
 80048a4:	4313      	orrs	r3, r2
 80048a6:	9341      	str	r3, [sp, #260]	; 0x104
 80048a8:	4655      	mov	r5, sl
 80048aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048ae:	2b78      	cmp	r3, #120	; 0x78
 80048b0:	d806      	bhi.n	80048c0 <__ssvfiscanf_r+0xec>
 80048b2:	2b57      	cmp	r3, #87	; 0x57
 80048b4:	d810      	bhi.n	80048d8 <__ssvfiscanf_r+0x104>
 80048b6:	2b25      	cmp	r3, #37	; 0x25
 80048b8:	d0c7      	beq.n	800484a <__ssvfiscanf_r+0x76>
 80048ba:	d857      	bhi.n	800496c <__ssvfiscanf_r+0x198>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d065      	beq.n	800498c <__ssvfiscanf_r+0x1b8>
 80048c0:	2303      	movs	r3, #3
 80048c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80048c4:	230a      	movs	r3, #10
 80048c6:	9342      	str	r3, [sp, #264]	; 0x108
 80048c8:	e076      	b.n	80049b8 <__ssvfiscanf_r+0x1e4>
 80048ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80048cc:	fb02 1103 	mla	r1, r2, r3, r1
 80048d0:	3930      	subs	r1, #48	; 0x30
 80048d2:	9143      	str	r1, [sp, #268]	; 0x10c
 80048d4:	4655      	mov	r5, sl
 80048d6:	e7d4      	b.n	8004882 <__ssvfiscanf_r+0xae>
 80048d8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80048dc:	2a20      	cmp	r2, #32
 80048de:	d8ef      	bhi.n	80048c0 <__ssvfiscanf_r+0xec>
 80048e0:	a101      	add	r1, pc, #4	; (adr r1, 80048e8 <__ssvfiscanf_r+0x114>)
 80048e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800499b 	.word	0x0800499b
 80048ec:	080048c1 	.word	0x080048c1
 80048f0:	080048c1 	.word	0x080048c1
 80048f4:	080049f9 	.word	0x080049f9
 80048f8:	080048c1 	.word	0x080048c1
 80048fc:	080048c1 	.word	0x080048c1
 8004900:	080048c1 	.word	0x080048c1
 8004904:	080048c1 	.word	0x080048c1
 8004908:	080048c1 	.word	0x080048c1
 800490c:	080048c1 	.word	0x080048c1
 8004910:	080048c1 	.word	0x080048c1
 8004914:	08004a0f 	.word	0x08004a0f
 8004918:	080049f5 	.word	0x080049f5
 800491c:	08004973 	.word	0x08004973
 8004920:	08004973 	.word	0x08004973
 8004924:	08004973 	.word	0x08004973
 8004928:	080048c1 	.word	0x080048c1
 800492c:	080049b1 	.word	0x080049b1
 8004930:	080048c1 	.word	0x080048c1
 8004934:	080048c1 	.word	0x080048c1
 8004938:	080048c1 	.word	0x080048c1
 800493c:	080048c1 	.word	0x080048c1
 8004940:	08004a1f 	.word	0x08004a1f
 8004944:	080049ed 	.word	0x080049ed
 8004948:	08004993 	.word	0x08004993
 800494c:	080048c1 	.word	0x080048c1
 8004950:	080048c1 	.word	0x080048c1
 8004954:	08004a1b 	.word	0x08004a1b
 8004958:	080048c1 	.word	0x080048c1
 800495c:	080049f5 	.word	0x080049f5
 8004960:	080048c1 	.word	0x080048c1
 8004964:	080048c1 	.word	0x080048c1
 8004968:	0800499b 	.word	0x0800499b
 800496c:	3b45      	subs	r3, #69	; 0x45
 800496e:	2b02      	cmp	r3, #2
 8004970:	d8a6      	bhi.n	80048c0 <__ssvfiscanf_r+0xec>
 8004972:	2305      	movs	r3, #5
 8004974:	e01f      	b.n	80049b6 <__ssvfiscanf_r+0x1e2>
 8004976:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004978:	4621      	mov	r1, r4
 800497a:	4630      	mov	r0, r6
 800497c:	4798      	blx	r3
 800497e:	2800      	cmp	r0, #0
 8004980:	f43f af68 	beq.w	8004854 <__ssvfiscanf_r+0x80>
 8004984:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004986:	2800      	cmp	r0, #0
 8004988:	f040 808d 	bne.w	8004aa6 <__ssvfiscanf_r+0x2d2>
 800498c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004990:	e08f      	b.n	8004ab2 <__ssvfiscanf_r+0x2de>
 8004992:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004994:	f042 0220 	orr.w	r2, r2, #32
 8004998:	9241      	str	r2, [sp, #260]	; 0x104
 800499a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	9241      	str	r2, [sp, #260]	; 0x104
 80049a2:	2210      	movs	r2, #16
 80049a4:	2b6f      	cmp	r3, #111	; 0x6f
 80049a6:	9242      	str	r2, [sp, #264]	; 0x108
 80049a8:	bf34      	ite	cc
 80049aa:	2303      	movcc	r3, #3
 80049ac:	2304      	movcs	r3, #4
 80049ae:	e002      	b.n	80049b6 <__ssvfiscanf_r+0x1e2>
 80049b0:	2300      	movs	r3, #0
 80049b2:	9342      	str	r3, [sp, #264]	; 0x108
 80049b4:	2303      	movs	r3, #3
 80049b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dd3d      	ble.n	8004a3a <__ssvfiscanf_r+0x266>
 80049be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049c0:	0659      	lsls	r1, r3, #25
 80049c2:	d404      	bmi.n	80049ce <__ssvfiscanf_r+0x1fa>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	5cba      	ldrb	r2, [r7, r2]
 80049ca:	0712      	lsls	r2, r2, #28
 80049cc:	d43c      	bmi.n	8004a48 <__ssvfiscanf_r+0x274>
 80049ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	dc4b      	bgt.n	8004a6c <__ssvfiscanf_r+0x298>
 80049d4:	466b      	mov	r3, sp
 80049d6:	4622      	mov	r2, r4
 80049d8:	a941      	add	r1, sp, #260	; 0x104
 80049da:	4630      	mov	r0, r6
 80049dc:	f000 f872 	bl	8004ac4 <_scanf_chars>
 80049e0:	2801      	cmp	r0, #1
 80049e2:	d06a      	beq.n	8004aba <__ssvfiscanf_r+0x2e6>
 80049e4:	2802      	cmp	r0, #2
 80049e6:	f47f af1c 	bne.w	8004822 <__ssvfiscanf_r+0x4e>
 80049ea:	e7cb      	b.n	8004984 <__ssvfiscanf_r+0x1b0>
 80049ec:	2308      	movs	r3, #8
 80049ee:	9342      	str	r3, [sp, #264]	; 0x108
 80049f0:	2304      	movs	r3, #4
 80049f2:	e7e0      	b.n	80049b6 <__ssvfiscanf_r+0x1e2>
 80049f4:	220a      	movs	r2, #10
 80049f6:	e7d5      	b.n	80049a4 <__ssvfiscanf_r+0x1d0>
 80049f8:	4629      	mov	r1, r5
 80049fa:	4640      	mov	r0, r8
 80049fc:	f000 f9b0 	bl	8004d60 <__sccl>
 8004a00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a06:	9341      	str	r3, [sp, #260]	; 0x104
 8004a08:	4605      	mov	r5, r0
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7d3      	b.n	80049b6 <__ssvfiscanf_r+0x1e2>
 8004a0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a14:	9341      	str	r3, [sp, #260]	; 0x104
 8004a16:	2300      	movs	r3, #0
 8004a18:	e7cd      	b.n	80049b6 <__ssvfiscanf_r+0x1e2>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e7cb      	b.n	80049b6 <__ssvfiscanf_r+0x1e2>
 8004a1e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004a20:	06c3      	lsls	r3, r0, #27
 8004a22:	f53f aefe 	bmi.w	8004822 <__ssvfiscanf_r+0x4e>
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004a2a:	1d19      	adds	r1, r3, #4
 8004a2c:	9100      	str	r1, [sp, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	07c0      	lsls	r0, r0, #31
 8004a32:	bf4c      	ite	mi
 8004a34:	801a      	strhmi	r2, [r3, #0]
 8004a36:	601a      	strpl	r2, [r3, #0]
 8004a38:	e6f3      	b.n	8004822 <__ssvfiscanf_r+0x4e>
 8004a3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4630      	mov	r0, r6
 8004a40:	4798      	blx	r3
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d0bb      	beq.n	80049be <__ssvfiscanf_r+0x1ea>
 8004a46:	e79d      	b.n	8004984 <__ssvfiscanf_r+0x1b0>
 8004a48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004a4a:	3201      	adds	r2, #1
 8004a4c:	9245      	str	r2, [sp, #276]	; 0x114
 8004a4e:	6862      	ldr	r2, [r4, #4]
 8004a50:	3a01      	subs	r2, #1
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	6062      	str	r2, [r4, #4]
 8004a56:	dd02      	ble.n	8004a5e <__ssvfiscanf_r+0x28a>
 8004a58:	3301      	adds	r3, #1
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	e7b2      	b.n	80049c4 <__ssvfiscanf_r+0x1f0>
 8004a5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a60:	4621      	mov	r1, r4
 8004a62:	4630      	mov	r0, r6
 8004a64:	4798      	blx	r3
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d0ac      	beq.n	80049c4 <__ssvfiscanf_r+0x1f0>
 8004a6a:	e78b      	b.n	8004984 <__ssvfiscanf_r+0x1b0>
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	dc0f      	bgt.n	8004a90 <__ssvfiscanf_r+0x2bc>
 8004a70:	466b      	mov	r3, sp
 8004a72:	4622      	mov	r2, r4
 8004a74:	a941      	add	r1, sp, #260	; 0x104
 8004a76:	4630      	mov	r0, r6
 8004a78:	f000 f87e 	bl	8004b78 <_scanf_i>
 8004a7c:	e7b0      	b.n	80049e0 <__ssvfiscanf_r+0x20c>
 8004a7e:	bf00      	nop
 8004a80:	08004721 	.word	0x08004721
 8004a84:	0800479b 	.word	0x0800479b
 8004a88:	08005079 	.word	0x08005079
 8004a8c:	08005179 	.word	0x08005179
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <__ssvfiscanf_r+0x2ec>)
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f43f aec5 	beq.w	8004822 <__ssvfiscanf_r+0x4e>
 8004a98:	466b      	mov	r3, sp
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	a941      	add	r1, sp, #260	; 0x104
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f3af 8000 	nop.w
 8004aa4:	e79c      	b.n	80049e0 <__ssvfiscanf_r+0x20c>
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004aac:	bf18      	it	ne
 8004aae:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004ab2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aba:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004abc:	e7f9      	b.n	8004ab2 <__ssvfiscanf_r+0x2de>
 8004abe:	bf00      	nop
 8004ac0:	00000000 	.word	0x00000000

08004ac4 <_scanf_chars>:
 8004ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac8:	4615      	mov	r5, r2
 8004aca:	688a      	ldr	r2, [r1, #8]
 8004acc:	4680      	mov	r8, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b932      	cbnz	r2, 8004ae0 <_scanf_chars+0x1c>
 8004ad2:	698a      	ldr	r2, [r1, #24]
 8004ad4:	2a00      	cmp	r2, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2201      	moveq	r2, #1
 8004ada:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8004ade:	608a      	str	r2, [r1, #8]
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004b74 <_scanf_chars+0xb0>
 8004ae6:	06d1      	lsls	r1, r2, #27
 8004ae8:	bf5f      	itttt	pl
 8004aea:	681a      	ldrpl	r2, [r3, #0]
 8004aec:	1d11      	addpl	r1, r2, #4
 8004aee:	6019      	strpl	r1, [r3, #0]
 8004af0:	6816      	ldrpl	r6, [r2, #0]
 8004af2:	2700      	movs	r7, #0
 8004af4:	69a0      	ldr	r0, [r4, #24]
 8004af6:	b188      	cbz	r0, 8004b1c <_scanf_chars+0x58>
 8004af8:	2801      	cmp	r0, #1
 8004afa:	d107      	bne.n	8004b0c <_scanf_chars+0x48>
 8004afc:	682a      	ldr	r2, [r5, #0]
 8004afe:	7811      	ldrb	r1, [r2, #0]
 8004b00:	6962      	ldr	r2, [r4, #20]
 8004b02:	5c52      	ldrb	r2, [r2, r1]
 8004b04:	b952      	cbnz	r2, 8004b1c <_scanf_chars+0x58>
 8004b06:	2f00      	cmp	r7, #0
 8004b08:	d031      	beq.n	8004b6e <_scanf_chars+0xaa>
 8004b0a:	e022      	b.n	8004b52 <_scanf_chars+0x8e>
 8004b0c:	2802      	cmp	r0, #2
 8004b0e:	d120      	bne.n	8004b52 <_scanf_chars+0x8e>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004b18:	071b      	lsls	r3, r3, #28
 8004b1a:	d41a      	bmi.n	8004b52 <_scanf_chars+0x8e>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	06da      	lsls	r2, r3, #27
 8004b20:	bf5e      	ittt	pl
 8004b22:	682b      	ldrpl	r3, [r5, #0]
 8004b24:	781b      	ldrbpl	r3, [r3, #0]
 8004b26:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004b2a:	682a      	ldr	r2, [r5, #0]
 8004b2c:	686b      	ldr	r3, [r5, #4]
 8004b2e:	3201      	adds	r2, #1
 8004b30:	602a      	str	r2, [r5, #0]
 8004b32:	68a2      	ldr	r2, [r4, #8]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	3a01      	subs	r2, #1
 8004b38:	606b      	str	r3, [r5, #4]
 8004b3a:	3701      	adds	r7, #1
 8004b3c:	60a2      	str	r2, [r4, #8]
 8004b3e:	b142      	cbz	r2, 8004b52 <_scanf_chars+0x8e>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	dcd7      	bgt.n	8004af4 <_scanf_chars+0x30>
 8004b44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4798      	blx	r3
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d0d0      	beq.n	8004af4 <_scanf_chars+0x30>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	f013 0310 	ands.w	r3, r3, #16
 8004b58:	d105      	bne.n	8004b66 <_scanf_chars+0xa2>
 8004b5a:	68e2      	ldr	r2, [r4, #12]
 8004b5c:	3201      	adds	r2, #1
 8004b5e:	60e2      	str	r2, [r4, #12]
 8004b60:	69a2      	ldr	r2, [r4, #24]
 8004b62:	b102      	cbz	r2, 8004b66 <_scanf_chars+0xa2>
 8004b64:	7033      	strb	r3, [r6, #0]
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	443b      	add	r3, r7
 8004b6a:	6123      	str	r3, [r4, #16]
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b72:	bf00      	nop
 8004b74:	08005079 	.word	0x08005079

08004b78 <_scanf_i>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	4698      	mov	r8, r3
 8004b7e:	4b74      	ldr	r3, [pc, #464]	; (8004d50 <_scanf_i+0x1d8>)
 8004b80:	460c      	mov	r4, r1
 8004b82:	4682      	mov	sl, r0
 8004b84:	4616      	mov	r6, r2
 8004b86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	ab03      	add	r3, sp, #12
 8004b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b92:	4b70      	ldr	r3, [pc, #448]	; (8004d54 <_scanf_i+0x1dc>)
 8004b94:	69a1      	ldr	r1, [r4, #24]
 8004b96:	4a70      	ldr	r2, [pc, #448]	; (8004d58 <_scanf_i+0x1e0>)
 8004b98:	2903      	cmp	r1, #3
 8004b9a:	bf18      	it	ne
 8004b9c:	461a      	movne	r2, r3
 8004b9e:	68a3      	ldr	r3, [r4, #8]
 8004ba0:	9201      	str	r2, [sp, #4]
 8004ba2:	1e5a      	subs	r2, r3, #1
 8004ba4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ba8:	bf88      	it	hi
 8004baa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004bae:	4627      	mov	r7, r4
 8004bb0:	bf82      	ittt	hi
 8004bb2:	eb03 0905 	addhi.w	r9, r3, r5
 8004bb6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bba:	60a3      	strhi	r3, [r4, #8]
 8004bbc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004bc0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004bc4:	bf98      	it	ls
 8004bc6:	f04f 0900 	movls.w	r9, #0
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	463d      	mov	r5, r7
 8004bce:	f04f 0b00 	mov.w	fp, #0
 8004bd2:	6831      	ldr	r1, [r6, #0]
 8004bd4:	ab03      	add	r3, sp, #12
 8004bd6:	7809      	ldrb	r1, [r1, #0]
 8004bd8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f7fb fb0f 	bl	8000200 <memchr>
 8004be2:	b328      	cbz	r0, 8004c30 <_scanf_i+0xb8>
 8004be4:	f1bb 0f01 	cmp.w	fp, #1
 8004be8:	d159      	bne.n	8004c9e <_scanf_i+0x126>
 8004bea:	6862      	ldr	r2, [r4, #4]
 8004bec:	b92a      	cbnz	r2, 8004bfa <_scanf_i+0x82>
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	6022      	str	r2, [r4, #0]
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004c00:	6022      	str	r2, [r4, #0]
 8004c02:	68a2      	ldr	r2, [r4, #8]
 8004c04:	1e51      	subs	r1, r2, #1
 8004c06:	60a1      	str	r1, [r4, #8]
 8004c08:	b192      	cbz	r2, 8004c30 <_scanf_i+0xb8>
 8004c0a:	6832      	ldr	r2, [r6, #0]
 8004c0c:	1c51      	adds	r1, r2, #1
 8004c0e:	6031      	str	r1, [r6, #0]
 8004c10:	7812      	ldrb	r2, [r2, #0]
 8004c12:	f805 2b01 	strb.w	r2, [r5], #1
 8004c16:	6872      	ldr	r2, [r6, #4]
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	6072      	str	r2, [r6, #4]
 8004c1e:	dc07      	bgt.n	8004c30 <_scanf_i+0xb8>
 8004c20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004c24:	4631      	mov	r1, r6
 8004c26:	4650      	mov	r0, sl
 8004c28:	4790      	blx	r2
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f040 8085 	bne.w	8004d3a <_scanf_i+0x1c2>
 8004c30:	f10b 0b01 	add.w	fp, fp, #1
 8004c34:	f1bb 0f03 	cmp.w	fp, #3
 8004c38:	d1cb      	bne.n	8004bd2 <_scanf_i+0x5a>
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	b90b      	cbnz	r3, 8004c42 <_scanf_i+0xca>
 8004c3e:	230a      	movs	r3, #10
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	6863      	ldr	r3, [r4, #4]
 8004c44:	4945      	ldr	r1, [pc, #276]	; (8004d5c <_scanf_i+0x1e4>)
 8004c46:	6960      	ldr	r0, [r4, #20]
 8004c48:	1ac9      	subs	r1, r1, r3
 8004c4a:	f000 f889 	bl	8004d60 <__sccl>
 8004c4e:	f04f 0b00 	mov.w	fp, #0
 8004c52:	68a3      	ldr	r3, [r4, #8]
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d03d      	beq.n	8004cd6 <_scanf_i+0x15e>
 8004c5a:	6831      	ldr	r1, [r6, #0]
 8004c5c:	6960      	ldr	r0, [r4, #20]
 8004c5e:	f891 c000 	ldrb.w	ip, [r1]
 8004c62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d035      	beq.n	8004cd6 <_scanf_i+0x15e>
 8004c6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004c6e:	d124      	bne.n	8004cba <_scanf_i+0x142>
 8004c70:	0510      	lsls	r0, r2, #20
 8004c72:	d522      	bpl.n	8004cba <_scanf_i+0x142>
 8004c74:	f10b 0b01 	add.w	fp, fp, #1
 8004c78:	f1b9 0f00 	cmp.w	r9, #0
 8004c7c:	d003      	beq.n	8004c86 <_scanf_i+0x10e>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	6873      	ldr	r3, [r6, #4]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	6073      	str	r3, [r6, #4]
 8004c8e:	dd1b      	ble.n	8004cc8 <_scanf_i+0x150>
 8004c90:	6833      	ldr	r3, [r6, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	60a3      	str	r3, [r4, #8]
 8004c9c:	e7d9      	b.n	8004c52 <_scanf_i+0xda>
 8004c9e:	f1bb 0f02 	cmp.w	fp, #2
 8004ca2:	d1ae      	bne.n	8004c02 <_scanf_i+0x8a>
 8004ca4:	6822      	ldr	r2, [r4, #0]
 8004ca6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004caa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004cae:	d1bf      	bne.n	8004c30 <_scanf_i+0xb8>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	6063      	str	r3, [r4, #4]
 8004cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb8:	e7a2      	b.n	8004c00 <_scanf_i+0x88>
 8004cba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004cbe:	6022      	str	r2, [r4, #0]
 8004cc0:	780b      	ldrb	r3, [r1, #0]
 8004cc2:	f805 3b01 	strb.w	r3, [r5], #1
 8004cc6:	e7de      	b.n	8004c86 <_scanf_i+0x10e>
 8004cc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4650      	mov	r0, sl
 8004cd0:	4798      	blx	r3
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0df      	beq.n	8004c96 <_scanf_i+0x11e>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	05d9      	lsls	r1, r3, #23
 8004cda:	d50d      	bpl.n	8004cf8 <_scanf_i+0x180>
 8004cdc:	42bd      	cmp	r5, r7
 8004cde:	d909      	bls.n	8004cf4 <_scanf_i+0x17c>
 8004ce0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004ce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4650      	mov	r0, sl
 8004cec:	4798      	blx	r3
 8004cee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004cf2:	464d      	mov	r5, r9
 8004cf4:	42bd      	cmp	r5, r7
 8004cf6:	d028      	beq.n	8004d4a <_scanf_i+0x1d2>
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	f012 0210 	ands.w	r2, r2, #16
 8004cfe:	d113      	bne.n	8004d28 <_scanf_i+0x1b0>
 8004d00:	702a      	strb	r2, [r5, #0]
 8004d02:	6863      	ldr	r3, [r4, #4]
 8004d04:	9e01      	ldr	r6, [sp, #4]
 8004d06:	4639      	mov	r1, r7
 8004d08:	4650      	mov	r0, sl
 8004d0a:	47b0      	blx	r6
 8004d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d10:	6821      	ldr	r1, [r4, #0]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	f8c8 2000 	str.w	r2, [r8]
 8004d18:	f011 0f20 	tst.w	r1, #32
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	d00f      	beq.n	8004d40 <_scanf_i+0x1c8>
 8004d20:	6018      	str	r0, [r3, #0]
 8004d22:	68e3      	ldr	r3, [r4, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60e3      	str	r3, [r4, #12]
 8004d28:	6923      	ldr	r3, [r4, #16]
 8004d2a:	1bed      	subs	r5, r5, r7
 8004d2c:	445d      	add	r5, fp
 8004d2e:	442b      	add	r3, r5
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	2000      	movs	r0, #0
 8004d34:	b007      	add	sp, #28
 8004d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3a:	f04f 0b00 	mov.w	fp, #0
 8004d3e:	e7ca      	b.n	8004cd6 <_scanf_i+0x15e>
 8004d40:	07ca      	lsls	r2, r1, #31
 8004d42:	bf4c      	ite	mi
 8004d44:	8018      	strhmi	r0, [r3, #0]
 8004d46:	6018      	strpl	r0, [r3, #0]
 8004d48:	e7eb      	b.n	8004d22 <_scanf_i+0x1aa>
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e7f2      	b.n	8004d34 <_scanf_i+0x1bc>
 8004d4e:	bf00      	nop
 8004d50:	08005010 	.word	0x08005010
 8004d54:	08004fc9 	.word	0x08004fc9
 8004d58:	08004455 	.word	0x08004455
 8004d5c:	0800518d 	.word	0x0800518d

08004d60 <__sccl>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	780b      	ldrb	r3, [r1, #0]
 8004d64:	4604      	mov	r4, r0
 8004d66:	2b5e      	cmp	r3, #94	; 0x5e
 8004d68:	bf0b      	itete	eq
 8004d6a:	784b      	ldrbeq	r3, [r1, #1]
 8004d6c:	1c4a      	addne	r2, r1, #1
 8004d6e:	1c8a      	addeq	r2, r1, #2
 8004d70:	2100      	movne	r1, #0
 8004d72:	bf08      	it	eq
 8004d74:	2101      	moveq	r1, #1
 8004d76:	3801      	subs	r0, #1
 8004d78:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004d7c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004d80:	42a8      	cmp	r0, r5
 8004d82:	d1fb      	bne.n	8004d7c <__sccl+0x1c>
 8004d84:	b90b      	cbnz	r3, 8004d8a <__sccl+0x2a>
 8004d86:	1e50      	subs	r0, r2, #1
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	f081 0101 	eor.w	r1, r1, #1
 8004d8e:	54e1      	strb	r1, [r4, r3]
 8004d90:	4610      	mov	r0, r2
 8004d92:	4602      	mov	r2, r0
 8004d94:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004d98:	2d2d      	cmp	r5, #45	; 0x2d
 8004d9a:	d005      	beq.n	8004da8 <__sccl+0x48>
 8004d9c:	2d5d      	cmp	r5, #93	; 0x5d
 8004d9e:	d016      	beq.n	8004dce <__sccl+0x6e>
 8004da0:	2d00      	cmp	r5, #0
 8004da2:	d0f1      	beq.n	8004d88 <__sccl+0x28>
 8004da4:	462b      	mov	r3, r5
 8004da6:	e7f2      	b.n	8004d8e <__sccl+0x2e>
 8004da8:	7846      	ldrb	r6, [r0, #1]
 8004daa:	2e5d      	cmp	r6, #93	; 0x5d
 8004dac:	d0fa      	beq.n	8004da4 <__sccl+0x44>
 8004dae:	42b3      	cmp	r3, r6
 8004db0:	dcf8      	bgt.n	8004da4 <__sccl+0x44>
 8004db2:	3002      	adds	r0, #2
 8004db4:	461a      	mov	r2, r3
 8004db6:	3201      	adds	r2, #1
 8004db8:	4296      	cmp	r6, r2
 8004dba:	54a1      	strb	r1, [r4, r2]
 8004dbc:	dcfb      	bgt.n	8004db6 <__sccl+0x56>
 8004dbe:	1af2      	subs	r2, r6, r3
 8004dc0:	3a01      	subs	r2, #1
 8004dc2:	1c5d      	adds	r5, r3, #1
 8004dc4:	42b3      	cmp	r3, r6
 8004dc6:	bfa8      	it	ge
 8004dc8:	2200      	movge	r2, #0
 8004dca:	18ab      	adds	r3, r5, r2
 8004dcc:	e7e1      	b.n	8004d92 <__sccl+0x32>
 8004dce:	4610      	mov	r0, r2
 8004dd0:	e7da      	b.n	8004d88 <__sccl+0x28>

08004dd2 <__submore>:
 8004dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dde:	4299      	cmp	r1, r3
 8004de0:	d11d      	bne.n	8004e1e <__submore+0x4c>
 8004de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004de6:	f7ff fc0f 	bl	8004608 <_malloc_r>
 8004dea:	b918      	cbnz	r0, 8004df4 <__submore+0x22>
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004dfa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8004e00:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004e04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e08:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004e0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e10:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004e14:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004e18:	6020      	str	r0, [r4, #0]
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e7e8      	b.n	8004df0 <__submore+0x1e>
 8004e1e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004e20:	0077      	lsls	r7, r6, #1
 8004e22:	463a      	mov	r2, r7
 8004e24:	f000 f82e 	bl	8004e84 <_realloc_r>
 8004e28:	4605      	mov	r5, r0
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d0de      	beq.n	8004dec <__submore+0x1a>
 8004e2e:	eb00 0806 	add.w	r8, r0, r6
 8004e32:	4601      	mov	r1, r0
 8004e34:	4632      	mov	r2, r6
 8004e36:	4640      	mov	r0, r8
 8004e38:	f000 f816 	bl	8004e68 <memcpy>
 8004e3c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004e40:	f8c4 8000 	str.w	r8, [r4]
 8004e44:	e7e9      	b.n	8004e1a <__submore+0x48>
	...

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4d06      	ldr	r5, [pc, #24]	; (8004e64 <_sbrk_r+0x1c>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fc f86c 	bl	8000f30 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000710 	.word	0x20000710

08004e68 <memcpy>:
 8004e68:	440a      	add	r2, r1
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e70:	d100      	bne.n	8004e74 <memcpy+0xc>
 8004e72:	4770      	bx	lr
 8004e74:	b510      	push	{r4, lr}
 8004e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7e:	4291      	cmp	r1, r2
 8004e80:	d1f9      	bne.n	8004e76 <memcpy+0xe>
 8004e82:	bd10      	pop	{r4, pc}

08004e84 <_realloc_r>:
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4680      	mov	r8, r0
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	b921      	cbnz	r1, 8004e9a <_realloc_r+0x16>
 8004e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e94:	4611      	mov	r1, r2
 8004e96:	f7ff bbb7 	b.w	8004608 <_malloc_r>
 8004e9a:	b92a      	cbnz	r2, 8004ea8 <_realloc_r+0x24>
 8004e9c:	f7ff fb48 	bl	8004530 <_free_r>
 8004ea0:	4625      	mov	r5, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	f000 f890 	bl	8004fcc <_malloc_usable_size_r>
 8004eac:	4284      	cmp	r4, r0
 8004eae:	4607      	mov	r7, r0
 8004eb0:	d802      	bhi.n	8004eb8 <_realloc_r+0x34>
 8004eb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eb6:	d812      	bhi.n	8004ede <_realloc_r+0x5a>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fba4 	bl	8004608 <_malloc_r>
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d0ed      	beq.n	8004ea2 <_realloc_r+0x1e>
 8004ec6:	42bc      	cmp	r4, r7
 8004ec8:	4622      	mov	r2, r4
 8004eca:	4631      	mov	r1, r6
 8004ecc:	bf28      	it	cs
 8004ece:	463a      	movcs	r2, r7
 8004ed0:	f7ff ffca 	bl	8004e68 <memcpy>
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7ff fb2a 	bl	8004530 <_free_r>
 8004edc:	e7e1      	b.n	8004ea2 <_realloc_r+0x1e>
 8004ede:	4635      	mov	r5, r6
 8004ee0:	e7df      	b.n	8004ea2 <_realloc_r+0x1e>
	...

08004ee4 <_strtoul_l.constprop.0>:
 8004ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	4f36      	ldr	r7, [pc, #216]	; (8004fc4 <_strtoul_l.constprop.0+0xe0>)
 8004eea:	4686      	mov	lr, r0
 8004eec:	460d      	mov	r5, r1
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ef4:	5d3e      	ldrb	r6, [r7, r4]
 8004ef6:	f016 0608 	ands.w	r6, r6, #8
 8004efa:	d1f8      	bne.n	8004eee <_strtoul_l.constprop.0+0xa>
 8004efc:	2c2d      	cmp	r4, #45	; 0x2d
 8004efe:	d130      	bne.n	8004f62 <_strtoul_l.constprop.0+0x7e>
 8004f00:	782c      	ldrb	r4, [r5, #0]
 8004f02:	2601      	movs	r6, #1
 8004f04:	1c85      	adds	r5, r0, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d057      	beq.n	8004fba <_strtoul_l.constprop.0+0xd6>
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d109      	bne.n	8004f22 <_strtoul_l.constprop.0+0x3e>
 8004f0e:	2c30      	cmp	r4, #48	; 0x30
 8004f10:	d107      	bne.n	8004f22 <_strtoul_l.constprop.0+0x3e>
 8004f12:	7828      	ldrb	r0, [r5, #0]
 8004f14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004f18:	2858      	cmp	r0, #88	; 0x58
 8004f1a:	d149      	bne.n	8004fb0 <_strtoul_l.constprop.0+0xcc>
 8004f1c:	786c      	ldrb	r4, [r5, #1]
 8004f1e:	2310      	movs	r3, #16
 8004f20:	3502      	adds	r5, #2
 8004f22:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004f26:	2700      	movs	r7, #0
 8004f28:	fbb8 f8f3 	udiv	r8, r8, r3
 8004f2c:	fb03 f908 	mul.w	r9, r3, r8
 8004f30:	ea6f 0909 	mvn.w	r9, r9
 8004f34:	4638      	mov	r0, r7
 8004f36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004f3a:	f1bc 0f09 	cmp.w	ip, #9
 8004f3e:	d815      	bhi.n	8004f6c <_strtoul_l.constprop.0+0x88>
 8004f40:	4664      	mov	r4, ip
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	dd23      	ble.n	8004f8e <_strtoul_l.constprop.0+0xaa>
 8004f46:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004f4a:	d007      	beq.n	8004f5c <_strtoul_l.constprop.0+0x78>
 8004f4c:	4580      	cmp	r8, r0
 8004f4e:	d31b      	bcc.n	8004f88 <_strtoul_l.constprop.0+0xa4>
 8004f50:	d101      	bne.n	8004f56 <_strtoul_l.constprop.0+0x72>
 8004f52:	45a1      	cmp	r9, r4
 8004f54:	db18      	blt.n	8004f88 <_strtoul_l.constprop.0+0xa4>
 8004f56:	fb00 4003 	mla	r0, r0, r3, r4
 8004f5a:	2701      	movs	r7, #1
 8004f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f60:	e7e9      	b.n	8004f36 <_strtoul_l.constprop.0+0x52>
 8004f62:	2c2b      	cmp	r4, #43	; 0x2b
 8004f64:	bf04      	itt	eq
 8004f66:	782c      	ldrbeq	r4, [r5, #0]
 8004f68:	1c85      	addeq	r5, r0, #2
 8004f6a:	e7cc      	b.n	8004f06 <_strtoul_l.constprop.0+0x22>
 8004f6c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004f70:	f1bc 0f19 	cmp.w	ip, #25
 8004f74:	d801      	bhi.n	8004f7a <_strtoul_l.constprop.0+0x96>
 8004f76:	3c37      	subs	r4, #55	; 0x37
 8004f78:	e7e3      	b.n	8004f42 <_strtoul_l.constprop.0+0x5e>
 8004f7a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004f7e:	f1bc 0f19 	cmp.w	ip, #25
 8004f82:	d804      	bhi.n	8004f8e <_strtoul_l.constprop.0+0xaa>
 8004f84:	3c57      	subs	r4, #87	; 0x57
 8004f86:	e7dc      	b.n	8004f42 <_strtoul_l.constprop.0+0x5e>
 8004f88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f8c:	e7e6      	b.n	8004f5c <_strtoul_l.constprop.0+0x78>
 8004f8e:	1c7b      	adds	r3, r7, #1
 8004f90:	d106      	bne.n	8004fa0 <_strtoul_l.constprop.0+0xbc>
 8004f92:	2322      	movs	r3, #34	; 0x22
 8004f94:	f8ce 3000 	str.w	r3, [lr]
 8004f98:	4638      	mov	r0, r7
 8004f9a:	b932      	cbnz	r2, 8004faa <_strtoul_l.constprop.0+0xc6>
 8004f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fa0:	b106      	cbz	r6, 8004fa4 <_strtoul_l.constprop.0+0xc0>
 8004fa2:	4240      	negs	r0, r0
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d0f9      	beq.n	8004f9c <_strtoul_l.constprop.0+0xb8>
 8004fa8:	b107      	cbz	r7, 8004fac <_strtoul_l.constprop.0+0xc8>
 8004faa:	1e69      	subs	r1, r5, #1
 8004fac:	6011      	str	r1, [r2, #0]
 8004fae:	e7f5      	b.n	8004f9c <_strtoul_l.constprop.0+0xb8>
 8004fb0:	2430      	movs	r4, #48	; 0x30
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1b5      	bne.n	8004f22 <_strtoul_l.constprop.0+0x3e>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	e7b3      	b.n	8004f22 <_strtoul_l.constprop.0+0x3e>
 8004fba:	2c30      	cmp	r4, #48	; 0x30
 8004fbc:	d0a9      	beq.n	8004f12 <_strtoul_l.constprop.0+0x2e>
 8004fbe:	230a      	movs	r3, #10
 8004fc0:	e7af      	b.n	8004f22 <_strtoul_l.constprop.0+0x3e>
 8004fc2:	bf00      	nop
 8004fc4:	08005079 	.word	0x08005079

08004fc8 <_strtoul_r>:
 8004fc8:	f7ff bf8c 	b.w	8004ee4 <_strtoul_l.constprop.0>

08004fcc <_malloc_usable_size_r>:
 8004fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd0:	1f18      	subs	r0, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bfbc      	itt	lt
 8004fd6:	580b      	ldrlt	r3, [r1, r0]
 8004fd8:	18c0      	addlt	r0, r0, r3
 8004fda:	4770      	bx	lr

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
