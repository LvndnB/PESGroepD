
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e24  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004000  08004000  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004008  08004008  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  0800401c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800401c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5bd  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000233a  00000000  00000000  0002f63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00031978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a27  00000000  00000000  00032690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9e3  00000000  00000000  000330b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff33  00000000  00000000  00052a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be5e8  00000000  00000000  000629cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035ac  00000000  00000000  00120fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00124564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003f98 	.word	0x08003f98

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003f98 	.word	0x08003f98

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb37 	bl	8000b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f930 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f8fc 	bl	80006d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004dc:	f000 f8ca 	bl	8000674 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004e0:	f000 f888 	bl	80005f4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, &rx_data, 7);
 80004e4:	2207      	movs	r2, #7
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <main+0x54>)
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <main+0x58>)
 80004ea:	f002 fa5d 	bl	80029a8 <HAL_UART_Receive_IT>
  while (1)
  {
	  if (rx_data_ready) {
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <main+0x5c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d009      	beq.n	800050a <main+0x42>
		  rx_data_ready = 0;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <main+0x5c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &rx_data, 7, HAL_MAX_DELAY);
 80004fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000500:	2207      	movs	r2, #7
 8000502:	4906      	ldr	r1, [pc, #24]	; (800051c <main+0x54>)
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x60>)
 8000506:	f002 f9c5 	bl	8002894 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // Sensor data
	 // TODO: implement sensor data.
	 HAL_UART_Transmit(&huart1, "test", 4, 400);
 800050a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800050e:	2204      	movs	r2, #4
 8000510:	4906      	ldr	r1, [pc, #24]	; (800052c <main+0x64>)
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x58>)
 8000514:	f002 f9be 	bl	8002894 <HAL_UART_Transmit>
	  if (rx_data_ready) {
 8000518:	e7e9      	b.n	80004ee <main+0x26>
 800051a:	bf00      	nop
 800051c:	2000018c 	.word	0x2000018c
 8000520:	2000007c 	.word	0x2000007c
 8000524:	20000198 	.word	0x20000198
 8000528:	20000104 	.word	0x20000104
 800052c:	08003fb0 	.word	0x08003fb0

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fcfd 	bl	8003f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f000 ffc9 	bl	80014ec <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f94a 	bl	80007f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f000 ffa4 	bl	80014b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <SystemClock_Config+0xc0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <SystemClock_Config+0xc0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000590:	2301      	movs	r3, #1
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000598:	2310      	movs	r3, #16
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fff3 	bl	8001598 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b8:	f000 f91e 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fbf3 	bl	8001dc0 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e0:	f000 f90a 	bl	80007f8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e4:	f002 f806 	bl	80025f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_I2C1_Init+0x74>)
 80005fa:	4a1c      	ldr	r2, [pc, #112]	; (800066c <MX_I2C1_Init+0x78>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_I2C1_Init+0x74>)
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <MX_I2C1_Init+0x7c>)
 8000602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_I2C1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_I2C1_Init+0x74>)
 800060c:	2201      	movs	r2, #1
 800060e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_I2C1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <MX_I2C1_Init+0x74>)
 8000630:	f000 fe0c 	bl	800124c <HAL_I2C_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800063a:	f000 f8dd 	bl	80007f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063e:	2100      	movs	r1, #0
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <MX_I2C1_Init+0x74>)
 8000642:	f000 fe9e 	bl	8001382 <HAL_I2CEx_ConfigAnalogFilter>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800064c:	f000 f8d4 	bl	80007f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_I2C1_Init+0x74>)
 8000654:	f000 fee0 	bl	8001418 <HAL_I2CEx_ConfigDigitalFilter>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065e:	f000 f8cb 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028
 800066c:	40005400 	.word	0x40005400
 8000670:	00707cbb 	.word	0x00707cbb

08000674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_USART1_UART_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_USART1_UART_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_USART1_UART_Init+0x58>)
 8000680:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_USART1_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART1_UART_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART1_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART1_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART1_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART1_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART1_UART_Init+0x58>)
 80006b8:	f002 f89e 	bl	80027f8 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f899 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000007c 	.word	0x2000007c
 80006d0:	40013800 	.word	0x40013800

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006da:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_USART2_UART_Init+0x60>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000716:	2300      	movs	r3, #0
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 800071e:	f003 fb9d 	bl	8003e5c <HAL_RS485Ex_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 f866 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000104 	.word	0x20000104
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_GPIO_Init+0x8c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <MX_GPIO_Init+0x8c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_GPIO_Init+0x8c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_GPIO_Init+0x90>)
 800079c:	f000 fd3e 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007a0:	2308      	movs	r3, #8
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0x90>)
 80007b8:	f000 fbc6 	bl	8000f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000400 	.word	0x48000400

080007cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	rx_data_ready = 1;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_UART_RxCpltCallback+0x20>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &rx_data, 7);
 80007da:	2207      	movs	r2, #7
 80007dc:	4904      	ldr	r1, [pc, #16]	; (80007f0 <HAL_UART_RxCpltCallback+0x24>)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <HAL_UART_RxCpltCallback+0x28>)
 80007e0:	f002 f8e2 	bl	80029a8 <HAL_UART_Receive_IT>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000198 	.word	0x20000198
 80007f0:	2000018c 	.word	0x2000018c
 80007f4:	2000007c 	.word	0x2000007c

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x44>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_MspInit+0x44>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6613      	str	r3, [r2, #96]	; 0x60
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x44>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_MspInit+0x44>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_MspInit+0x44>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6593      	str	r3, [r2, #88]	; 0x58
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_MspInit+0x44>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b09e      	sub	sp, #120	; 0x78
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	2254      	movs	r2, #84	; 0x54
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fb66 	bl	8003f3e <memset>
  if(hi2c->Instance==I2C1)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <HAL_I2C_MspInit+0xa4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d135      	bne.n	80008e8 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000880:	2300      	movs	r3, #0
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fcbd 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000894:	f7ff ffb0 	bl	80007f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_I2C_MspInit+0xa8>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <HAL_I2C_MspInit+0xa8>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_I2C_MspInit+0xa8>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008b0:	23c0      	movs	r3, #192	; 0xc0
 80008b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b4:	2312      	movs	r3, #18
 80008b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c0:	2304      	movs	r3, #4
 80008c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <HAL_I2C_MspInit+0xac>)
 80008cc:	f000 fb3c 	bl	8000f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_I2C_MspInit+0xa8>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_I2C_MspInit+0xa8>)
 80008d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008da:	6593      	str	r3, [r2, #88]	; 0x58
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_I2C_MspInit+0xa8>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3778      	adds	r7, #120	; 0x78
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000400 	.word	0x48000400

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0a0      	sub	sp, #128	; 0x80
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	2254      	movs	r2, #84	; 0x54
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f003 fb0e 	bl	8003f3e <memset>
  if(huart->Instance==USART1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a4b      	ldr	r2, [pc, #300]	; (8000a54 <HAL_UART_MspInit+0x158>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d138      	bne.n	800099e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fc65 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000944:	f7ff ff58 	bl	80007f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000948:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 800094a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094c:	4a42      	ldr	r2, [pc, #264]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6613      	str	r3, [r2, #96]	; 0x60
 8000954:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 8000956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	4a3c      	ldr	r2, [pc, #240]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096c:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000978:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800098a:	2307      	movs	r3, #7
 800098c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f000 fad6 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099c:	e055      	b.n	8000a4a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <HAL_UART_MspInit+0x160>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d150      	bne.n	8000a4a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fc27 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80009c0:	f7ff ff1a 	bl	80007f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6593      	str	r3, [r2, #88]	; 0x58
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_UART_MspInit+0x15c>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|VCP_TX_Pin;
 80009f4:	2306      	movs	r3, #6
 80009f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a04:	2307      	movs	r3, #7
 8000a06:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f000 fa99 	bl	8000f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 fa87 	bl	8000f48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2026      	movs	r0, #38	; 0x26
 8000a40:	f000 f9cd 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a44:	2026      	movs	r0, #38	; 0x26
 8000a46:	f000 f9e6 	bl	8000e16 <HAL_NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3780      	adds	r7, #128	; 0x80
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40004400 	.word	0x40004400

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f89c 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <USART2_IRQHandler+0x10>)
 8000aba:	f001 ffc1 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000104 	.word	0x20000104

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff ffea 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	; (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f003 fa19 	bl	8003f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fcd3 	bl	80004c8 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b30:	08004010 	.word	0x08004010
  ldr r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b38:	200001a0 	.word	0x200001a0

08000b3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_IRQHandler>

08000b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f93d 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 f80e 	bl	8000b70 <HAL_InitTick>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	e001      	b.n	8000b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b60:	f7ff fe50 	bl	8000804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d023      	beq.n	8000bcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_InitTick+0x70>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f949 	bl	8000e32 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10f      	bne.n	8000bc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d809      	bhi.n	8000bc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 f913 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_InitTick+0x74>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e007      	b.n	8000bd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e004      	b.n	8000bd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e001      	b.n	8000bd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	2000019c 	.word	0x2000019c

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2000019c 	.word	0x2000019c

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d008      	beq.n	8000e74 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e022      	b.n	8000eba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020e 	bic.w	r2, r2, #14
 8000e82:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f003 021c 	and.w	r2, r3, #28
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d005      	beq.n	8000eea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e029      	b.n	8000f3e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 020e 	bic.w	r2, r2, #14
 8000ef8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0201 	bic.w	r2, r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 021c 	and.w	r2, r3, #28
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	4798      	blx	r3
    }
  }
  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	e148      	b.n	80011ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 813a 	beq.w	80011e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d017      	beq.n	8001026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d123      	bne.n	800107a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	6939      	ldr	r1, [r7, #16]
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0203 	and.w	r2, r3, #3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8094 	beq.w	80011e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b52      	ldr	r3, [pc, #328]	; (8001208 <HAL_GPIO_Init+0x2c0>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_GPIO_Init+0x2c0>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6613      	str	r3, [r2, #96]	; 0x60
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x2c0>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d4:	4a4d      	ldr	r2, [pc, #308]	; (800120c <HAL_GPIO_Init+0x2c4>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010fe:	d00d      	beq.n	800111c <HAL_GPIO_Init+0x1d4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_GPIO_Init+0x2c8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d007      	beq.n	8001118 <HAL_GPIO_Init+0x1d0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a42      	ldr	r2, [pc, #264]	; (8001214 <HAL_GPIO_Init+0x2cc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <HAL_GPIO_Init+0x1cc>
 8001110:	2302      	movs	r3, #2
 8001112:	e004      	b.n	800111e <HAL_GPIO_Init+0x1d6>
 8001114:	2307      	movs	r3, #7
 8001116:	e002      	b.n	800111e <HAL_GPIO_Init+0x1d6>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_GPIO_Init+0x1d6>
 800111c:	2300      	movs	r3, #0
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	f002 0203 	and.w	r2, r2, #3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4093      	lsls	r3, r2
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800112e:	4937      	ldr	r1, [pc, #220]	; (800120c <HAL_GPIO_Init+0x2c4>)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800118a:	4a23      	ldr	r2, [pc, #140]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f aeaf 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000
 800120c:	40010000 	.word	0x40010000
 8001210:	48000400 	.word	0x48000400
 8001214:	48000800 	.word	0x48000800
 8001218:	40010400 	.word	0x40010400

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001238:	e002      	b.n	8001240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e08d      	b.n	800137a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff faea 	bl	800084c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2224      	movs	r2, #36	; 0x24
 800127c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800129c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	e006      	b.n	80012d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d108      	bne.n	80012ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	e007      	b.n	80012fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800130c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69d9      	ldr	r1, [r3, #28]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b20      	cmp	r3, #32
 8001396:	d138      	bne.n	800140a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e032      	b.n	800140c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2224      	movs	r2, #36	; 0x24
 80013b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6819      	ldr	r1, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800140a:	2302      	movs	r3, #2
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b20      	cmp	r3, #32
 800142c:	d139      	bne.n	80014a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001438:	2302      	movs	r3, #2
 800143a:	e033      	b.n	80014a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800146a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2220      	movs	r2, #32
 8001492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014a2:	2302      	movs	r3, #2
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000

080014d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014fa:	d130      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001508:	d038      	beq.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001512:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001518:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2232      	movs	r2, #50	; 0x32
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001530:	e002      	b.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3b01      	subs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d102      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f2      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001558:	d110      	bne.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e00f      	b.n	800157e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156a:	d007      	beq.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000
 8001590:	20000000 	.word	0x20000000
 8001594:	431bde83 	.word	0x431bde83

08001598 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f000 bc02 	b.w	8001db0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ac:	4b96      	ldr	r3, [pc, #600]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b6:	4b94      	ldr	r3, [pc, #592]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80e4 	beq.w	8001796 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4c>
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	f040 808b 	bne.w	80016f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	f040 8087 	bne.w	80016f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x64>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e3d9      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_RCC_OscConfig+0x7e>
 800160c:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001614:	e005      	b.n	8001622 <HAL_RCC_OscConfig+0x8a>
 8001616:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001622:	4293      	cmp	r3, r2
 8001624:	d223      	bcs.n	800166e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fd8c 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e3ba      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a72      	ldr	r2, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b70      	ldr	r3, [pc, #448]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	496d      	ldr	r1, [pc, #436]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	4968      	ldr	r1, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e025      	b.n	80016ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166e:	4b66      	ldr	r3, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a65      	ldr	r2, [pc, #404]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4960      	ldr	r1, [pc, #384]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	495b      	ldr	r1, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fd4c 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e37a      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ba:	f000 fc81 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	4950      	ldr	r1, [pc, #320]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016cc:	5ccb      	ldrb	r3, [r1, r3]
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 80016d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016da:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fa46 	bl	8000b70 <HAL_InitTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d052      	beq.n	8001794 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	e35e      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d032      	beq.n	8001760 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a42      	ldr	r2, [pc, #264]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001706:	f7ff fa83 	bl	8000c10 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170e:	f7ff fa7f 	bl	8000c10 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e347      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4930      	ldr	r1, [pc, #192]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
 800175e:	e01a      	b.n	8001796 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176c:	f7ff fa50 	bl	8000c10 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001774:	f7ff fa4c 	bl	8000c10 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e314      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1dc>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d073      	beq.n	800188a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x21c>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d10e      	bne.n	80017cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d10b      	bne.n	80017cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d063      	beq.n	8001888 <HAL_RCC_OscConfig+0x2f0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d15f      	bne.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e2f1      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_OscConfig+0x24c>
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e025      	b.n	8001830 <HAL_RCC_OscConfig+0x298>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d114      	bne.n	8001818 <HAL_RCC_OscConfig+0x280>
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a02      	ldr	r2, [pc, #8]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e013      	b.n	8001830 <HAL_RCC_OscConfig+0x298>
 8001808:	40021000 	.word	0x40021000
 800180c:	08003fb8 	.word	0x08003fb8
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004
 8001818:	4ba0      	ldr	r3, [pc, #640]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a9f      	ldr	r2, [pc, #636]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b9d      	ldr	r3, [pc, #628]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a9c      	ldr	r2, [pc, #624]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f9ea 	bl	8000c10 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff f9e6 	bl	8000c10 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e2ae      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001852:	4b92      	ldr	r3, [pc, #584]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x2a8>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f9d6 	bl	8000c10 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff f9d2 	bl	8000c10 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e29a      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187a:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x2d0>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d060      	beq.n	8001958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x310>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d119      	bne.n	80018d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d116      	bne.n	80018d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a8:	4b7c      	ldr	r3, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x328>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e277      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	4973      	ldr	r1, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	e040      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d023      	beq.n	8001926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff f991 	bl	8000c10 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff f98d 	bl	8000c10 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e255      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001904:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b62      	ldr	r3, [pc, #392]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	495f      	ldr	r1, [pc, #380]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e018      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001926:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5c      	ldr	r2, [pc, #368]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800192c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff f96d 	bl	8000c10 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff f969 	bl	8000c10 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e231      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196c:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001972:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f948 	bl	8000c10 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff f944 	bl	8000c10 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e20c      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x3ec>
 80019a4:	e01b      	b.n	80019de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f92b 	bl	8000c10 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff f927 	bl	8000c10 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1ef      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80a6 	beq.w	8001b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10d      	bne.n	8001a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a06:	6593      	str	r3, [r2, #88]	; 0x58
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a14:	2301      	movs	r3, #1
 8001a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d118      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a30:	f7ff f8ee 	bl	8000c10 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a38:	f7ff f8ea 	bl	8000c10 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1b2      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4d8>
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6e:	e029      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d115      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x50c>
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	4b9a      	ldr	r3, [pc, #616]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a99      	ldr	r2, [pc, #612]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab4:	4b96      	ldr	r3, [pc, #600]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a95      	ldr	r2, [pc, #596]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d016      	beq.n	8001afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff f8a0 	bl	8000c10 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f89c 	bl	8000c10 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e162      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ed      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x53c>
 8001af8:	e015      	b.n	8001b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f889 	bl	8000c10 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f885 	bl	8000c10 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e14b      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ed      	bne.n	8001b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b26:	7ffb      	ldrb	r3, [r7, #31]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	4a77      	ldr	r2, [pc, #476]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d03c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b4c:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b52:	4a6f      	ldr	r2, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f858 	bl	8000c10 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b64:	f7ff f854 	bl	8000c10 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e11c      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ef      	beq.n	8001b64 <HAL_RCC_OscConfig+0x5cc>
 8001b84:	e01b      	b.n	8001bbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b86:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b8c:	4a60      	ldr	r2, [pc, #384]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff f83b 	bl	8000c10 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b9e:	f7ff f837 	bl	8000c10 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0ff      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb0:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80f3 	beq.w	8001dae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	f040 80c9 	bne.w	8001d64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bd2:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0203 	and.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d12c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d123      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d11b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d113      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	3b01      	subs	r3, #1
 8001c26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d06b      	beq.n	8001d18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d062      	beq.n	8001d0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0ac      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c62:	f7fe ffd5 	bl	8000c10 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe ffd1 	bl	8000c10 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e099      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_RCC_OscConfig+0x77c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ca2:	0212      	lsls	r2, r2, #8
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001caa:	0852      	lsrs	r2, r2, #1
 8001cac:	3a01      	subs	r2, #1
 8001cae:	0552      	lsls	r2, r2, #21
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cb6:	0852      	lsrs	r2, r2, #1
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	0652      	lsls	r2, r2, #25
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cc2:	06d2      	lsls	r2, r2, #27
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	4912      	ldr	r1, [pc, #72]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ce4:	f7fe ff94 	bl	8000c10 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ff90 	bl	8000c10 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e058      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0a:	e050      	b.n	8001dae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e04f      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d144      	bne.n	8001dae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d3c:	f7fe ff68 	bl	8000c10 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7fe ff64 	bl	8000c10 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e02c      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x7ac>
 8001d62:	e024      	b.n	8001dae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d01f      	beq.n	8001daa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7fe ff4b 	bl	8000c10 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7fe ff47 	bl	8000c10 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4905      	ldr	r1, [pc, #20]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_OscConfig+0x824>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
 8001da8:	e001      	b.n	8001dae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	feeefffc 	.word	0xfeeefffc

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0e7      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b75      	ldr	r3, [pc, #468]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	4970      	ldr	r1, [pc, #448]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cf      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d908      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4960      	ldr	r1, [pc, #384]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d04c      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d121      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0a6      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e09a      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e76:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e086      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4943      	ldr	r1, [pc, #268]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7fe feb2 	bl	8000c10 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7fe feae 	bl	8000c10 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e06e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d208      	bcs.n	8001f06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	492b      	ldr	r1, [pc, #172]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d210      	bcs.n	8001f36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4923      	ldr	r1, [pc, #140]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e036      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4910      	ldr	r1, [pc, #64]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f74:	f000 f824 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	490b      	ldr	r1, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1fc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fde9 	bl	8000b70 <HAL_InitTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08003fb8 	.word	0x08003fb8
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d121      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d11e      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e005      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e004      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d101      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d134      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0xa6>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xac>
 8002064:	e005      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	e005      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800206e:	617b      	str	r3, [r7, #20]
      break;
 8002070:	e002      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	fb03 f202 	mul.w	r2, r3, r2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0e5b      	lsrs	r3, r3, #25
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	3301      	adds	r3, #1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020b8:	69bb      	ldr	r3, [r7, #24]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08003fd0 	.word	0x08003fd0
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4904      	ldr	r1, [pc, #16]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08003fc8 	.word	0x08003fc8

0800211c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002120:	f7ff ffda 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0adb      	lsrs	r3, r3, #11
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08003fc8 	.word	0x08003fc8

08002148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002160:	f7ff f9b6 	bl	80014d0 <HAL_PWREx_GetVoltageRange>
 8002164:	6178      	str	r0, [r7, #20]
 8002166:	e014      	b.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	4a24      	ldr	r2, [pc, #144]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002180:	f7ff f9a6 	bl	80014d0 <HAL_PWREx_GetVoltageRange>
 8002184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002198:	d10b      	bne.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d919      	bls.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2ba0      	cmp	r3, #160	; 0xa0
 80021a4:	d902      	bls.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a6:	2302      	movs	r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e013      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ac:	2301      	movs	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e010      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d902      	bls.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e00a      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d102      	bne.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e004      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b70      	cmp	r3, #112	; 0x70
 80021ce:	d101      	bne.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	4909      	ldr	r1, [pc, #36]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002210:	2300      	movs	r3, #0
 8002212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002214:	2300      	movs	r3, #0
 8002216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002220:	2b00      	cmp	r3, #0
 8002222:	d031      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800222c:	d01a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800222e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002232:	d814      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800223c:	d10f      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a5c      	ldr	r2, [pc, #368]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224a:	e00c      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f9de 	bl	8002614 <RCCEx_PLLSAI1_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800225c:	e003      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	74fb      	strb	r3, [r7, #19]
      break;
 8002262:	e000      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800226c:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	494e      	ldr	r1, [pc, #312]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002282:	e001      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 809e 	beq.w	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	4a3f      	ldr	r2, [pc, #252]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6593      	str	r3, [r2, #88]	; 0x58
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fc9a 	bl	8000c10 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022de:	e009      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7fe fc96 	bl	8000c10 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	74fb      	strb	r3, [r7, #19]
        break;
 80022f2:	e005      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ef      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d15a      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002310:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01e      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	429a      	cmp	r2, r3
 8002320:	d019      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	4a1b      	ldr	r2, [pc, #108]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800234e:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d016      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fc56 	bl	8000c10 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	e00b      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fc52 	bl	8000c10 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d902      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	74fb      	strb	r3, [r7, #19]
            break;
 800237e:	e006      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ec      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	4904      	ldr	r1, [pc, #16]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023aa:	e009      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	74bb      	strb	r3, [r7, #18]
 80023b0:	e006      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c0:	7c7b      	ldrb	r3, [r7, #17]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4b8a      	ldr	r3, [pc, #552]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4a89      	ldr	r2, [pc, #548]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023de:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f023 0203 	bic.w	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4980      	ldr	r1, [pc, #512]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002400:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 020c 	bic.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	4978      	ldr	r1, [pc, #480]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	496f      	ldr	r1, [pc, #444]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	4967      	ldr	r1, [pc, #412]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	495e      	ldr	r1, [pc, #376]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	4956      	ldr	r1, [pc, #344]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024aa:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d028      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024cc:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4945      	ldr	r1, [pc, #276]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d106      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e011      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002502:	d10c      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f882 	bl	8002614 <RCCEx_PLLSAI1_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d028      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	492d      	ldr	r1, [pc, #180]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002548:	d106      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	e011      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002560:	d10c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f853 	bl	8002614 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002596:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f830 	bl	8002614 <RCCEx_PLLSAI1_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	4904      	ldr	r1, [pc, #16]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000

08002614 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002622:	4b74      	ldr	r3, [pc, #464]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800262e:	4b71      	ldr	r3, [pc, #452]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d10d      	bne.n	800265a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
       ||
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002646:	4b6b      	ldr	r3, [pc, #428]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
       ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d047      	beq.n	80026ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e044      	b.n	80026ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d018      	beq.n	800269a <RCCEx_PLLSAI1_Config+0x86>
 8002668:	2b03      	cmp	r3, #3
 800266a:	d825      	bhi.n	80026b8 <RCCEx_PLLSAI1_Config+0xa4>
 800266c:	2b01      	cmp	r3, #1
 800266e:	d002      	beq.n	8002676 <RCCEx_PLLSAI1_Config+0x62>
 8002670:	2b02      	cmp	r3, #2
 8002672:	d009      	beq.n	8002688 <RCCEx_PLLSAI1_Config+0x74>
 8002674:	e020      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002676:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d11d      	bne.n	80026be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002686:	e01a      	b.n	80026be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d116      	bne.n	80026c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e013      	b.n	80026c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026a6:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026b6:	e006      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      break;
 80026bc:	e004      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ce:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	430b      	orrs	r3, r1
 80026e4:	4943      	ldr	r1, [pc, #268]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d17c      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fc:	f7fe fa88 	bl	8000c10 <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002702:	e009      	b.n	8002718 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002704:	f7fe fa84 	bl	8000c10 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	73fb      	strb	r3, [r7, #15]
        break;
 8002716:	e005      	b.n	8002724 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ef      	bne.n	8002704 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d15f      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d110      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6892      	ldr	r2, [r2, #8]
 8002740:	0211      	lsls	r1, r2, #8
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68d2      	ldr	r2, [r2, #12]
 8002746:	06d2      	lsls	r2, r2, #27
 8002748:	430a      	orrs	r2, r1
 800274a:	492a      	ldr	r1, [pc, #168]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	610b      	str	r3, [r1, #16]
 8002750:	e027      	b.n	80027a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d112      	bne.n	800277e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6892      	ldr	r2, [r2, #8]
 8002768:	0211      	lsls	r1, r2, #8
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6912      	ldr	r2, [r2, #16]
 800276e:	0852      	lsrs	r2, r2, #1
 8002770:	3a01      	subs	r2, #1
 8002772:	0552      	lsls	r2, r2, #21
 8002774:	430a      	orrs	r2, r1
 8002776:	491f      	ldr	r1, [pc, #124]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	610b      	str	r3, [r1, #16]
 800277c:	e011      	b.n	80027a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002786:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6892      	ldr	r2, [r2, #8]
 800278e:	0211      	lsls	r1, r2, #8
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6952      	ldr	r2, [r2, #20]
 8002794:	0852      	lsrs	r2, r2, #1
 8002796:	3a01      	subs	r2, #1
 8002798:	0652      	lsls	r2, r2, #25
 800279a:	430a      	orrs	r2, r1
 800279c:	4915      	ldr	r1, [pc, #84]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe fa2f 	bl	8000c10 <HAL_GetTick>
 80027b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027b4:	e009      	b.n	80027ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b6:	f7fe fa2b 	bl	8000c10 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d902      	bls.n	80027ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	73fb      	strb	r3, [r7, #15]
          break;
 80027c8:	e005      	b.n	80027d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ef      	beq.n	80027b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4903      	ldr	r1, [pc, #12]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e040      	b.n	800288c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe f86e 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fe34 	bl	80034ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fc05 	bl	8003054 <UART_SetConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e01b      	b.n	800288c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 feb3 	bl	80035f0 <UART_CheckIdleState>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d178      	bne.n	800299e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_UART_Transmit+0x24>
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e071      	b.n	80029a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2221      	movs	r2, #33	; 0x21
 80028c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ca:	f7fe f9a1 	bl	8000c10 <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d108      	bne.n	80028fc <HAL_UART_Transmit+0x68>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e003      	b.n	8002904 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002904:	e030      	b.n	8002968 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 ff15 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e03c      	b.n	80029a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	881a      	ldrh	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002938:	b292      	uxth	r2, r2
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	3302      	adds	r3, #2
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	e008      	b.n	8002956 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b292      	uxth	r2, r2
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1c8      	bne.n	8002906 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fede 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e005      	b.n	80029a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d137      	bne.n	8002a30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_Receive_IT+0x24>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e030      	b.n	8002a32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_UART_Receive_IT+0x94>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01f      	beq.n	8002a20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	613b      	str	r3, [r7, #16]
   return(result);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	69f9      	ldr	r1, [r7, #28]
 8002a12:	6a3a      	ldr	r2, [r7, #32]
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e6      	bne.n	80029ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fef2 	bl	8003810 <UART_Start_Receive_IT>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	e000      	b.n	8002a32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3728      	adds	r7, #40	; 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40008000 	.word	0x40008000

08002a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0ba      	sub	sp, #232	; 0xe8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a6e:	4013      	ands	r3, r2
 8002a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d115      	bne.n	8002aa8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00f      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 82ae 	beq.w	8002ffa <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
      }
      return;
 8002aa6:	e2a8      	b.n	8002ffa <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8117 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002abe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_UART_IRQHandler+0x298>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 810a 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d011      	beq.n	8002afc <HAL_UART_IRQHandler+0xbc>
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d011      	beq.n	8002b2c <HAL_UART_IRQHandler+0xec>
 8002b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d011      	beq.n	8002b5c <HAL_UART_IRQHandler+0x11c>
 8002b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8e:	f043 0208 	orr.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_UART_IRQHandler+0x18a>
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8214 	beq.w	8002ffe <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d005      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d04f      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 feba 	bl	800399c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d141      	bne.n	8002cba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1d9      	bne.n	8002c36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d013      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <HAL_UART_IRQHandler+0x29c>)
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f915 	bl	8000ec6 <HAL_DMA_Abort_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cac:	4610      	mov	r0, r2
 8002cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e00f      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9b8 	bl	8003028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e00b      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9b4 	bl	8003028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e007      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9b0 	bl	8003028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002cd0:	e195      	b.n	8002ffe <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd2:	bf00      	nop
    return;
 8002cd4:	e193      	b.n	8002ffe <HAL_UART_IRQHandler+0x5be>
 8002cd6:	bf00      	nop
 8002cd8:	04000120 	.word	0x04000120
 8002cdc:	08003a65 	.word	0x08003a65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 814e 	bne.w	8002f86 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8147 	beq.w	8002f86 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8140 	beq.w	8002f86 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	f040 80b8 	bne.w	8002e8e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8167 	beq.w	8003002 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	f080 815f 	bcs.w	8003002 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8086 	bne.w	8002e6c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1da      	bne.n	8002d60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3308      	adds	r3, #8
 8002db0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e1      	bne.n	8002daa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3308      	adds	r3, #8
 8002e06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e3      	bne.n	8002de6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3c:	f023 0310 	bic.w	r3, r3, #16
 8002e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e4      	bne.n	8002e2c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd ffef 	bl	8000e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f8d8 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e8c:	e0b9      	b.n	8003002 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80ab 	beq.w	8003006 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80a6 	beq.w	8003006 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ede:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e4      	bne.n	8002eba <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	623b      	str	r3, [r7, #32]
   return(result);
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f14:	633a      	str	r2, [r7, #48]	; 0x30
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e3      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f023 0310 	bic.w	r3, r3, #16
 8002f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e4      	bne.n	8002f3c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f85c 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f84:	e03f      	b.n	8003006 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x570>
 8002f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 ffbe 	bl	8003f2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fae:	e02d      	b.n	800300c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01c      	beq.n	800300a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
    }
    return;
 8002fd8:	e017      	b.n	800300a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <HAL_UART_IRQHandler+0x5cc>
 8002fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fd4c 	bl	8003a90 <UART_EndTransmit_IT>
    return;
 8002ff8:	e008      	b.n	800300c <HAL_UART_IRQHandler+0x5cc>
      return;
 8002ffa:	bf00      	nop
 8002ffc:	e006      	b.n	800300c <HAL_UART_IRQHandler+0x5cc>
    return;
 8002ffe:	bf00      	nop
 8003000:	e004      	b.n	800300c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003002:	bf00      	nop
 8003004:	e002      	b.n	800300c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <HAL_UART_IRQHandler+0x5cc>
    return;
 800300a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800300c:	37e8      	adds	r7, #232	; 0xe8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop

08003014 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b08a      	sub	sp, #40	; 0x28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	431a      	orrs	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4313      	orrs	r3, r2
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4bb4      	ldr	r3, [pc, #720]	; (8003354 <UART_SetConfig+0x300>)
 8003084:	4013      	ands	r3, r2
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308c:	430b      	orrs	r3, r1
 800308e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4aa9      	ldr	r2, [pc, #676]	; (8003358 <UART_SetConfig+0x304>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	4313      	orrs	r3, r2
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4aa0      	ldr	r2, [pc, #640]	; (800335c <UART_SetConfig+0x308>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d126      	bne.n	800312c <UART_SetConfig+0xd8>
 80030de:	4ba0      	ldr	r3, [pc, #640]	; (8003360 <UART_SetConfig+0x30c>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d81b      	bhi.n	8003124 <UART_SetConfig+0xd0>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <UART_SetConfig+0xa0>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003105 	.word	0x08003105
 80030f8:	08003115 	.word	0x08003115
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	0800311d 	.word	0x0800311d
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e080      	b.n	800320e <UART_SetConfig+0x1ba>
 800310c:	2302      	movs	r3, #2
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e07c      	b.n	800320e <UART_SetConfig+0x1ba>
 8003114:	2304      	movs	r3, #4
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e078      	b.n	800320e <UART_SetConfig+0x1ba>
 800311c:	2308      	movs	r3, #8
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e074      	b.n	800320e <UART_SetConfig+0x1ba>
 8003124:	2310      	movs	r3, #16
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312a:	e070      	b.n	800320e <UART_SetConfig+0x1ba>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a8c      	ldr	r2, [pc, #560]	; (8003364 <UART_SetConfig+0x310>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d138      	bne.n	80031a8 <UART_SetConfig+0x154>
 8003136:	4b8a      	ldr	r3, [pc, #552]	; (8003360 <UART_SetConfig+0x30c>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d82d      	bhi.n	80031a0 <UART_SetConfig+0x14c>
 8003144:	a201      	add	r2, pc, #4	; (adr r2, 800314c <UART_SetConfig+0xf8>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	08003181 	.word	0x08003181
 8003150:	080031a1 	.word	0x080031a1
 8003154:	080031a1 	.word	0x080031a1
 8003158:	080031a1 	.word	0x080031a1
 800315c:	08003191 	.word	0x08003191
 8003160:	080031a1 	.word	0x080031a1
 8003164:	080031a1 	.word	0x080031a1
 8003168:	080031a1 	.word	0x080031a1
 800316c:	08003189 	.word	0x08003189
 8003170:	080031a1 	.word	0x080031a1
 8003174:	080031a1 	.word	0x080031a1
 8003178:	080031a1 	.word	0x080031a1
 800317c:	08003199 	.word	0x08003199
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e042      	b.n	800320e <UART_SetConfig+0x1ba>
 8003188:	2302      	movs	r3, #2
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e03e      	b.n	800320e <UART_SetConfig+0x1ba>
 8003190:	2304      	movs	r3, #4
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e03a      	b.n	800320e <UART_SetConfig+0x1ba>
 8003198:	2308      	movs	r3, #8
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e036      	b.n	800320e <UART_SetConfig+0x1ba>
 80031a0:	2310      	movs	r3, #16
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e032      	b.n	800320e <UART_SetConfig+0x1ba>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a6a      	ldr	r2, [pc, #424]	; (8003358 <UART_SetConfig+0x304>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d12a      	bne.n	8003208 <UART_SetConfig+0x1b4>
 80031b2:	4b6b      	ldr	r3, [pc, #428]	; (8003360 <UART_SetConfig+0x30c>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031c0:	d01a      	beq.n	80031f8 <UART_SetConfig+0x1a4>
 80031c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031c6:	d81b      	bhi.n	8003200 <UART_SetConfig+0x1ac>
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031cc:	d00c      	beq.n	80031e8 <UART_SetConfig+0x194>
 80031ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d2:	d815      	bhi.n	8003200 <UART_SetConfig+0x1ac>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <UART_SetConfig+0x18c>
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031dc:	d008      	beq.n	80031f0 <UART_SetConfig+0x19c>
 80031de:	e00f      	b.n	8003200 <UART_SetConfig+0x1ac>
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e6:	e012      	b.n	800320e <UART_SetConfig+0x1ba>
 80031e8:	2302      	movs	r3, #2
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ee:	e00e      	b.n	800320e <UART_SetConfig+0x1ba>
 80031f0:	2304      	movs	r3, #4
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e00a      	b.n	800320e <UART_SetConfig+0x1ba>
 80031f8:	2308      	movs	r3, #8
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e006      	b.n	800320e <UART_SetConfig+0x1ba>
 8003200:	2310      	movs	r3, #16
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e002      	b.n	800320e <UART_SetConfig+0x1ba>
 8003208:	2310      	movs	r3, #16
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a51      	ldr	r2, [pc, #324]	; (8003358 <UART_SetConfig+0x304>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d17a      	bne.n	800330e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800321c:	2b08      	cmp	r3, #8
 800321e:	d824      	bhi.n	800326a <UART_SetConfig+0x216>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_SetConfig+0x1d4>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800326b 	.word	0x0800326b
 8003230:	08003255 	.word	0x08003255
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800325b 	.word	0x0800325b
 800323c:	0800326b 	.word	0x0800326b
 8003240:	0800326b 	.word	0x0800326b
 8003244:	0800326b 	.word	0x0800326b
 8003248:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe ff50 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003250:	61f8      	str	r0, [r7, #28]
        break;
 8003252:	e010      	b.n	8003276 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b44      	ldr	r3, [pc, #272]	; (8003368 <UART_SetConfig+0x314>)
 8003256:	61fb      	str	r3, [r7, #28]
        break;
 8003258:	e00d      	b.n	8003276 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7fe feb1 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800325e:	61f8      	str	r0, [r7, #28]
        break;
 8003260:	e009      	b.n	8003276 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	61fb      	str	r3, [r7, #28]
        break;
 8003268:	e005      	b.n	8003276 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8107 	beq.w	800348c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	429a      	cmp	r2, r3
 800328c:	d305      	bcc.n	800329a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	429a      	cmp	r2, r3
 8003298:	d903      	bls.n	80032a2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032a0:	e0f4      	b.n	800348c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2200      	movs	r2, #0
 80032a6:	461c      	mov	r4, r3
 80032a8:	4615      	mov	r5, r2
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	022b      	lsls	r3, r5, #8
 80032b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032b8:	0222      	lsls	r2, r4, #8
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	6849      	ldr	r1, [r1, #4]
 80032be:	0849      	lsrs	r1, r1, #1
 80032c0:	2000      	movs	r0, #0
 80032c2:	4688      	mov	r8, r1
 80032c4:	4681      	mov	r9, r0
 80032c6:	eb12 0a08 	adds.w	sl, r2, r8
 80032ca:	eb43 0b09 	adc.w	fp, r3, r9
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032dc:	4650      	mov	r0, sl
 80032de:	4659      	mov	r1, fp
 80032e0:	f7fc ff74 	bl	80001cc <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4613      	mov	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f2:	d308      	bcc.n	8003306 <UART_SetConfig+0x2b2>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fa:	d204      	bcs.n	8003306 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e0c2      	b.n	800348c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800330c:	e0be      	b.n	800348c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003316:	d16a      	bne.n	80033ee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800331c:	2b08      	cmp	r3, #8
 800331e:	d834      	bhi.n	800338a <UART_SetConfig+0x336>
 8003320:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <UART_SetConfig+0x2d4>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	0800334d 	.word	0x0800334d
 800332c:	0800336d 	.word	0x0800336d
 8003330:	08003375 	.word	0x08003375
 8003334:	0800338b 	.word	0x0800338b
 8003338:	0800337b 	.word	0x0800337b
 800333c:	0800338b 	.word	0x0800338b
 8003340:	0800338b 	.word	0x0800338b
 8003344:	0800338b 	.word	0x0800338b
 8003348:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7fe fed0 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003350:	61f8      	str	r0, [r7, #28]
        break;
 8003352:	e020      	b.n	8003396 <UART_SetConfig+0x342>
 8003354:	efff69f3 	.word	0xefff69f3
 8003358:	40008000 	.word	0x40008000
 800335c:	40013800 	.word	0x40013800
 8003360:	40021000 	.word	0x40021000
 8003364:	40004400 	.word	0x40004400
 8003368:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fed6 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8003370:	61f8      	str	r0, [r7, #28]
        break;
 8003372:	e010      	b.n	8003396 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b4c      	ldr	r3, [pc, #304]	; (80034a8 <UART_SetConfig+0x454>)
 8003376:	61fb      	str	r3, [r7, #28]
        break;
 8003378:	e00d      	b.n	8003396 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fe21 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800337e:	61f8      	str	r0, [r7, #28]
        break;
 8003380:	e009      	b.n	8003396 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	61fb      	str	r3, [r7, #28]
        break;
 8003388:	e005      	b.n	8003396 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d077      	beq.n	800348c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005a      	lsls	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	441a      	add	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d916      	bls.n	80033e6 <UART_SetConfig+0x392>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d212      	bcs.n	80033e6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	8afb      	ldrh	r3, [r7, #22]
 80033d8:	4313      	orrs	r3, r2
 80033da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	8afa      	ldrh	r2, [r7, #22]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e052      	b.n	800348c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033ec:	e04e      	b.n	800348c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d827      	bhi.n	8003446 <UART_SetConfig+0x3f2>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UART_SetConfig+0x3a8>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	08003421 	.word	0x08003421
 8003400:	08003429 	.word	0x08003429
 8003404:	08003431 	.word	0x08003431
 8003408:	08003447 	.word	0x08003447
 800340c:	08003437 	.word	0x08003437
 8003410:	08003447 	.word	0x08003447
 8003414:	08003447 	.word	0x08003447
 8003418:	08003447 	.word	0x08003447
 800341c:	0800343f 	.word	0x0800343f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe fe66 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e014      	b.n	8003452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003428:	f7fe fe78 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 800342c:	61f8      	str	r0, [r7, #28]
        break;
 800342e:	e010      	b.n	8003452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <UART_SetConfig+0x454>)
 8003432:	61fb      	str	r3, [r7, #28]
        break;
 8003434:	e00d      	b.n	8003452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003436:	f7fe fdc3 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800343a:	61f8      	str	r0, [r7, #28]
        break;
 800343c:	e009      	b.n	8003452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003442:	61fb      	str	r3, [r7, #28]
        break;
 8003444:	e005      	b.n	8003452 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003450:	bf00      	nop
    }

    if (pclk != 0U)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d019      	beq.n	800348c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	085a      	lsrs	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d909      	bls.n	8003486 <UART_SetConfig+0x432>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d205      	bcs.n	8003486 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e002      	b.n	800348c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800349c:	4618      	mov	r0, r3
 800349e:	3728      	adds	r7, #40	; 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	00f42400 	.word	0x00f42400

080034ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035aa:	d10a      	bne.n	80035c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b098      	sub	sp, #96	; 0x60
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003600:	f7fd fb06 	bl	8000c10 <HAL_GetTick>
 8003604:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d12e      	bne.n	8003672 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f88c 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d021      	beq.n	8003672 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003642:	653b      	str	r3, [r7, #80]	; 0x50
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
 800364e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e6      	bne.n	800362e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e062      	b.n	8003738 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d149      	bne.n	8003714 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f856 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d03c      	beq.n	8003714 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	623b      	str	r3, [r7, #32]
   return(result);
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e6      	bne.n	800369a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	60fb      	str	r3, [r7, #12]
   return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ec:	61fa      	str	r2, [r7, #28]
 80036ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	69b9      	ldr	r1, [r7, #24]
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	617b      	str	r3, [r7, #20]
   return(result);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e011      	b.n	8003738 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3758      	adds	r7, #88	; 0x58
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	e049      	b.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003758:	d045      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fd fa59 	bl	8000c10 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <UART_WaitOnFlagUntilTimeout+0x30>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e048      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d031      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d110      	bne.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2208      	movs	r2, #8
 8003796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f8ff 	bl	800399c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2208      	movs	r2, #8
 80037a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e029      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c0:	d111      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f8e5 	bl	800399c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e00f      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69da      	ldr	r2, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	429a      	cmp	r2, r3
 8003802:	d0a6      	beq.n	8003752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003810:	b480      	push	{r7}
 8003812:	b097      	sub	sp, #92	; 0x5c
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d10e      	bne.n	8003862 <UART_Start_Receive_IT+0x52>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <UART_Start_Receive_IT+0x48>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003856:	e02d      	b.n	80038b4 <UART_Start_Receive_IT+0xa4>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	22ff      	movs	r2, #255	; 0xff
 800385c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003860:	e028      	b.n	80038b4 <UART_Start_Receive_IT+0xa4>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <UART_Start_Receive_IT+0x76>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <UART_Start_Receive_IT+0x6c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800387a:	e01b      	b.n	80038b4 <UART_Start_Receive_IT+0xa4>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	227f      	movs	r2, #127	; 0x7f
 8003880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003884:	e016      	b.n	80038b4 <UART_Start_Receive_IT+0xa4>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388e:	d10d      	bne.n	80038ac <UART_Start_Receive_IT+0x9c>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <UART_Start_Receive_IT+0x92>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	227f      	movs	r2, #127	; 0x7f
 800389c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038a0:	e008      	b.n	80038b4 <UART_Start_Receive_IT+0xa4>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	223f      	movs	r2, #63	; 0x3f
 80038a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038aa:	e003      	b.n	80038b4 <UART_Start_Receive_IT+0xa4>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2222      	movs	r2, #34	; 0x22
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	657b      	str	r3, [r7, #84]	; 0x54
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80038e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d107      	bne.n	8003912 <UART_Start_Receive_IT+0x102>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a21      	ldr	r2, [pc, #132]	; (8003994 <UART_Start_Receive_IT+0x184>)
 800390e:	669a      	str	r2, [r3, #104]	; 0x68
 8003910:	e002      	b.n	8003918 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <UART_Start_Receive_IT+0x188>)
 8003916:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d019      	beq.n	8003954 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
 8003940:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e6      	bne.n	8003920 <UART_Start_Receive_IT+0x110>
 8003952:	e018      	b.n	8003986 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	613b      	str	r3, [r7, #16]
   return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f043 0320 	orr.w	r3, r3, #32
 8003968:	653b      	str	r3, [r7, #80]	; 0x50
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e6      	bne.n	8003954 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	375c      	adds	r7, #92	; 0x5c
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	08003ca1 	.word	0x08003ca1
 8003998:	08003ae5 	.word	0x08003ae5

0800399c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b095      	sub	sp, #84	; 0x54
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
 80039c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e6      	bne.n	80039a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d118      	bne.n	8003a44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f023 0310 	bic.w	r3, r3, #16
 8003a26:	647b      	str	r3, [r7, #68]	; 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e6      	bne.n	8003a12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a58:	bf00      	nop
 8003a5a:	3754      	adds	r7, #84	; 0x54
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff fad0 	bl	8003028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e6      	bne.n	8003a98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fa9c 	bl	8003014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003adc:	bf00      	nop
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b09c      	sub	sp, #112	; 0x70
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003af2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afc:	2b22      	cmp	r3, #34	; 0x22
 8003afe:	f040 80be 	bne.w	8003c7e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003b10:	b2d9      	uxtb	r1, r3
 8003b12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 80a3 	bne.w	8003c92 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e6      	bne.n	8003b4c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	667b      	str	r3, [r7, #100]	; 0x64
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003ba0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <UART_RxISR_8BIT+0x1b8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d01f      	beq.n	8003c10 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d018      	beq.n	8003c10 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	623b      	str	r3, [r7, #32]
   return(result);
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e6      	bne.n	8003bde <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d12e      	bne.n	8003c76 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69b9      	ldr	r1, [r7, #24]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d103      	bne.n	8003c66 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2210      	movs	r2, #16
 8003c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff f9e4 	bl	800303c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c74:	e00d      	b.n	8003c92 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fc fda8 	bl	80007cc <HAL_UART_RxCpltCallback>
}
 8003c7c:	e009      	b.n	8003c92 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	8b1b      	ldrh	r3, [r3, #24]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	831a      	strh	r2, [r3, #24]
}
 8003c92:	bf00      	nop
 8003c94:	3770      	adds	r7, #112	; 0x70
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40008000 	.word	0x40008000

08003ca0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b09c      	sub	sp, #112	; 0x70
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb8:	2b22      	cmp	r3, #34	; 0x22
 8003cba:	f040 80be 	bne.w	8003e3a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003cd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 80a3 	bne.w	8003e4e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d26:	657b      	str	r3, [r7, #84]	; 0x54
 8003d28:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e6      	bne.n	8003d08 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3308      	adds	r3, #8
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	663b      	str	r3, [r7, #96]	; 0x60
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d5a:	643a      	str	r2, [r7, #64]	; 0x40
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e5      	bne.n	8003d3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a34      	ldr	r2, [pc, #208]	; (8003e58 <UART_RxISR_16BIT+0x1b8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01f      	beq.n	8003dcc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e6      	bne.n	8003d9a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d12e      	bne.n	8003e32 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 0310 	bic.w	r3, r3, #16
 8003dee:	65bb      	str	r3, [r7, #88]	; 0x58
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d103      	bne.n	8003e22 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2210      	movs	r2, #16
 8003e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff f906 	bl	800303c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e30:	e00d      	b.n	8003e4e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc fcca 	bl	80007cc <HAL_UART_RxCpltCallback>
}
 8003e38:	e009      	b.n	8003e4e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	8b1b      	ldrh	r3, [r3, #24]
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	831a      	strh	r2, [r3, #24]
}
 8003e4e:	bf00      	nop
 8003e50:	3770      	adds	r7, #112	; 0x70
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40008000 	.word	0x40008000

08003e5c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e056      	b.n	8003f22 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7fc fd39 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2224      	movs	r2, #36	; 0x24
 8003e8e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff faff 	bl	80034ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff f8d0 	bl	8003054 <UART_SetConfig>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e031      	b.n	8003f22 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ecc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	055b      	lsls	r3, r3, #21
 8003ee6:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8003efc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fb68 	bl	80035f0 <UART_CheckIdleState>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <memset>:
 8003f3e:	4402      	add	r2, r0
 8003f40:	4603      	mov	r3, r0
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d100      	bne.n	8003f48 <memset+0xa>
 8003f46:	4770      	bx	lr
 8003f48:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4c:	e7f9      	b.n	8003f42 <memset+0x4>
	...

08003f50 <__libc_init_array>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4d0d      	ldr	r5, [pc, #52]	; (8003f88 <__libc_init_array+0x38>)
 8003f54:	4c0d      	ldr	r4, [pc, #52]	; (8003f8c <__libc_init_array+0x3c>)
 8003f56:	1b64      	subs	r4, r4, r5
 8003f58:	10a4      	asrs	r4, r4, #2
 8003f5a:	2600      	movs	r6, #0
 8003f5c:	42a6      	cmp	r6, r4
 8003f5e:	d109      	bne.n	8003f74 <__libc_init_array+0x24>
 8003f60:	4d0b      	ldr	r5, [pc, #44]	; (8003f90 <__libc_init_array+0x40>)
 8003f62:	4c0c      	ldr	r4, [pc, #48]	; (8003f94 <__libc_init_array+0x44>)
 8003f64:	f000 f818 	bl	8003f98 <_init>
 8003f68:	1b64      	subs	r4, r4, r5
 8003f6a:	10a4      	asrs	r4, r4, #2
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	42a6      	cmp	r6, r4
 8003f70:	d105      	bne.n	8003f7e <__libc_init_array+0x2e>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f78:	4798      	blx	r3
 8003f7a:	3601      	adds	r6, #1
 8003f7c:	e7ee      	b.n	8003f5c <__libc_init_array+0xc>
 8003f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f82:	4798      	blx	r3
 8003f84:	3601      	adds	r6, #1
 8003f86:	e7f2      	b.n	8003f6e <__libc_init_array+0x1e>
 8003f88:	08004008 	.word	0x08004008
 8003f8c:	08004008 	.word	0x08004008
 8003f90:	08004008 	.word	0x08004008
 8003f94:	0800400c 	.word	0x0800400c

08003f98 <_init>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr

08003fa4 <_fini>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr
