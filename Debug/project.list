
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000979c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009930  08009930  00019930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e44  08009e44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e4c  08009e4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006cc  200001dc  0800a030  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  0800a030  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001106a  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a82  00000000  00000000  000312b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00033d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b51  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218ca  00000000  00000000  00035749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012021  00000000  00000000  00057013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4405  00000000  00000000  00069034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005134  00000000  00000000  0012d43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00132570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009914 	.word	0x08009914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009914 	.word	0x08009914

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 b9a6 	b.w	8000f40 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f001 f800 	bl	8001f4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f907 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 fa09 	bl	8001368 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 f9d5 	bl	8001304 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f5a:	f000 f9a3 	bl	80012a4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000f5e:	f000 f961 	bl	8001224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  tm1637Init();
 8000f62:	f000 fc21 	bl	80017a8 <tm1637Init>
  if (!MX_sht3x_init()) {
 8000f66:	f000 fabf 	bl	80014e8 <MX_sht3x_init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f083 0301 	eor.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00d      	beq.n	8000f92 <main+0x4e>

	  tm1637DisplayDecimal(hi2c1.ErrorCode+400, 0);
 8000f76:	4b69      	ldr	r3, [pc, #420]	; (800111c <main+0x1d8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fc55 	bl	8001830 <tm1637DisplayDecimal>
	  HAL_Delay(1000);
 8000f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8a:	f001 f855 	bl	8002038 <HAL_Delay>
	  MX_sht3x_init();
 8000f8e:	f000 faab 	bl	80014e8 <MX_sht3x_init>
  }
  sht3x_set_header_enable(&sht3x1, 1);
 8000f92:	2101      	movs	r1, #1
 8000f94:	4862      	ldr	r0, [pc, #392]	; (8001120 <main+0x1dc>)
 8000f96:	f000 fbed 	bl	8001774 <sht3x_set_header_enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, rx_write_ptn, uart_buff_size);
 8000f9a:	4b62      	ldr	r3, [pc, #392]	; (8001124 <main+0x1e0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2232      	movs	r2, #50	; 0x32
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4861      	ldr	r0, [pc, #388]	; (8001128 <main+0x1e4>)
 8000fa4:	f003 fd3e 	bl	8004a24 <HAL_UART_Receive_IT>
  int i = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
	 if (rx_data_ready) {
 8000fac:	4b5f      	ldr	r3, [pc, #380]	; (800112c <main+0x1e8>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <main+0x74>
		 parse_data();
 8000fb4:	f000 fa92 	bl	80014dc <parse_data>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // Sensor data
	 float temperature, humidity = 0;
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
	 bool res = sht3x_read_temperature_and_humidity(&sht3x1, &temperature, &humidity);
 8000fbe:	f107 0214 	add.w	r2, r7, #20
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4855      	ldr	r0, [pc, #340]	; (8001120 <main+0x1dc>)
 8000fca:	f000 fb57 	bl	800167c <sht3x_read_temperature_and_humidity>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 int data;
	 if (res) {
 8000fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <main+0xa8>
		 data = temperature;
 8000fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e089      	b.n	8001100 <main+0x1bc>
	 } else {
		 data = 1000+hi2c1.ErrorCode;
 8000fec:	4b4b      	ldr	r3, [pc, #300]	; (800111c <main+0x1d8>)
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ff4:	61fb      	str	r3, [r7, #28]
		 char error_msg[20];
		 sprintf(error_msg, "%d",hi2c1.ErrorCode);
 8000ff6:	4b49      	ldr	r3, [pc, #292]	; (800111c <main+0x1d8>)
 8000ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	494c      	ldr	r1, [pc, #304]	; (8001130 <main+0x1ec>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 feea 	bl	8006dd8 <siprintf>
		 HAL_UART_Transmit(&huart2, error_msg, strlen(error_msg), 5000);
 8001004:	463b      	mov	r3, r7
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff f8ec 	bl	80001e4 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	4639      	mov	r1, r7
 8001012:	f241 3388 	movw	r3, #5000	; 0x1388
 8001016:	4847      	ldr	r0, [pc, #284]	; (8001134 <main+0x1f0>)
 8001018:	f003 fc7a 	bl	8004910 <HAL_UART_Transmit>
		 HAL_Delay(3);
 800101c:	2003      	movs	r0, #3
 800101e:	f001 f80b 	bl	8002038 <HAL_Delay>

		 if (hi2c1.ErrorCode & (HAL_I2C_ERROR_BERR )) {
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <main+0x1d8>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <main+0xf8>
			 	HAL_UART_Transmit(&huart2, " BERR ", 6, 5000 );
 800102e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001032:	2206      	movs	r2, #6
 8001034:	4940      	ldr	r1, [pc, #256]	; (8001138 <main+0x1f4>)
 8001036:	483f      	ldr	r0, [pc, #252]	; (8001134 <main+0x1f0>)
 8001038:	f003 fc6a 	bl	8004910 <HAL_UART_Transmit>
		 }    /*!< BERR error            */

		 if (hi2c1.ErrorCode & (HAL_I2C_ERROR_AF)) {//ACKF error
 800103c:	4b37      	ldr	r3, [pc, #220]	; (800111c <main+0x1d8>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <main+0x112>
		 	HAL_UART_Transmit(&huart2, " ACK ", 5, 5000 );
 8001048:	f241 3388 	movw	r3, #5000	; 0x1388
 800104c:	2205      	movs	r2, #5
 800104e:	493b      	ldr	r1, [pc, #236]	; (800113c <main+0x1f8>)
 8001050:	4838      	ldr	r0, [pc, #224]	; (8001134 <main+0x1f0>)
 8001052:	f003 fc5d 	bl	8004910 <HAL_UART_Transmit>
		 }
		 if (hi2c1.ErrorCode & (HAL_I2C_ERROR_ARLO)) {
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <main+0x1d8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <main+0x12c>
		 	HAL_UART_Transmit(&huart2, " ARLO ", 6, 5000 );
 8001062:	f241 3388 	movw	r3, #5000	; 0x1388
 8001066:	2206      	movs	r2, #6
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <main+0x1fc>)
 800106a:	4832      	ldr	r0, [pc, #200]	; (8001134 <main+0x1f0>)
 800106c:	f003 fc50 	bl	8004910 <HAL_UART_Transmit>
		 }
		 if (hi2c1.ErrorCode & ( HAL_I2C_ERROR_OVR)) {
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <main+0x1d8>)
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <main+0x146>
			 HAL_UART_Transmit(&huart2, " OVR ", 5, 5000 );
 800107c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001080:	2205      	movs	r2, #5
 8001082:	4930      	ldr	r1, [pc, #192]	; (8001144 <main+0x200>)
 8001084:	482b      	ldr	r0, [pc, #172]	; (8001134 <main+0x1f0>)
 8001086:	f003 fc43 	bl	8004910 <HAL_UART_Transmit>
		 }    /*!< OVR error             */
		 if (hi2c1.ErrorCode & (HAL_I2C_ERROR_DMA)) {
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <main+0x1d8>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <main+0x160>
			 HAL_UART_Transmit(&huart2, " DMA tra ", 9, 5000 );
 8001096:	f241 3388 	movw	r3, #5000	; 0x1388
 800109a:	2209      	movs	r2, #9
 800109c:	492a      	ldr	r1, [pc, #168]	; (8001148 <main+0x204>)
 800109e:	4825      	ldr	r0, [pc, #148]	; (8001134 <main+0x1f0>)
 80010a0:	f003 fc36 	bl	8004910 <HAL_UART_Transmit>

		 }    /*!< DMA transfer error    */
		 if (hi2c1.ErrorCode & (HAL_I2C_ERROR_TIMEOUT )) {
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <main+0x1d8>)
 80010a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <main+0x17a>
			 HAL_UART_Transmit(&huart2, " timeout ", 9, 5000 );
 80010b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80010b4:	2209      	movs	r2, #9
 80010b6:	4925      	ldr	r1, [pc, #148]	; (800114c <main+0x208>)
 80010b8:	481e      	ldr	r0, [pc, #120]	; (8001134 <main+0x1f0>)
 80010ba:	f003 fc29 	bl	8004910 <HAL_UART_Transmit>
		 }    /*!< Timeout error         */

		 if (hi2c1.ErrorCode & (HAL_I2C_ERROR_SIZE)) {
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <main+0x1d8>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <main+0x194>
			 HAL_UART_Transmit(&huart2, " size ", 6, 5000 );
 80010ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ce:	2206      	movs	r2, #6
 80010d0:	491f      	ldr	r1, [pc, #124]	; (8001150 <main+0x20c>)
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <main+0x1f0>)
 80010d4:	f003 fc1c 	bl	8004910 <HAL_UART_Transmit>
		 }    /*!< Size Management error */

		 if (hi2c1.ErrorCode & (HAL_I2C_ERROR_DMA_PARAM)) {
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <main+0x1d8>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <main+0x1ae>
			 HAL_UART_Transmit(&huart2, " DMA par ", 9, 5000 );
 80010e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80010e8:	2209      	movs	r2, #9
 80010ea:	491a      	ldr	r1, [pc, #104]	; (8001154 <main+0x210>)
 80010ec:	4811      	ldr	r0, [pc, #68]	; (8001134 <main+0x1f0>)
 80010ee:	f003 fc0f 	bl	8004910 <HAL_UART_Transmit>
		 }    /*!< DMA Parameter Error   */

		 HAL_UART_Transmit(&huart2, "\r\n", 2, 5000 );
 80010f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010f6:	2202      	movs	r2, #2
 80010f8:	4917      	ldr	r1, [pc, #92]	; (8001158 <main+0x214>)
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <main+0x1f0>)
 80010fc:	f003 fc08 	bl	8004910 <HAL_UART_Transmit>


	 //char msa[20] = {0};
	 //sprintf(msa, "%d\r\n", hi2c1.ErrorCode);
	 //HAL_UART_Transmit(&huart2, msa, strlen(msa), 5000 );
	 tm1637DisplayDecimal(rpm, 1);
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <main+0x218>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fb92 	bl	8001830 <tm1637DisplayDecimal>
	 HAL_Delay(100);
 800110c:	2064      	movs	r0, #100	; 0x64
 800110e:	f000 ff93 	bl	8002038 <HAL_Delay>
	 i++;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  {
 8001118:	e748      	b.n	8000fac <main+0x68>
 800111a:	bf00      	nop
 800111c:	200001f8 	.word	0x200001f8
 8001120:	2000035c 	.word	0x2000035c
 8001124:	20000004 	.word	0x20000004
 8001128:	2000024c 	.word	0x2000024c
 800112c:	2000074c 	.word	0x2000074c
 8001130:	08009930 	.word	0x08009930
 8001134:	200002d4 	.word	0x200002d4
 8001138:	08009934 	.word	0x08009934
 800113c:	0800993c 	.word	0x0800993c
 8001140:	08009944 	.word	0x08009944
 8001144:	0800994c 	.word	0x0800994c
 8001148:	08009954 	.word	0x08009954
 800114c:	08009960 	.word	0x08009960
 8001150:	0800996c 	.word	0x0800996c
 8001154:	08009974 	.word	0x08009974
 8001158:	08009980 	.word	0x08009980
 800115c:	20000750 	.word	0x20000750

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f005 fec3 	bl	8006efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001186:	f002 f9ef 	bl	8003568 <HAL_PWREx_ControlVoltageScaling>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001190:	f000 f9bc 	bl	800150c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001194:	f002 f9ca 	bl	800352c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <SystemClock_Config+0xc0>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	4a20      	ldr	r2, [pc, #128]	; (8001220 <SystemClock_Config+0xc0>)
 80011a0:	f023 0318 	bic.w	r3, r3, #24
 80011a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011a8:	2314      	movs	r3, #20
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011b8:	2360      	movs	r3, #96	; 0x60
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011c8:	2310      	movs	r3, #16
 80011ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011cc:	2307      	movs	r3, #7
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fa19 	bl	8003614 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011e8:	f000 f990 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2303      	movs	r3, #3
 80011f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fe19 	bl	8003e3c <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001210:	f000 f97c 	bl	800150c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001214:	f003 fa2c 	bl	8004670 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001218:	bf00      	nop
 800121a:	3758      	adds	r7, #88	; 0x58
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f001 fa20 	bl	80026a4 <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f000 f94f 	bl	800150c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f002 f8c3 	bl	80033fc <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 f946 	bl	800150c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f002 f905 	bl	8003492 <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f93d 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001f8 	.word	0x200001f8
 800129c:	40005400 	.word	0x40005400
 80012a0:	00300f38 	.word	0x00300f38

080012a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <MX_USART1_UART_Init+0x5c>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012b0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012cc:	220c      	movs	r2, #12
 80012ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_USART1_UART_Init+0x58>)
 80012ea:	f003 fac3 	bl	8004874 <HAL_UART_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80012f4:	f000 f90a 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000024c 	.word	0x2000024c
 8001300:	40013800 	.word	0x40013800

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <MX_USART2_UART_Init+0x60>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 8001310:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001346:	2300      	movs	r3, #0
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 800134e:	f004 fdc3 	bl	8005ed8 <HAL_RS485Ex_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001358:	f000 f8d8 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200002d4 	.word	0x200002d4
 8001364:	40004400 	.word	0x40004400

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_GPIO_Init+0x8c>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <MX_GPIO_Init+0x8c>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_GPIO_Init+0x8c>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_GPIO_Init+0x8c>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <MX_GPIO_Init+0x8c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	480b      	ldr	r0, [pc, #44]	; (80013f8 <MX_GPIO_Init+0x90>)
 80013cc:	f001 f952 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013d0:	2308      	movs	r3, #8
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_GPIO_Init+0x90>)
 80013e8:	f000 ffda 	bl	80023a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void parse_pdu();

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    // Restart the UART receive interrupt immediately
    HAL_UART_Receive_IT(&huart1, rx_data_buff, 50);
 8001404:	2232      	movs	r2, #50	; 0x32
 8001406:	4907      	ldr	r1, [pc, #28]	; (8001424 <HAL_UART_RxCpltCallback+0x28>)
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <HAL_UART_RxCpltCallback+0x2c>)
 800140a:	f003 fb0b 	bl	8004a24 <HAL_UART_Receive_IT>
	parse_pdu();
 800140e:	f000 f80d 	bl	800142c <parse_pdu>
    //	rx_write_ptn++;
    	//if (rx_write_ptn >= rx_data_buff + uart_buff_size) {
    //		rx_write_ptn = rx_data_buff;
    	//}
    //}
	memset(rx_data_buff, 0, 50);
 8001412:	2232      	movs	r2, #50	; 0x32
 8001414:	2100      	movs	r1, #0
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <HAL_UART_RxCpltCallback+0x28>)
 8001418:	f005 fd6f 	bl	8006efa <memset>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000364 	.word	0x20000364
 8001428:	2000024c 	.word	0x2000024c

0800142c <parse_pdu>:

void parse_pdu() {
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b08d      	sub	sp, #52	; 0x34
 8001430:	af00      	add	r7, sp, #0
    char key[20];
    char value[20];

    if (sscanf((char *)rx_data_buff, "%19[^=]=%19[^\n]", key, value) == 2) {
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	f107 0218 	add.w	r2, r7, #24
 8001438:	4921      	ldr	r1, [pc, #132]	; (80014c0 <parse_pdu+0x94>)
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <parse_pdu+0x98>)
 800143c:	f005 fcec 	bl	8006e18 <siscanf>
 8001440:	4603      	mov	r3, r0
 8001442:	2b02      	cmp	r3, #2
 8001444:	d138      	bne.n	80014b8 <parse_pdu+0x8c>
        int size = strlen(key) + strlen(value) + 2;  // Key=Value + newline
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe feca 	bl	80001e4 <strlen>
 8001450:	4604      	mov	r4, r0
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fec5 	bl	80001e4 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	4423      	add	r3, r4
 800145e:	3302      	adds	r3, #2
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
        rx_read_ptn += size;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <parse_pdu+0x9c>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	4413      	add	r3, r2
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <parse_pdu+0x9c>)
 800146c:	6013      	str	r3, [r2, #0]
        if (rx_read_ptn >= rx_data_buff + uart_buff_size) {
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <parse_pdu+0x9c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <parse_pdu+0xa0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d302      	bcc.n	800147e <parse_pdu+0x52>
            rx_read_ptn = rx_data_buff;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <parse_pdu+0x9c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <parse_pdu+0x98>)
 800147c:	601a      	str	r2, [r3, #0]
        }

        if (strcmp(key, "ENCODERRPM") == 0) {
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4913      	ldr	r1, [pc, #76]	; (80014d0 <parse_pdu+0xa4>)
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe fea3 	bl	80001d0 <strcmp>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d113      	bne.n	80014b8 <parse_pdu+0x8c>
            rpm = atof(value) * 100;
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fdb0 	bl	8005ff8 <atof>
 8001498:	ec51 0b10 	vmov	r0, r1, d0
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <parse_pdu+0xa8>)
 80014a2:	f7ff f8b9 	bl	8000618 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fb4d 	bl	8000b4c <__aeabi_d2iz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <parse_pdu+0xac>)
 80014b6:	6013      	str	r3, [r2, #0]
        }
    }
}
 80014b8:	bf00      	nop
 80014ba:	3734      	adds	r7, #52	; 0x34
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	08009984 	.word	0x08009984
 80014c4:	20000364 	.word	0x20000364
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000396 	.word	0x20000396
 80014d0:	08009994 	.word	0x08009994
 80014d4:	40590000 	.word	0x40590000
 80014d8:	20000750 	.word	0x20000750

080014dc <parse_data>:

void parse_data() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	parse_pdu();
 80014e0:	f7ff ffa4 	bl	800142c <parse_pdu>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <MX_sht3x_init>:


bool MX_sht3x_init() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	sht3x1.i2c_handle = &hi2c1;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <MX_sht3x_init+0x1c>)
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <MX_sht3x_init+0x20>)
 80014f0:	601a      	str	r2, [r3, #0]
	sht3x1.device_address = 0x44;
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <MX_sht3x_init+0x1c>)
 80014f4:	2244      	movs	r2, #68	; 0x44
 80014f6:	809a      	strh	r2, [r3, #4]
	//sht3x1.device_address = ;

	return sht3x_init(&sht3x1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <MX_sht3x_init+0x1c>)
 80014fa:	f000 f87d 	bl	80015f8 <sht3x_init>
 80014fe:	4603      	mov	r3, r0

}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000035c 	.word	0x2000035c
 8001508:	200001f8 	.word	0x200001f8

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>

08001516 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8001516:	b480      	push	{r7}
 8001518:	b087      	sub	sp, #28
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001520:	23ff      	movs	r3, #255	; 0xff
 8001522:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	e020      	b.n	800156c <calculate_crc+0x56>
		crc ^= data[i];
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4413      	add	r3, r2
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	4053      	eors	r3, r2
 8001536:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e010      	b.n	8001560 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 800153e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	da06      	bge.n	8001554 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001550:	75fb      	strb	r3, [r7, #23]
 8001552:	e002      	b.n	800155a <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b07      	cmp	r3, #7
 8001564:	d9eb      	bls.n	800153e <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	3301      	adds	r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d3da      	bcc.n	800152a <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001574:	7dfb      	ldrb	r3, [r7, #23]
}
 8001576:	4618      	mov	r0, r3
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af02      	add	r7, sp, #8
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b29b      	uxth	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	733b      	strb	r3, [r7, #12]
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	889b      	ldrh	r3, [r3, #4]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	b299      	uxth	r1, r3
 80015aa:	f107 020c 	add.w	r2, r7, #12
 80015ae:	231e      	movs	r3, #30
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2302      	movs	r3, #2
 80015b4:	f001 f912 	bl	80027dc <HAL_I2C_Master_Transmit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <sht3x_send_command+0x42>
	}

	return true;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b29b      	uxth	r3, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <sht3x_init+0x1e>
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <sht3x_init+0x78>)
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <sht3x_init+0x7c>)
 800160e:	2138      	movs	r1, #56	; 0x38
 8001610:	4819      	ldr	r0, [pc, #100]	; (8001678 <sht3x_init+0x80>)
 8001612:	f004 fcd3 	bl	8005fbc <__assert_func>
	// TODO: Assert i2c frequency is not too high
	uint8_t status_reg_and_checksum[3];

	HAL_StatusTypeDef res = HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	889b      	ldrh	r3, [r3, #4]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b299      	uxth	r1, r3
 8001622:	231e      	movs	r3, #30
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2303      	movs	r3, #3
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2302      	movs	r3, #2
 8001632:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8001636:	f001 fadf 	bl	8002bf8 <HAL_I2C_Mem_Read>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
						  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT);

	if ( res != HAL_OK) {
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <sht3x_init+0x50>
		return false;
 8001644:	2300      	movs	r3, #0
 8001646:	e00e      	b.n	8001666 <sht3x_init+0x6e>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	2102      	movs	r1, #2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff61 	bl	8001516 <calculate_crc>
 8001654:	4603      	mov	r3, r0
 8001656:	73bb      	strb	r3, [r7, #14]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001658:	7abb      	ldrb	r3, [r7, #10]
 800165a:	7bba      	ldrb	r2, [r7, #14]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <sht3x_init+0x6c>
		return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e000      	b.n	8001666 <sht3x_init+0x6e>
	}

	return true;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	080099a0 	.word	0x080099a0
 8001674:	08009a00 	.word	0x08009a00
 8001678:	080099e0 	.word	0x080099e0

0800167c <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001688:	f642 4106 	movw	r1, #11270	; 0x2c06
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff ff78 	bl	8001582 <sht3x_send_command>

	HAL_Delay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 fcd0 	bl	8002038 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	889b      	ldrh	r3, [r3, #4]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	b299      	uxth	r1, r3
 80016a4:	f107 0214 	add.w	r2, r7, #20
 80016a8:	231e      	movs	r3, #30
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2306      	movs	r3, #6
 80016ae:	f001 f9ad 	bl	8002a0c <HAL_I2C_Master_Receive>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e04f      	b.n	800175c <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2102      	movs	r1, #2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff27 	bl	8001516 <calculate_crc>
 80016c8:	4603      	mov	r3, r0
 80016ca:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	3303      	adds	r3, #3
 80016d2:	2102      	movs	r1, #2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff1e 	bl	8001516 <calculate_crc>
 80016da:	4603      	mov	r3, r0
 80016dc:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 80016de:	7dbb      	ldrb	r3, [r7, #22]
 80016e0:	7ffa      	ldrb	r2, [r7, #31]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d103      	bne.n	80016ee <sht3x_read_temperature_and_humidity+0x72>
 80016e6:	7e7b      	ldrb	r3, [r7, #25]
 80016e8:	7fba      	ldrb	r2, [r7, #30]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d001      	beq.n	80016f2 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e034      	b.n	800175c <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 80016f2:	7d3b      	ldrb	r3, [r7, #20]
 80016f4:	7d7a      	ldrb	r2, [r7, #21]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff67 	bl	80015cc <uint8_to_uint16>
 80016fe:	4603      	mov	r3, r0
 8001700:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	7e3a      	ldrb	r2, [r7, #24]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5f 	bl	80015cc <uint8_to_uint16>
 800170e:	4603      	mov	r3, r0
 8001710:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001712:	8bbb      	ldrh	r3, [r7, #28]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001764 <sht3x_read_temperature_and_humidity+0xe8>
 8001720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001724:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001768 <sht3x_read_temperature_and_humidity+0xec>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800176c <sht3x_read_temperature_and_humidity+0xf0>
 8001730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800173a:	8b7b      	ldrh	r3, [r7, #26]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001744:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001770 <sht3x_read_temperature_and_humidity+0xf4>
 8001748:	ee27 7a87 	vmul.f32	s14, s15, s14
 800174c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001768 <sht3x_read_temperature_and_humidity+0xec>
 8001750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edc3 7a00 	vstr	s15, [r3]

	return true;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	432f0000 	.word	0x432f0000
 8001768:	477fff00 	.word	0x477fff00
 800176c:	42340000 	.word	0x42340000
 8001770:	42c80000 	.word	0x42c80000

08001774 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
	if (enable) {
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <sht3x_set_header_enable+0x20>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 8001786:	f243 016d 	movw	r1, #12397	; 0x306d
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fef9 	bl	8001582 <sht3x_send_command>
 8001790:	4603      	mov	r3, r0
 8001792:	e005      	b.n	80017a0 <sht3x_set_header_enable+0x2c>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 8001794:	f243 0166 	movw	r1, #12390	; 0x3066
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fef2 	bl	8001582 <sht3x_send_command>
 800179e:	4603      	mov	r3, r0
	}
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <tm1637Init+0x80>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <tm1637Init+0x80>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <tm1637Init+0x80>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <tm1637Init+0x80>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <tm1637Init+0x80>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <tm1637Init+0x80>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 80017f2:	2311      	movs	r3, #17
 80017f4:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 80017fa:	2320      	movs	r3, #32
 80017fc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4809      	ldr	r0, [pc, #36]	; (800182c <tm1637Init+0x84>)
 8001806:	f000 fdcb 	bl	80023a0 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 800180a:	2310      	movs	r3, #16
 800180c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <tm1637Init+0x84>)
 8001816:	f000 fdc3 	bl	80023a0 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 800181a:	2008      	movs	r0, #8
 800181c:	f000 f876 	bl	800190c <tm1637SetBrightness>
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	48000400 	.word	0x48000400

08001830 <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e032      	b.n	80018a6 <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4b30      	ldr	r3, [pc, #192]	; (8001904 <tm1637DisplayDecimal+0xd4>)
 8001844:	fb83 2301 	smull	r2, r3, r3, r1
 8001848:	109a      	asrs	r2, r3, #2
 800184a:	17cb      	asrs	r3, r1, #31
 800184c:	1ad2      	subs	r2, r2, r3
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	1aca      	subs	r2, r1, r3
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <tm1637DisplayDecimal+0xd8>)
 800185a:	5c99      	ldrb	r1, [r3, r2]
 800185c:	f107 020c 	add.w	r2, r7, #12
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	4413      	add	r3, r2
 8001864:	460a      	mov	r2, r1
 8001866:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d110      	bne.n	8001890 <tm1637DisplayDecimal+0x60>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8001874:	f107 020c 	add.w	r2, r7, #12
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001882:	b2d9      	uxtb	r1, r3
 8001884:	f107 020c 	add.w	r2, r7, #12
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4413      	add	r3, r2
 800188c:	460a      	mov	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <tm1637DisplayDecimal+0xd4>)
 8001894:	fb82 1203 	smull	r1, r2, r2, r3
 8001898:	1092      	asrs	r2, r2, #2
 800189a:	17db      	asrs	r3, r3, #31
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	ddc9      	ble.n	8001840 <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 80018ac:	f000 f843 	bl	8001936 <_tm1637Start>
    _tm1637WriteByte(0x40);
 80018b0:	2040      	movs	r0, #64	; 0x40
 80018b2:	f000 f872 	bl	800199a <_tm1637WriteByte>
    _tm1637ReadResult();
 80018b6:	f000 f860 	bl	800197a <_tm1637ReadResult>
    _tm1637Stop();
 80018ba:	f000 f849 	bl	8001950 <_tm1637Stop>

    _tm1637Start();
 80018be:	f000 f83a 	bl	8001936 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 80018c2:	20c0      	movs	r0, #192	; 0xc0
 80018c4:	f000 f869 	bl	800199a <_tm1637WriteByte>
    _tm1637ReadResult();
 80018c8:	f000 f857 	bl	800197a <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	e00e      	b.n	80018f0 <tm1637DisplayDecimal+0xc0>
        _tm1637WriteByte(digitArr[3 - i]);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f1c3 0303 	rsb	r3, r3, #3
 80018d8:	3318      	adds	r3, #24
 80018da:	443b      	add	r3, r7
 80018dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 f85a 	bl	800199a <_tm1637WriteByte>
        _tm1637ReadResult();
 80018e6:	f000 f848 	bl	800197a <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	3301      	adds	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	dded      	ble.n	80018d2 <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 80018f6:	f000 f82b 	bl	8001950 <_tm1637Stop>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	66666667 	.word	0x66666667
 8001908:	08009a0c 	.word	0x08009a0c

0800190c <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8001916:	f000 f80e 	bl	8001936 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	3b79      	subs	r3, #121	; 0x79
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f83a 	bl	800199a <_tm1637WriteByte>
    _tm1637ReadResult();
 8001926:	f000 f828 	bl	800197a <_tm1637ReadResult>
    _tm1637Stop();
 800192a:	f000 f811 	bl	8001950 <_tm1637Stop>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_tm1637Start>:

void _tm1637Start(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 800193a:	f000 f875 	bl	8001a28 <_tm1637ClkHigh>
    _tm1637DioHigh();
 800193e:	f000 f88b 	bl	8001a58 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8001942:	2002      	movs	r0, #2
 8001944:	f000 f853 	bl	80019ee <_tm1637DelayUsec>
    _tm1637DioLow();
 8001948:	f000 f892 	bl	8001a70 <_tm1637DioLow>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001954:	f000 f874 	bl	8001a40 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8001958:	2002      	movs	r0, #2
 800195a:	f000 f848 	bl	80019ee <_tm1637DelayUsec>
    _tm1637DioLow();
 800195e:	f000 f887 	bl	8001a70 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8001962:	2002      	movs	r0, #2
 8001964:	f000 f843 	bl	80019ee <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001968:	f000 f85e 	bl	8001a28 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 800196c:	2002      	movs	r0, #2
 800196e:	f000 f83e 	bl	80019ee <_tm1637DelayUsec>
    _tm1637DioHigh();
 8001972:	f000 f871 	bl	8001a58 <_tm1637DioHigh>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 800197e:	f000 f85f 	bl	8001a40 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8001982:	2005      	movs	r0, #5
 8001984:	f000 f833 	bl	80019ee <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8001988:	f000 f84e 	bl	8001a28 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 800198c:	2002      	movs	r0, #2
 800198e:	f000 f82e 	bl	80019ee <_tm1637DelayUsec>
    _tm1637ClkLow();
 8001992:	f000 f855 	bl	8001a40 <_tm1637ClkLow>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e019      	b.n	80019de <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 80019aa:	f000 f849 	bl	8001a40 <_tm1637ClkLow>
        if (b & 0x01) {
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 80019b8:	f000 f84e 	bl	8001a58 <_tm1637DioHigh>
 80019bc:	e001      	b.n	80019c2 <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 80019be:	f000 f857 	bl	8001a70 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f000 f813 	bl	80019ee <_tm1637DelayUsec>
        b >>= 1;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 80019ce:	f000 f82b 	bl	8001a28 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f000 f80b 	bl	80019ee <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b07      	cmp	r3, #7
 80019e2:	dde2      	ble.n	80019aa <_tm1637WriteByte+0x10>
    }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 80019f6:	e00c      	b.n	8001a12 <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 10; ++j) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e003      	b.n	8001a06 <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 80019fe:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	ddf8      	ble.n	80019fe <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ef      	bne.n	80019f8 <_tm1637DelayUsec+0xa>
        }
    }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2120      	movs	r1, #32
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <_tm1637ClkHigh+0x14>)
 8001a32:	f000 fe1f 	bl	8002674 <HAL_GPIO_WritePin>
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	48000400 	.word	0x48000400

08001a40 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2120      	movs	r1, #32
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <_tm1637ClkLow+0x14>)
 8001a4a:	f000 fe13 	bl	8002674 <HAL_GPIO_WritePin>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	48000400 	.word	0x48000400

08001a58 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2110      	movs	r1, #16
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <_tm1637DioHigh+0x14>)
 8001a62:	f000 fe07 	bl	8002674 <HAL_GPIO_WritePin>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	48000400 	.word	0x48000400

08001a70 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2110      	movs	r1, #16
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <_tm1637DioLow+0x14>)
 8001a7a:	f000 fdfb 	bl	8002674 <HAL_GPIO_WritePin>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	48000400 	.word	0x48000400

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x44>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_MspInit+0x44>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_MspInit+0x44>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_MspInit+0x44>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b09e      	sub	sp, #120	; 0x78
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2254      	movs	r2, #84	; 0x54
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 fa02 	bl	8006efa <memset>
  if(hi2c->Instance==I2C1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_I2C_MspInit+0xa4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d135      	bne.n	8001b6c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b00:	2340      	movs	r3, #64	; 0x40
 8001b02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fbb9 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b18:	f7ff fcf8 	bl	800150c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_I2C_MspInit+0xa8>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <HAL_I2C_MspInit+0xa8>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_I2C_MspInit+0xa8>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b34:	23c0      	movs	r3, #192	; 0xc0
 8001b36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b38:	2312      	movs	r3, #18
 8001b3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b44:	2304      	movs	r3, #4
 8001b46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <HAL_I2C_MspInit+0xac>)
 8001b50:	f000 fc26 	bl	80023a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_I2C_MspInit+0xa8>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_I2C_MspInit+0xa8>)
 8001b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_I2C_MspInit+0xa8>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3778      	adds	r7, #120	; 0x78
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40005400 	.word	0x40005400
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000400 	.word	0x48000400

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0a0      	sub	sp, #128	; 0x80
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	2254      	movs	r2, #84	; 0x54
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f005 f9aa 	bl	8006efa <memset>
  if(huart->Instance==USART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_UART_MspInit+0x158>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d140      	bne.n	8001c32 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fb61 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc8:	f7ff fca0 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bcc:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a3c      	ldr	r2, [pc, #240]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1c:	f000 fbc0 	bl	80023a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2025      	movs	r0, #37	; 0x25
 8001c26:	f000 fb06 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c2a:	2025      	movs	r0, #37	; 0x25
 8001c2c:	f000 fb1f 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c30:	e04d      	b.n	8001cce <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_UART_MspInit+0x160>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d148      	bne.n	8001cce <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fb1b 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001c54:	f7ff fc5a 	bl	800150c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c58:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_UART_MspInit+0x15c>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|VCP_TX_Pin;
 8001c88:	2306      	movs	r3, #6
 8001c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca6:	f000 fb7b 	bl	80023a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cca:	f000 fb69 	bl	80023a0 <HAL_GPIO_Init>
}
 8001cce:	bf00      	nop
 8001cd0:	3780      	adds	r7, #128	; 0x80
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40013800 	.word	0x40013800
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40004400 	.word	0x40004400

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f000 f962 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <USART1_IRQHandler+0x10>)
 8001d3e:	f002 febd 	bl	8004abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000024c 	.word	0x2000024c

08001d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_kill>:

int _kill(int pid, int sig)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d66:	f005 f929 	bl	8006fbc <__errno>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2216      	movs	r2, #22
 8001d6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_exit>:

void _exit (int status)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffe7 	bl	8001d5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d8e:	e7fe      	b.n	8001d8e <_exit+0x12>

08001d90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e00a      	b.n	8001db8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da2:	f3af 8000 	nop.w
 8001da6:	4601      	mov	r1, r0
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbf0      	blt.n	8001da2 <_read+0x12>
  }

  return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e009      	b.n	8001df0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbf1      	blt.n	8001ddc <_write+0x12>
  }
  return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_close>:

int _close(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_isatty>:

int _isatty(int file)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f005 f88e 	bl	8006fbc <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20010000 	.word	0x20010000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	20000754 	.word	0x20000754
 8001ed4:	200008a8 	.word	0x200008a8

08001ed8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f00:	f7ff ffea 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	; (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f005 f84d 	bl	8006fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2e:	f7ff f809 	bl	8000f44 <main>

08001f32 <LoopForever>:

LoopForever:
    b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f40:	08009e54 	.word	0x08009e54
  ldr r2, =_sbss
 8001f44:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f48:	200008a8 	.word	0x200008a8

08001f4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_IRQHandler>

08001f4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 f961 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f80e 	bl	8001f80 <HAL_InitTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e001      	b.n	8001f74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f70:	f7ff fd8a 	bl	8001a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f74:	79fb      	ldrb	r3, [r7, #7]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_InitTick+0x6c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_InitTick+0x70>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_InitTick+0x6c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f96d 	bl	800228a <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d809      	bhi.n	8001fd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc4:	f000 f937 	bl	8002236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_InitTick+0x74>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e007      	b.n	8001fe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e004      	b.n	8001fe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e001      	b.n	8001fe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000010 	.word	0x20000010
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	2000000c 	.word	0x2000000c

08001ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x20>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_IncTick+0x24>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000010 	.word	0x20000010
 800201c:	20000758 	.word	0x20000758

08002020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_GetTick+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000758 	.word	0x20000758

08002038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff ffee 	bl	8002020 <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002050:	d005      	beq.n	800205e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_Delay+0x44>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205e:	bf00      	nop
 8002060:	f7ff ffde 	bl	8002020 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d8f7      	bhi.n	8002060 <HAL_Delay+0x28>
  {
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000010 	.word	0x20000010

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff3e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff31 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d008      	beq.n	80022cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e022      	b.n	8002312 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 020e 	bic.w	r2, r2, #14
 80022da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f003 021c 	and.w	r2, r3, #28
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d005      	beq.n	8002342 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e029      	b.n	8002396 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 020e 	bic.w	r2, r2, #14
 8002350:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f003 021c 	and.w	r2, r3, #28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
    }
  }
  return status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ae:	e148      	b.n	8002642 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 813a 	beq.w	800263c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d005      	beq.n	80023e0 <HAL_GPIO_Init+0x40>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d130      	bne.n	8002442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002416:	2201      	movs	r2, #1
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0201 	and.w	r2, r3, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b03      	cmp	r3, #3
 800244c:	d017      	beq.n	800247e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d123      	bne.n	80024d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8094 	beq.w	800263c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <HAL_GPIO_Init+0x2c0>)
 8002516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002518:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_GPIO_Init+0x2c0>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6613      	str	r3, [r2, #96]	; 0x60
 8002520:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <HAL_GPIO_Init+0x2c0>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252c:	4a4d      	ldr	r2, [pc, #308]	; (8002664 <HAL_GPIO_Init+0x2c4>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002556:	d00d      	beq.n	8002574 <HAL_GPIO_Init+0x1d4>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a43      	ldr	r2, [pc, #268]	; (8002668 <HAL_GPIO_Init+0x2c8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d007      	beq.n	8002570 <HAL_GPIO_Init+0x1d0>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a42      	ldr	r2, [pc, #264]	; (800266c <HAL_GPIO_Init+0x2cc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_GPIO_Init+0x1cc>
 8002568:	2302      	movs	r3, #2
 800256a:	e004      	b.n	8002576 <HAL_GPIO_Init+0x1d6>
 800256c:	2307      	movs	r3, #7
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x1d6>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_GPIO_Init+0x1d6>
 8002574:	2300      	movs	r3, #0
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	4093      	lsls	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002586:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_GPIO_Init+0x2c4>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b8:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e2:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002636:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f aeaf 	bne.w	80023b0 <HAL_GPIO_Init+0x10>
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002690:	e002      	b.n	8002698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e08d      	b.n	80027d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fa00 	bl	8001ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002704:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	e006      	b.n	800272c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800272a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d108      	bne.n	8002746 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	e007      	b.n	8002756 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002754:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002768:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002778:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69d9      	ldr	r1, [r3, #28]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	461a      	mov	r2, r3
 80027e8:	460b      	mov	r3, r1
 80027ea:	817b      	strh	r3, [r7, #10]
 80027ec:	4613      	mov	r3, r2
 80027ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 80fd 	bne.w	80029f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_I2C_Master_Transmit+0x30>
 8002808:	2302      	movs	r3, #2
 800280a:	e0f6      	b.n	80029fa <HAL_I2C_Master_Transmit+0x21e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002814:	f7ff fc04 	bl	8002020 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2319      	movs	r3, #25
 8002820:	2201      	movs	r2, #1
 8002822:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fb78 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0e1      	b.n	80029fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2221      	movs	r2, #33	; 0x21
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2210      	movs	r2, #16
 8002842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	893a      	ldrh	r2, [r7, #8]
 8002856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	2bff      	cmp	r3, #255	; 0xff
 8002866:	d906      	bls.n	8002876 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	22ff      	movs	r2, #255	; 0xff
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800286e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e007      	b.n	8002886 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d024      	beq.n	80028d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	8979      	ldrh	r1, [r7, #10]
 80028ca:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <HAL_I2C_Master_Transmit+0x228>)
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fd61 	bl	8003398 <I2C_TransferConfig>
 80028d6:	e066      	b.n	80029a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	8979      	ldrh	r1, [r7, #10]
 80028e0:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <HAL_I2C_Master_Transmit+0x228>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fd56 	bl	8003398 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028ec:	e05b      	b.n	80029a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	6a39      	ldr	r1, [r7, #32]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fb61 	bl	8002fba <I2C_WaitOnTXISFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07b      	b.n	80029fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d034      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0x1ca>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d130      	bne.n	80029a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2200      	movs	r2, #0
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fae4 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e04d      	b.n	80029fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	2bff      	cmp	r3, #255	; 0xff
 8002966:	d90e      	bls.n	8002986 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	b2da      	uxtb	r2, r3
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	2300      	movs	r3, #0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fd0a 	bl	8003398 <I2C_TransferConfig>
 8002984:	e00f      	b.n	80029a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	b2da      	uxtb	r2, r3
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	2300      	movs	r3, #0
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fcf9 	bl	8003398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d19e      	bne.n	80028ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	6a39      	ldr	r1, [r7, #32]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb49 	bl	800304c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e01a      	b.n	80029fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2220      	movs	r2, #32
 80029ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_I2C_Master_Transmit+0x22c>)
 80029d8:	400b      	ands	r3, r1
 80029da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	80002000 	.word	0x80002000
 8002a08:	fe00e800 	.word	0xfe00e800

08002a0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	461a      	mov	r2, r3
 8002a18:	460b      	mov	r3, r1
 8002a1a:	817b      	strh	r3, [r7, #10]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	f040 80db 	bne.w	8002be4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_I2C_Master_Receive+0x30>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0d4      	b.n	8002be6 <HAL_I2C_Master_Receive+0x1da>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a44:	f7ff faec 	bl	8002020 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2319      	movs	r3, #25
 8002a50:	2201      	movs	r2, #1
 8002a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fa60 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0bf      	b.n	8002be6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2222      	movs	r2, #34	; 0x22
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2210      	movs	r2, #16
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	893a      	ldrh	r2, [r7, #8]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2bff      	cmp	r3, #255	; 0xff
 8002a96:	d90e      	bls.n	8002ab6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	22ff      	movs	r2, #255	; 0xff
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	8979      	ldrh	r1, [r7, #10]
 8002aa6:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <HAL_I2C_Master_Receive+0x1e4>)
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fc72 	bl	8003398 <I2C_TransferConfig>
 8002ab4:	e06d      	b.n	8002b92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <HAL_I2C_Master_Receive+0x1e4>)
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fc61 	bl	8003398 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ad6:	e05c      	b.n	8002b92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	6a39      	ldr	r1, [r7, #32]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 faf9 	bl	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e07c      	b.n	8002be6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d034      	beq.n	8002b92 <HAL_I2C_Master_Receive+0x186>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d130      	bne.n	8002b92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2200      	movs	r2, #0
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f9ee 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e04d      	b.n	8002be6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2bff      	cmp	r3, #255	; 0xff
 8002b52:	d90e      	bls.n	8002b72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	22ff      	movs	r2, #255	; 0xff
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	8979      	ldrh	r1, [r7, #10]
 8002b62:	2300      	movs	r3, #0
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fc14 	bl	8003398 <I2C_TransferConfig>
 8002b70:	e00f      	b.n	8002b92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	8979      	ldrh	r1, [r7, #10]
 8002b84:	2300      	movs	r3, #0
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fc03 	bl	8003398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d19d      	bne.n	8002ad8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	6a39      	ldr	r1, [r7, #32]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fa53 	bl	800304c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e01a      	b.n	8002be6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_I2C_Master_Receive+0x1e8>)
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	80002400 	.word	0x80002400
 8002bf4:	fe00e800 	.word	0xfe00e800

08002bf8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	f040 80fd 	bne.w	8002e1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x34>
 8002c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0f1      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x4e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0ea      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c4e:	f7ff f9e7 	bl	8002020 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2319      	movs	r3, #25
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f95b 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d5      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2222      	movs	r2, #34	; 0x22
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c98:	88f8      	ldrh	r0, [r7, #6]
 8002c9a:	893a      	ldrh	r2, [r7, #8]
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f8bf 	bl	8002e2c <I2C_RequestMemoryRead>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0ad      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2bff      	cmp	r3, #255	; 0xff
 8002cc8:	d90e      	bls.n	8002ce8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <HAL_I2C_Mem_Read+0x22c>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fb59 	bl	8003398 <I2C_TransferConfig>
 8002ce6:	e00f      	b.n	8002d08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_I2C_Mem_Read+0x22c>)
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fb48 	bl	8003398 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2104      	movs	r1, #4
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f902 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07c      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d034      	beq.n	8002dc8 <HAL_I2C_Mem_Read+0x1d0>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d130      	bne.n	8002dc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f8d3 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04d      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2bff      	cmp	r3, #255	; 0xff
 8002d88:	d90e      	bls.n	8002da8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 faf9 	bl	8003398 <I2C_TransferConfig>
 8002da6:	e00f      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fae8 	bl	8003398 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d19a      	bne.n	8002d08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f938 	bl	800304c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e01a      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2220      	movs	r2, #32
 8002dec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_I2C_Mem_Read+0x230>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	80002400 	.word	0x80002400
 8002e28:	fe00e800 	.word	0xfe00e800

08002e2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <I2C_RequestMemoryRead+0xa4>)
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2300      	movs	r3, #0
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 faa0 	bl	8003398 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f8ac 	bl	8002fba <I2C_WaitOnTXISFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e02c      	b.n	8002ec6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e72:	893b      	ldrh	r3, [r7, #8]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e7c:	e015      	b.n	8002eaa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e7e:	893b      	ldrh	r3, [r7, #8]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f892 	bl	8002fba <I2C_WaitOnTXISFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e012      	b.n	8002ec6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f831 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	80002000 	.word	0x80002000

08002ed4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d103      	bne.n	8002ef2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d007      	beq.n	8002f10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	619a      	str	r2, [r3, #24]
  }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2c:	e031      	b.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f34:	d02d      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7ff f873 	bl	8002020 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d122      	bne.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d113      	bne.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00f      	b.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d0be      	beq.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fc6:	e035      	b.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
  {
    /* Check if an error is detected */
	  HAL_StatusTypeDef a = I2C_IsErrorOccurred(hi2c, Timeout, Tickstart);
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f903 	bl	80031d8 <I2C_IsErrorOccurred>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    if (a != HAL_OK)
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e031      	b.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe6:	d025      	beq.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7ff f81a 	bl	8002020 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_WaitOnTXISFlagUntilTimeout+0x44>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11a      	bne.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d013      	beq.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d1c2      	bne.n	8002fc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003058:	e02f      	b.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8ba 	bl	80031d8 <I2C_IsErrorOccurred>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e02d      	b.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe ffd7 	bl	8002020 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11a      	bne.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d013      	beq.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e007      	b.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d1c8      	bne.n	800305a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e0:	e06b      	b.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f876 	bl	80031d8 <I2C_IsErrorOccurred>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e069      	b.n	80031ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d138      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d105      	bne.n	800311e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e055      	b.n	80031ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b10      	cmp	r3, #16
 800312a:	d107      	bne.n	800313c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2210      	movs	r2, #16
 8003132:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2204      	movs	r2, #4
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
 800313a:	e002      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2220      	movs	r2, #32
 8003148:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003156:	400b      	ands	r3, r1
 8003158:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e029      	b.n	80031ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fe ff53 	bl	8002020 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d00f      	beq.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e007      	b.n	80031ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d18c      	bne.n	80030e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	fe00e800 	.word	0xfe00e800

080031d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d068      	beq.n	80032d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2210      	movs	r2, #16
 800320a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800320c:	e049      	b.n	80032a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003214:	d045      	beq.n	80032a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fe ff03 	bl	8002020 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_IsErrorOccurred+0x54>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d13a      	bne.n	80032a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800323e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	d121      	bne.n	8003294 <I2C_IsErrorOccurred+0xbc>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003256:	d01d      	beq.n	8003294 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b20      	cmp	r3, #32
 800325c:	d01a      	beq.n	8003294 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800326e:	f7fe fed7 	bl	8002020 <HAL_GetTick>
 8003272:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003274:	e00e      	b.n	8003294 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003276:	f7fe fed3 	bl	8002020 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b19      	cmp	r3, #25
 8003282:	d907      	bls.n	8003294 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f043 0320 	orr.w	r3, r3, #32
 800328a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003292:	e006      	b.n	80032a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d1e9      	bne.n	8003276 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d003      	beq.n	80032b8 <I2C_IsErrorOccurred+0xe0>
 80032b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0aa      	beq.n	800320e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d103      	bne.n	80032c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2220      	movs	r2, #32
 80032c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00b      	beq.n	8003344 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff fdc1 	bl	8002ed4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <I2C_IsErrorOccurred+0x1bc>)
 800335e:	400b      	ands	r3, r1
 8003360:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800338a:	4618      	mov	r0, r3
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	fe00e800 	.word	0xfe00e800

08003398 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	4613      	mov	r3, r2
 80033a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b0:	7a7b      	ldrb	r3, [r7, #9]
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	0d5b      	lsrs	r3, r3, #21
 80033d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <I2C_TransferConfig+0x60>)
 80033d8:	430b      	orrs	r3, r1
 80033da:	43db      	mvns	r3, r3
 80033dc:	ea02 0103 	and.w	r1, r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	03ff63ff 	.word	0x03ff63ff

080033fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	d138      	bne.n	8003484 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800341c:	2302      	movs	r3, #2
 800341e:	e032      	b.n	8003486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800344e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d139      	bne.n	800351c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e033      	b.n	800351e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2224      	movs	r2, #36	; 0x24
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000

0800354c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_PWREx_GetVoltageRange+0x18>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40007000 	.word	0x40007000

08003568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003576:	d130      	bne.n	80035da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003584:	d038      	beq.n	80035f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800358e:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003594:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2232      	movs	r2, #50	; 0x32
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0c9b      	lsrs	r3, r3, #18
 80035a8:	3301      	adds	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ac:	e002      	b.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c0:	d102      	bne.n	80035c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f2      	bne.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d110      	bne.n	80035f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d007      	beq.n	80035f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035f0:	4a05      	ldr	r2, [pc, #20]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40007000 	.word	0x40007000
 800360c:	20000008 	.word	0x20000008
 8003610:	431bde83 	.word	0x431bde83

08003614 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f000 bc02 	b.w	8003e2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003628:	4b96      	ldr	r3, [pc, #600]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003632:	4b94      	ldr	r3, [pc, #592]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80e4 	beq.w	8003812 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_RCC_OscConfig+0x4c>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b0c      	cmp	r3, #12
 8003654:	f040 808b 	bne.w	800376e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 8087 	bne.w	800376e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003660:	4b88      	ldr	r3, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x64>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e3d9      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	4b81      	ldr	r3, [pc, #516]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <HAL_RCC_OscConfig+0x7e>
 8003688:	4b7e      	ldr	r3, [pc, #504]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003690:	e005      	b.n	800369e <HAL_RCC_OscConfig+0x8a>
 8003692:	4b7c      	ldr	r3, [pc, #496]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369e:	4293      	cmp	r3, r2
 80036a0:	d223      	bcs.n	80036ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fd8c 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e3ba      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b6:	4b73      	ldr	r3, [pc, #460]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a72      	ldr	r2, [pc, #456]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b70      	ldr	r3, [pc, #448]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	496d      	ldr	r1, [pc, #436]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d4:	4b6b      	ldr	r3, [pc, #428]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	4968      	ldr	r1, [pc, #416]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	e025      	b.n	8003736 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ea:	4b66      	ldr	r3, [pc, #408]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a65      	ldr	r2, [pc, #404]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b63      	ldr	r3, [pc, #396]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4960      	ldr	r1, [pc, #384]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003708:	4b5e      	ldr	r3, [pc, #376]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	495b      	ldr	r1, [pc, #364]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fd4c 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e37a      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003736:	f000 fc81 	bl	800403c <HAL_RCC_GetSysClockFreq>
 800373a:	4602      	mov	r2, r0
 800373c:	4b51      	ldr	r3, [pc, #324]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	4950      	ldr	r1, [pc, #320]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003748:	5ccb      	ldrb	r3, [r1, r3]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a4e      	ldr	r2, [pc, #312]	; (800388c <HAL_RCC_OscConfig+0x278>)
 8003754:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003756:	4b4e      	ldr	r3, [pc, #312]	; (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fc10 	bl	8001f80 <HAL_InitTick>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d052      	beq.n	8003810 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	e35e      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d032      	beq.n	80037dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a42      	ldr	r2, [pc, #264]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003782:	f7fe fc4d 	bl	8002020 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800378a:	f7fe fc49 	bl	8002020 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e347      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800379c:	4b39      	ldr	r3, [pc, #228]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a35      	ldr	r2, [pc, #212]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037ae:	f043 0308 	orr.w	r3, r3, #8
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b33      	ldr	r3, [pc, #204]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4930      	ldr	r1, [pc, #192]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c6:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	492b      	ldr	r1, [pc, #172]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
 80037da:	e01a      	b.n	8003812 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037dc:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037e8:	f7fe fc1a 	bl	8002020 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037f0:	f7fe fc16 	bl	8002020 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e314      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1dc>
 800380e:	e000      	b.n	8003812 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d073      	beq.n	8003906 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x21c>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d10e      	bne.n	8003848 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d063      	beq.n	8003904 <HAL_RCC_OscConfig+0x2f0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d15f      	bne.n	8003904 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e2f1      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x24c>
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e025      	b.n	80038ac <HAL_RCC_OscConfig+0x298>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003868:	d114      	bne.n	8003894 <HAL_RCC_OscConfig+0x280>
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a05      	ldr	r2, [pc, #20]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a02      	ldr	r2, [pc, #8]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e013      	b.n	80038ac <HAL_RCC_OscConfig+0x298>
 8003884:	40021000 	.word	0x40021000
 8003888:	08009a20 	.word	0x08009a20
 800388c:	20000008 	.word	0x20000008
 8003890:	2000000c 	.word	0x2000000c
 8003894:	4ba0      	ldr	r3, [pc, #640]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a9f      	ldr	r2, [pc, #636]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 800389a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b9d      	ldr	r3, [pc, #628]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a9c      	ldr	r2, [pc, #624]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80038a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe fbb4 	bl	8002020 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fe fbb0 	bl	8002020 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e2ae      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ce:	4b92      	ldr	r3, [pc, #584]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x2a8>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe fba0 	bl	8002020 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fe fb9c 	bl	8002020 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e29a      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f6:	4b88      	ldr	r3, [pc, #544]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x2d0>
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d060      	beq.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d005      	beq.n	8003924 <HAL_RCC_OscConfig+0x310>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d119      	bne.n	8003952 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d116      	bne.n	8003952 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003924:	4b7c      	ldr	r3, [pc, #496]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_OscConfig+0x328>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e277      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	4b76      	ldr	r3, [pc, #472]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	4973      	ldr	r1, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003950:	e040      	b.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d023      	beq.n	80039a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800395a:	4b6f      	ldr	r3, [pc, #444]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6e      	ldr	r2, [pc, #440]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fe fb5b 	bl	8002020 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396e:	f7fe fb57 	bl	8002020 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e255      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003980:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b62      	ldr	r3, [pc, #392]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	495f      	ldr	r1, [pc, #380]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
 80039a0:	e018      	b.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a2:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5c      	ldr	r2, [pc, #368]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80039a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fe fb37 	bl	8002020 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe fb33 	bl	8002020 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e231      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e8:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fb12 	bl	8002020 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fe fb0e 	bl	8002020 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e20c      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a12:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ef      	beq.n	8003a00 <HAL_RCC_OscConfig+0x3ec>
 8003a20:	e01b      	b.n	8003a5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a22:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a28:	4a3b      	ldr	r2, [pc, #236]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe faf5 	bl	8002020 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fe faf1 	bl	8002020 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1ef      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a4c:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80a6 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a6c:	4b2a      	ldr	r3, [pc, #168]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10d      	bne.n	8003a94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6593      	str	r3, [r2, #88]	; 0x58
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a90:	2301      	movs	r3, #1
 8003a92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a94:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCC_OscConfig+0x508>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d118      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_RCC_OscConfig+0x508>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_RCC_OscConfig+0x508>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aac:	f7fe fab8 	bl	8002020 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab4:	f7fe fab4 	bl	8002020 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1b2      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <HAL_RCC_OscConfig+0x508>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d108      	bne.n	8003aec <HAL_RCC_OscConfig+0x4d8>
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aea:	e029      	b.n	8003b40 <HAL_RCC_OscConfig+0x52c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d115      	bne.n	8003b20 <HAL_RCC_OscConfig+0x50c>
 8003af4:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	4a03      	ldr	r2, [pc, #12]	; (8003b18 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b14:	e014      	b.n	8003b40 <HAL_RCC_OscConfig+0x52c>
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	4b9a      	ldr	r3, [pc, #616]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	4a99      	ldr	r2, [pc, #612]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b30:	4b96      	ldr	r3, [pc, #600]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	4a95      	ldr	r2, [pc, #596]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fe fa6a 	bl	8002020 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fe fa66 	bl	8002020 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e162      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b66:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ed      	beq.n	8003b50 <HAL_RCC_OscConfig+0x53c>
 8003b74:	e015      	b.n	8003ba2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fe fa53 	bl	8002020 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fe fa4f 	bl	8002020 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e14b      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b94:	4b7d      	ldr	r3, [pc, #500]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ed      	bne.n	8003b7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b78      	ldr	r3, [pc, #480]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	4a77      	ldr	r2, [pc, #476]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d03c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bc8:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bce:	4a6f      	ldr	r2, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fe fa22 	bl	8002020 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be0:	f7fe fa1e 	bl	8002020 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e11c      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bf2:	4b66      	ldr	r3, [pc, #408]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ef      	beq.n	8003be0 <HAL_RCC_OscConfig+0x5cc>
 8003c00:	e01b      	b.n	8003c3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c02:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c08:	4a60      	ldr	r2, [pc, #384]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7fe fa05 	bl	8002020 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c1a:	f7fe fa01 	bl	8002020 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0ff      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c2c:	4b57      	ldr	r3, [pc, #348]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ef      	bne.n	8003c1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80f3 	beq.w	8003e2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	f040 80c9 	bne.w	8003de0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c4e:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0203 	and.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d12c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d123      	bne.n	8003cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d11b      	bne.n	8003cbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d113      	bne.n	8003cbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d109      	bne.n	8003cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d06b      	beq.n	8003d94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d062      	beq.n	8003d88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cc2:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0ac      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2d      	ldr	r2, [pc, #180]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cde:	f7fe f99f 	bl	8002020 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fe f99b 	bl	8002020 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e099      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCC_OscConfig+0x77c>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d14:	3a01      	subs	r2, #1
 8003d16:	0112      	lsls	r2, r2, #4
 8003d18:	4311      	orrs	r1, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d1e:	0212      	lsls	r2, r2, #8
 8003d20:	4311      	orrs	r1, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d26:	0852      	lsrs	r2, r2, #1
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	0552      	lsls	r2, r2, #21
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d32:	0852      	lsrs	r2, r2, #1
 8003d34:	3a01      	subs	r2, #1
 8003d36:	0652      	lsls	r2, r2, #25
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d3e:	06d2      	lsls	r2, r2, #27
 8003d40:	430a      	orrs	r2, r1
 8003d42:	4912      	ldr	r1, [pc, #72]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d54:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d60:	f7fe f95e 	bl	8002020 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe f95a 	bl	8002020 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e058      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7a:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_OscConfig+0x778>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d86:	e050      	b.n	8003e2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e04f      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d144      	bne.n	8003e2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003da0:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003db8:	f7fe f932 	bl	8002020 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fe f92e 	bl	8002020 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e02c      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x7ac>
 8003dde:	e024      	b.n	8003e2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d01f      	beq.n	8003e26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fe f915 	bl	8002020 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe f911 	bl	8002020 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e00f      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4905      	ldr	r1, [pc, #20]	; (8003e34 <HAL_RCC_OscConfig+0x820>)
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_OscConfig+0x824>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]
 8003e24:	e001      	b.n	8003e2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	feeefffc 	.word	0xfeeefffc

08003e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0e7      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e50:	4b75      	ldr	r3, [pc, #468]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d910      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b72      	ldr	r3, [pc, #456]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 0207 	bic.w	r2, r3, #7
 8003e66:	4970      	ldr	r1, [pc, #448]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b6e      	ldr	r3, [pc, #440]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0cf      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	4b66      	ldr	r3, [pc, #408]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d908      	bls.n	8003eae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9c:	4b63      	ldr	r3, [pc, #396]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4960      	ldr	r1, [pc, #384]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04c      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec2:	4b5a      	ldr	r3, [pc, #360]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0a6      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d115      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e09a      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ef2:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e08e      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f02:	4b4a      	ldr	r3, [pc, #296]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e086      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 0203 	bic.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4943      	ldr	r1, [pc, #268]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f24:	f7fe f87c 	bl	8002020 <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2c:	f7fe f878 	bl	8002020 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e06e      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 020c 	and.w	r2, r3, #12
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1eb      	bne.n	8003f2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d208      	bcs.n	8003f82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f70:	4b2e      	ldr	r3, [pc, #184]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	492b      	ldr	r1, [pc, #172]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d210      	bcs.n	8003fb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f90:	4b25      	ldr	r3, [pc, #148]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 0207 	bic.w	r2, r3, #7
 8003f98:	4923      	ldr	r1, [pc, #140]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCC_ClockConfig+0x1ec>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e036      	b.n	8004020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4918      	ldr	r1, [pc, #96]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4910      	ldr	r1, [pc, #64]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff0:	f000 f824 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	490b      	ldr	r1, [pc, #44]	; (8004030 <HAL_RCC_ClockConfig+0x1f4>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
 800400c:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1f8>)
 800400e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1fc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fd ffb3 	bl	8001f80 <HAL_InitTick>
 800401a:	4603      	mov	r3, r0
 800401c:	72fb      	strb	r3, [r7, #11]

  return status;
 800401e:	7afb      	ldrb	r3, [r7, #11]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
 8004030:	08009a20 	.word	0x08009a20
 8004034:	20000008 	.word	0x20000008
 8004038:	2000000c 	.word	0x2000000c

0800403c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	b089      	sub	sp, #36	; 0x24
 8004040:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404a:	4b3e      	ldr	r3, [pc, #248]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004054:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x34>
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d121      	bne.n	80040ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d11e      	bne.n	80040ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004070:	4b34      	ldr	r3, [pc, #208]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d107      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800407c:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 800407e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e005      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_RCC_GetSysClockFreq+0x10c>)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10d      	bne.n	80040c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d102      	bne.n	80040ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <HAL_RCC_GetSysClockFreq+0x110>)
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	e004      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c0:	4b23      	ldr	r3, [pc, #140]	; (8004150 <HAL_RCC_GetSysClockFreq+0x114>)
 80040c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d134      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ca:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d003      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0xac>
 80040e0:	e005      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <HAL_RCC_GetSysClockFreq+0x110>)
 80040e4:	617b      	str	r3, [r7, #20]
      break;
 80040e6:	e005      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ea:	617b      	str	r3, [r7, #20]
      break;
 80040ec:	e002      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	617b      	str	r3, [r7, #20]
      break;
 80040f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	3301      	adds	r3, #1
 8004100:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	fb03 f202 	mul.w	r2, r3, r2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_RCC_GetSysClockFreq+0x108>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	0e5b      	lsrs	r3, r3, #25
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	3301      	adds	r3, #1
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004134:	69bb      	ldr	r3, [r7, #24]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	08009a38 	.word	0x08009a38
 800414c:	00f42400 	.word	0x00f42400
 8004150:	007a1200 	.word	0x007a1200

08004154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_RCC_GetHCLKFreq+0x14>)
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000008 	.word	0x20000008

0800416c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004170:	f7ff fff0 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	4904      	ldr	r1, [pc, #16]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000
 8004194:	08009a30 	.word	0x08009a30

08004198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800419c:	f7ff ffda 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0adb      	lsrs	r3, r3, #11
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4904      	ldr	r1, [pc, #16]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	08009a30 	.word	0x08009a30

080041c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041dc:	f7ff f9b6 	bl	800354c <HAL_PWREx_GetVoltageRange>
 80041e0:	6178      	str	r0, [r7, #20]
 80041e2:	e014      	b.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6593      	str	r3, [r2, #88]	; 0x58
 80041f0:	4b22      	ldr	r3, [pc, #136]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041fc:	f7ff f9a6 	bl	800354c <HAL_PWREx_GetVoltageRange>
 8004200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	4a1d      	ldr	r2, [pc, #116]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004214:	d10b      	bne.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d919      	bls.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2ba0      	cmp	r3, #160	; 0xa0
 8004220:	d902      	bls.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004222:	2302      	movs	r3, #2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e013      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004228:	2301      	movs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e010      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d902      	bls.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004234:	2303      	movs	r3, #3
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e00a      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d102      	bne.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004240:	2302      	movs	r3, #2
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e004      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b70      	cmp	r3, #112	; 0x70
 800424a:	d101      	bne.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800424c:	2301      	movs	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 0207 	bic.w	r2, r3, #7
 8004258:	4909      	ldr	r1, [pc, #36]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40022000 	.word	0x40022000

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800428c:	2300      	movs	r3, #0
 800428e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004290:	2300      	movs	r3, #0
 8004292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429c:	2b00      	cmp	r3, #0
 800429e:	d031      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a8:	d01a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80042aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ae:	d814      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b8:	d10f      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80042ba:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	4a5c      	ldr	r2, [pc, #368]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c6:	e00c      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f9de 	bl	8004690 <RCCEx_PLLSAI1_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	74fb      	strb	r3, [r7, #19]
      break;
 80042de:	e000      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80042e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e8:	4b51      	ldr	r3, [pc, #324]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	494e      	ldr	r1, [pc, #312]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042fe:	e001      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 809e 	beq.w	800444e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004316:	4b46      	ldr	r3, [pc, #280]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432c:	4b40      	ldr	r3, [pc, #256]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	4a3f      	ldr	r2, [pc, #252]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004336:	6593      	str	r3, [r2, #88]	; 0x58
 8004338:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004344:	2301      	movs	r3, #1
 8004346:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004348:	4b3a      	ldr	r3, [pc, #232]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a39      	ldr	r2, [pc, #228]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004354:	f7fd fe64 	bl	8002020 <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800435a:	e009      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7fd fe60 	bl	8002020 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d902      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	74fb      	strb	r3, [r7, #19]
        break;
 800436e:	e005      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004370:	4b30      	ldr	r3, [pc, #192]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ef      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d15a      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004382:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01e      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	429a      	cmp	r2, r3
 800439c:	d019      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043aa:	4b21      	ldr	r3, [pc, #132]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ba:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043ca:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d016      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fe20 	bl	8002020 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e2:	e00b      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fd fe1c 	bl	8002020 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d902      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	74fb      	strb	r3, [r7, #19]
            break;
 80043fa:	e006      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ec      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441e:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004426:	e009      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443c:	7c7b      	ldrb	r3, [r7, #17]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b8a      	ldr	r3, [pc, #552]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	4a89      	ldr	r2, [pc, #548]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800445a:	4b84      	ldr	r3, [pc, #528]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f023 0203 	bic.w	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4980      	ldr	r1, [pc, #512]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800447c:	4b7b      	ldr	r3, [pc, #492]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 020c 	bic.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	4978      	ldr	r1, [pc, #480]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800449e:	4b73      	ldr	r3, [pc, #460]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	496f      	ldr	r1, [pc, #444]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044c0:	4b6a      	ldr	r3, [pc, #424]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	4967      	ldr	r1, [pc, #412]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044e2:	4b62      	ldr	r3, [pc, #392]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	495e      	ldr	r1, [pc, #376]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	4956      	ldr	r1, [pc, #344]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004526:	4b51      	ldr	r3, [pc, #324]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	494d      	ldr	r1, [pc, #308]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d028      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004548:	4b48      	ldr	r3, [pc, #288]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4945      	ldr	r1, [pc, #276]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004566:	d106      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004568:	4b40      	ldr	r3, [pc, #256]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a3f      	ldr	r2, [pc, #252]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004572:	60d3      	str	r3, [r2, #12]
 8004574:	e011      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800457e:	d10c      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f882 	bl	8004690 <RCCEx_PLLSAI1_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d028      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045a6:	4b31      	ldr	r3, [pc, #196]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	492d      	ldr	r1, [pc, #180]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c4:	d106      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c6:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	4a28      	ldr	r2, [pc, #160]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d0:	60d3      	str	r3, [r2, #12]
 80045d2:	e011      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f853 	bl	8004690 <RCCEx_PLLSAI1_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01c      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004612:	4916      	ldr	r1, [pc, #88]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004622:	d10c      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f830 	bl	8004690 <RCCEx_PLLSAI1_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004658:	4904      	ldr	r1, [pc, #16]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004660:	7cbb      	ldrb	r3, [r7, #18]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000

08004670 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800467a:	f043 0304 	orr.w	r3, r3, #4
 800467e:	6013      	str	r3, [r2, #0]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40021000 	.word	0x40021000

08004690 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800469e:	4b74      	ldr	r3, [pc, #464]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046aa:	4b71      	ldr	r3, [pc, #452]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0203 	and.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d10d      	bne.n	80046d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
       ||
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046c2:	4b6b      	ldr	r3, [pc, #428]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
       ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d047      	beq.n	8004766 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
 80046da:	e044      	b.n	8004766 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d018      	beq.n	8004716 <RCCEx_PLLSAI1_Config+0x86>
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d825      	bhi.n	8004734 <RCCEx_PLLSAI1_Config+0xa4>
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d002      	beq.n	80046f2 <RCCEx_PLLSAI1_Config+0x62>
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d009      	beq.n	8004704 <RCCEx_PLLSAI1_Config+0x74>
 80046f0:	e020      	b.n	8004734 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046f2:	4b5f      	ldr	r3, [pc, #380]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11d      	bne.n	800473a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004702:	e01a      	b.n	800473a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004704:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d116      	bne.n	800473e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004714:	e013      	b.n	800473e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004716:	4b56      	ldr	r3, [pc, #344]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004722:	4b53      	ldr	r3, [pc, #332]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004732:	e006      	b.n	8004742 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      break;
 8004738:	e004      	b.n	8004744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800473a:	bf00      	nop
 800473c:	e002      	b.n	8004744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004742:	bf00      	nop
    }

    if(status == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10d      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800474a:	4b49      	ldr	r3, [pc, #292]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6819      	ldr	r1, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	430b      	orrs	r3, r1
 8004760:	4943      	ldr	r1, [pc, #268]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d17c      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800476c:	4b40      	ldr	r3, [pc, #256]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a3f      	ldr	r2, [pc, #252]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd fc52 	bl	8002020 <HAL_GetTick>
 800477c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800477e:	e009      	b.n	8004794 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004780:	f7fd fc4e 	bl	8002020 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d902      	bls.n	8004794 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	73fb      	strb	r3, [r7, #15]
        break;
 8004792:	e005      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1ef      	bne.n	8004780 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d15f      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d110      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ac:	4b30      	ldr	r3, [pc, #192]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80047b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6892      	ldr	r2, [r2, #8]
 80047bc:	0211      	lsls	r1, r2, #8
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68d2      	ldr	r2, [r2, #12]
 80047c2:	06d2      	lsls	r2, r2, #27
 80047c4:	430a      	orrs	r2, r1
 80047c6:	492a      	ldr	r1, [pc, #168]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	610b      	str	r3, [r1, #16]
 80047cc:	e027      	b.n	800481e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d112      	bne.n	80047fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047d4:	4b26      	ldr	r3, [pc, #152]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	0211      	lsls	r1, r2, #8
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6912      	ldr	r2, [r2, #16]
 80047ea:	0852      	lsrs	r2, r2, #1
 80047ec:	3a01      	subs	r2, #1
 80047ee:	0552      	lsls	r2, r2, #21
 80047f0:	430a      	orrs	r2, r1
 80047f2:	491f      	ldr	r1, [pc, #124]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	610b      	str	r3, [r1, #16]
 80047f8:	e011      	b.n	800481e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047fa:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004802:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6892      	ldr	r2, [r2, #8]
 800480a:	0211      	lsls	r1, r2, #8
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6952      	ldr	r2, [r2, #20]
 8004810:	0852      	lsrs	r2, r2, #1
 8004812:	3a01      	subs	r2, #1
 8004814:	0652      	lsls	r2, r2, #25
 8004816:	430a      	orrs	r2, r1
 8004818:	4915      	ldr	r1, [pc, #84]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481a:	4313      	orrs	r3, r2
 800481c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a13      	ldr	r2, [pc, #76]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004828:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7fd fbf9 	bl	8002020 <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004830:	e009      	b.n	8004846 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004832:	f7fd fbf5 	bl	8002020 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d902      	bls.n	8004846 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	73fb      	strb	r3, [r7, #15]
          break;
 8004844:	e005      	b.n	8004852 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0ef      	beq.n	8004832 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004866:	7bfb      	ldrb	r3, [r7, #15]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000

08004874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e040      	b.n	8004908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd f972 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fe34 	bl	8005528 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fc05 	bl	80050d0 <UART_SetConfig>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e01b      	b.n	8004908 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 feb3 	bl	800566c <UART_CheckIdleState>
 8004906:	4603      	mov	r3, r0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004924:	2b20      	cmp	r3, #32
 8004926:	d178      	bne.n	8004a1a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_UART_Transmit+0x24>
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e071      	b.n	8004a1c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2221      	movs	r2, #33	; 0x21
 8004944:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004946:	f7fd fb6b 	bl	8002020 <HAL_GetTick>
 800494a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d108      	bne.n	8004978 <HAL_UART_Transmit+0x68>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e003      	b.n	8004980 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004980:	e030      	b.n	80049e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 ff15 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e03c      	b.n	8004a1c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	881a      	ldrh	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b4:	b292      	uxth	r2, r2
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	3302      	adds	r3, #2
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e008      	b.n	80049d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	b292      	uxth	r2, r2
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3301      	adds	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1c8      	bne.n	8004982 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2140      	movs	r1, #64	; 0x40
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fede 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e005      	b.n	8004a1c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d137      	bne.n	8004aac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_UART_Receive_IT+0x24>
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e030      	b.n	8004aae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_UART_Receive_IT+0x94>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01f      	beq.n	8004a9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d018      	beq.n	8004a9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	613b      	str	r3, [r7, #16]
   return(result);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	69f9      	ldr	r1, [r7, #28]
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fef2 	bl	800588c <UART_Start_Receive_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	e000      	b.n	8004aae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3728      	adds	r7, #40	; 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40008000 	.word	0x40008000

08004abc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b0ba      	sub	sp, #232	; 0xe8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ae2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ae6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004aea:	4013      	ands	r3, r2
 8004aec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d115      	bne.n	8004b24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00f      	beq.n	8004b24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 82ae 	beq.w	8005076 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
      }
      return;
 8004b22:	e2a8      	b.n	8005076 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8117 	beq.w	8004d5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b3e:	4b85      	ldr	r3, [pc, #532]	; (8004d54 <HAL_UART_IRQHandler+0x298>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 810a 	beq.w	8004d5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d011      	beq.n	8004b78 <HAL_UART_IRQHandler+0xbc>
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2201      	movs	r2, #1
 8004b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6e:	f043 0201 	orr.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xec>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2202      	movs	r2, #2
 8004b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d011      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x11c>
 8004bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bce:	f043 0202 	orr.w	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d017      	beq.n	8004c14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2208      	movs	r2, #8
 8004c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <HAL_UART_IRQHandler+0x18a>
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00c      	beq.n	8004c46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8214 	beq.w	800507a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d005      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d04f      	beq.n	8004d3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 feba 	bl	8005a18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d141      	bne.n	8004d36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1d9      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d013      	beq.n	8004d2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0a:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <HAL_UART_IRQHandler+0x29c>)
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd fb03 	bl	800231e <HAL_DMA_Abort_IT>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d017      	beq.n	8004d4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	e00f      	b.n	8004d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9b8 	bl	80050a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	e00b      	b.n	8004d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9b4 	bl	80050a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	e007      	b.n	8004d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f9b0 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004d4c:	e195      	b.n	800507a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4e:	bf00      	nop
    return;
 8004d50:	e193      	b.n	800507a <HAL_UART_IRQHandler+0x5be>
 8004d52:	bf00      	nop
 8004d54:	04000120 	.word	0x04000120
 8004d58:	08005ae1 	.word	0x08005ae1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	f040 814e 	bne.w	8005002 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8147 	beq.w	8005002 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8140 	beq.w	8005002 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2210      	movs	r2, #16
 8004d88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	f040 80b8 	bne.w	8004f0a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004da6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8167 	beq.w	800507e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	f080 815f 	bcs.w	800507e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 8086 	bne.w	8004ee8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1da      	bne.n	8004ddc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e1      	bne.n	8004e26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3308      	adds	r3, #8
 8004e82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e3      	bne.n	8004e62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb8:	f023 0310 	bic.w	r3, r3, #16
 8004ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ecc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e4      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd f9dd 	bl	80022a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8d8 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f08:	e0b9      	b.n	800507e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80ab 	beq.w	8005082 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a6 	beq.w	8005082 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f58:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e4      	bne.n	8004f36 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f90:	633a      	str	r2, [r7, #48]	; 0x30
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e3      	bne.n	8004f6c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
 8004fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	69b9      	ldr	r1, [r7, #24]
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e4      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f85c 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005000:	e03f      	b.n	8005082 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00e      	beq.n	800502c <HAL_UART_IRQHandler+0x570>
 800500e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005022:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 ffbe 	bl	8005fa6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800502a:	e02d      	b.n	8005088 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
    }
    return;
 8005054:	e017      	b.n	8005086 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d012      	beq.n	8005088 <HAL_UART_IRQHandler+0x5cc>
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fd4c 	bl	8005b0c <UART_EndTransmit_IT>
    return;
 8005074:	e008      	b.n	8005088 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005076:	bf00      	nop
 8005078:	e006      	b.n	8005088 <HAL_UART_IRQHandler+0x5cc>
    return;
 800507a:	bf00      	nop
 800507c:	e004      	b.n	8005088 <HAL_UART_IRQHandler+0x5cc>
      return;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005086:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005088:	37e8      	adds	r7, #232	; 0xe8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop

08005090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d4:	b08a      	sub	sp, #40	; 0x28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	431a      	orrs	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4bb4      	ldr	r3, [pc, #720]	; (80053d0 <UART_SetConfig+0x300>)
 8005100:	4013      	ands	r3, r2
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005108:	430b      	orrs	r3, r1
 800510a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4aa9      	ldr	r2, [pc, #676]	; (80053d4 <UART_SetConfig+0x304>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	4313      	orrs	r3, r2
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	430a      	orrs	r2, r1
 800514e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4aa0      	ldr	r2, [pc, #640]	; (80053d8 <UART_SetConfig+0x308>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d126      	bne.n	80051a8 <UART_SetConfig+0xd8>
 800515a:	4ba0      	ldr	r3, [pc, #640]	; (80053dc <UART_SetConfig+0x30c>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b03      	cmp	r3, #3
 8005166:	d81b      	bhi.n	80051a0 <UART_SetConfig+0xd0>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0xa0>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	08005181 	.word	0x08005181
 8005174:	08005191 	.word	0x08005191
 8005178:	08005189 	.word	0x08005189
 800517c:	08005199 	.word	0x08005199
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e080      	b.n	800528a <UART_SetConfig+0x1ba>
 8005188:	2302      	movs	r3, #2
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e07c      	b.n	800528a <UART_SetConfig+0x1ba>
 8005190:	2304      	movs	r3, #4
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e078      	b.n	800528a <UART_SetConfig+0x1ba>
 8005198:	2308      	movs	r3, #8
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e074      	b.n	800528a <UART_SetConfig+0x1ba>
 80051a0:	2310      	movs	r3, #16
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a6:	e070      	b.n	800528a <UART_SetConfig+0x1ba>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a8c      	ldr	r2, [pc, #560]	; (80053e0 <UART_SetConfig+0x310>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d138      	bne.n	8005224 <UART_SetConfig+0x154>
 80051b2:	4b8a      	ldr	r3, [pc, #552]	; (80053dc <UART_SetConfig+0x30c>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d82d      	bhi.n	800521c <UART_SetConfig+0x14c>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0xf8>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	0800521d 	.word	0x0800521d
 80051d0:	0800521d 	.word	0x0800521d
 80051d4:	0800521d 	.word	0x0800521d
 80051d8:	0800520d 	.word	0x0800520d
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	0800521d 	.word	0x0800521d
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	08005205 	.word	0x08005205
 80051ec:	0800521d 	.word	0x0800521d
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005215 	.word	0x08005215
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005202:	e042      	b.n	800528a <UART_SetConfig+0x1ba>
 8005204:	2302      	movs	r3, #2
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520a:	e03e      	b.n	800528a <UART_SetConfig+0x1ba>
 800520c:	2304      	movs	r3, #4
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e03a      	b.n	800528a <UART_SetConfig+0x1ba>
 8005214:	2308      	movs	r3, #8
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e036      	b.n	800528a <UART_SetConfig+0x1ba>
 800521c:	2310      	movs	r3, #16
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e032      	b.n	800528a <UART_SetConfig+0x1ba>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a6a      	ldr	r2, [pc, #424]	; (80053d4 <UART_SetConfig+0x304>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d12a      	bne.n	8005284 <UART_SetConfig+0x1b4>
 800522e:	4b6b      	ldr	r3, [pc, #428]	; (80053dc <UART_SetConfig+0x30c>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005238:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800523c:	d01a      	beq.n	8005274 <UART_SetConfig+0x1a4>
 800523e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005242:	d81b      	bhi.n	800527c <UART_SetConfig+0x1ac>
 8005244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005248:	d00c      	beq.n	8005264 <UART_SetConfig+0x194>
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524e:	d815      	bhi.n	800527c <UART_SetConfig+0x1ac>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <UART_SetConfig+0x18c>
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005258:	d008      	beq.n	800526c <UART_SetConfig+0x19c>
 800525a:	e00f      	b.n	800527c <UART_SetConfig+0x1ac>
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e012      	b.n	800528a <UART_SetConfig+0x1ba>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e00e      	b.n	800528a <UART_SetConfig+0x1ba>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e00a      	b.n	800528a <UART_SetConfig+0x1ba>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e006      	b.n	800528a <UART_SetConfig+0x1ba>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e002      	b.n	800528a <UART_SetConfig+0x1ba>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a51      	ldr	r2, [pc, #324]	; (80053d4 <UART_SetConfig+0x304>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d17a      	bne.n	800538a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005298:	2b08      	cmp	r3, #8
 800529a:	d824      	bhi.n	80052e6 <UART_SetConfig+0x216>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x1d4>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052d7 	.word	0x080052d7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052e7 	.word	0x080052e7
 80052c4:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fe ff50 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b44      	ldr	r3, [pc, #272]	; (80053e4 <UART_SetConfig+0x314>)
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe feb1 	bl	800403c <HAL_RCC_GetSysClockFreq>
 80052da:	61f8      	str	r0, [r7, #28]
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8107 	beq.w	8005508 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	4413      	add	r3, r2
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	429a      	cmp	r2, r3
 8005308:	d305      	bcc.n	8005316 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800531c:	e0f4      	b.n	8005508 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2200      	movs	r2, #0
 8005322:	461c      	mov	r4, r3
 8005324:	4615      	mov	r5, r2
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	022b      	lsls	r3, r5, #8
 8005330:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005334:	0222      	lsls	r2, r4, #8
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	6849      	ldr	r1, [r1, #4]
 800533a:	0849      	lsrs	r1, r1, #1
 800533c:	2000      	movs	r0, #0
 800533e:	4688      	mov	r8, r1
 8005340:	4681      	mov	r9, r0
 8005342:	eb12 0a08 	adds.w	sl, r2, r8
 8005346:	eb43 0b09 	adc.w	fp, r3, r9
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005358:	4650      	mov	r0, sl
 800535a:	4659      	mov	r1, fp
 800535c:	f7fb fc3e 	bl	8000bdc <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4613      	mov	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536e:	d308      	bcc.n	8005382 <UART_SetConfig+0x2b2>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005376:	d204      	bcs.n	8005382 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	e0c2      	b.n	8005508 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005388:	e0be      	b.n	8005508 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005392:	d16a      	bne.n	800546a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005398:	2b08      	cmp	r3, #8
 800539a:	d834      	bhi.n	8005406 <UART_SetConfig+0x336>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0x2d4>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053f1 	.word	0x080053f1
 80053b0:	08005407 	.word	0x08005407
 80053b4:	080053f7 	.word	0x080053f7
 80053b8:	08005407 	.word	0x08005407
 80053bc:	08005407 	.word	0x08005407
 80053c0:	08005407 	.word	0x08005407
 80053c4:	080053ff 	.word	0x080053ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe fed0 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 80053cc:	61f8      	str	r0, [r7, #28]
        break;
 80053ce:	e020      	b.n	8005412 <UART_SetConfig+0x342>
 80053d0:	efff69f3 	.word	0xefff69f3
 80053d4:	40008000 	.word	0x40008000
 80053d8:	40013800 	.word	0x40013800
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40004400 	.word	0x40004400
 80053e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7fe fed6 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 80053ec:	61f8      	str	r0, [r7, #28]
        break;
 80053ee:	e010      	b.n	8005412 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f0:	4b4c      	ldr	r3, [pc, #304]	; (8005524 <UART_SetConfig+0x454>)
 80053f2:	61fb      	str	r3, [r7, #28]
        break;
 80053f4:	e00d      	b.n	8005412 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f6:	f7fe fe21 	bl	800403c <HAL_RCC_GetSysClockFreq>
 80053fa:	61f8      	str	r0, [r7, #28]
        break;
 80053fc:	e009      	b.n	8005412 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005402:	61fb      	str	r3, [r7, #28]
        break;
 8005404:	e005      	b.n	8005412 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005410:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d077      	beq.n	8005508 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	005a      	lsls	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	441a      	add	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b0f      	cmp	r3, #15
 8005432:	d916      	bls.n	8005462 <UART_SetConfig+0x392>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d212      	bcs.n	8005462 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f023 030f 	bic.w	r3, r3, #15
 8005444:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	b29b      	uxth	r3, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	b29a      	uxth	r2, r3
 8005452:	8afb      	ldrh	r3, [r7, #22]
 8005454:	4313      	orrs	r3, r2
 8005456:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	8afa      	ldrh	r2, [r7, #22]
 800545e:	60da      	str	r2, [r3, #12]
 8005460:	e052      	b.n	8005508 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005468:	e04e      	b.n	8005508 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800546a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800546e:	2b08      	cmp	r3, #8
 8005470:	d827      	bhi.n	80054c2 <UART_SetConfig+0x3f2>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x3a8>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	0800549d 	.word	0x0800549d
 800547c:	080054a5 	.word	0x080054a5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	080054c3 	.word	0x080054c3
 8005488:	080054b3 	.word	0x080054b3
 800548c:	080054c3 	.word	0x080054c3
 8005490:	080054c3 	.word	0x080054c3
 8005494:	080054c3 	.word	0x080054c3
 8005498:	080054bb 	.word	0x080054bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549c:	f7fe fe66 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 80054a0:	61f8      	str	r0, [r7, #28]
        break;
 80054a2:	e014      	b.n	80054ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fe fe78 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 80054a8:	61f8      	str	r0, [r7, #28]
        break;
 80054aa:	e010      	b.n	80054ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <UART_SetConfig+0x454>)
 80054ae:	61fb      	str	r3, [r7, #28]
        break;
 80054b0:	e00d      	b.n	80054ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b2:	f7fe fdc3 	bl	800403c <HAL_RCC_GetSysClockFreq>
 80054b6:	61f8      	str	r0, [r7, #28]
        break;
 80054b8:	e009      	b.n	80054ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054be:	61fb      	str	r3, [r7, #28]
        break;
 80054c0:	e005      	b.n	80054ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054cc:	bf00      	nop
    }

    if (pclk != 0U)
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d019      	beq.n	8005508 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	085a      	lsrs	r2, r3, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d909      	bls.n	8005502 <UART_SetConfig+0x432>
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f4:	d205      	bcs.n	8005502 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60da      	str	r2, [r3, #12]
 8005500:	e002      	b.n	8005508 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005514:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	; 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005522:	bf00      	nop
 8005524:	00f42400 	.word	0x00f42400

08005528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01a      	beq.n	800563e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005626:	d10a      	bne.n	800563e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b098      	sub	sp, #96	; 0x60
 8005670:	af02      	add	r7, sp, #8
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800567c:	f7fc fcd0 	bl	8002020 <HAL_GetTick>
 8005680:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d12e      	bne.n	80056ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005698:	2200      	movs	r2, #0
 800569a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f88c 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d021      	beq.n	80056ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056be:	653b      	str	r3, [r7, #80]	; 0x50
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e6      	bne.n	80056aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e062      	b.n	80057b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d149      	bne.n	8005790 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005704:	2200      	movs	r2, #0
 8005706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f856 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d03c      	beq.n	8005790 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	623b      	str	r3, [r7, #32]
   return(result);
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800572a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
 8005736:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800573a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e6      	bne.n	8005716 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	60fb      	str	r3, [r7, #12]
   return(result);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3308      	adds	r3, #8
 8005766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005768:	61fa      	str	r2, [r7, #28]
 800576a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	617b      	str	r3, [r7, #20]
   return(result);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e5      	bne.n	8005748 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e011      	b.n	80057b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3758      	adds	r7, #88	; 0x58
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	4613      	mov	r3, r2
 80057ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057cc:	e049      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d4:	d045      	beq.n	8005862 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d6:	f7fc fc23 	bl	8002020 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <UART_WaitOnFlagUntilTimeout+0x30>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e048      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d031      	beq.n	8005862 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b08      	cmp	r3, #8
 800580a:	d110      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2208      	movs	r2, #8
 8005812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f8ff 	bl	8005a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2208      	movs	r2, #8
 800581e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e029      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583c:	d111      	bne.n	8005862 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f8e5 	bl	8005a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e00f      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	429a      	cmp	r2, r3
 800587e:	d0a6      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800588c:	b480      	push	{r7}
 800588e:	b097      	sub	sp, #92	; 0x5c
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058be:	d10e      	bne.n	80058de <UART_Start_Receive_IT+0x52>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <UART_Start_Receive_IT+0x48>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058d2:	e02d      	b.n	8005930 <UART_Start_Receive_IT+0xa4>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	22ff      	movs	r2, #255	; 0xff
 80058d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058dc:	e028      	b.n	8005930 <UART_Start_Receive_IT+0xa4>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <UART_Start_Receive_IT+0x76>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <UART_Start_Receive_IT+0x6c>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	22ff      	movs	r2, #255	; 0xff
 80058f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058f6:	e01b      	b.n	8005930 <UART_Start_Receive_IT+0xa4>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	227f      	movs	r2, #127	; 0x7f
 80058fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005900:	e016      	b.n	8005930 <UART_Start_Receive_IT+0xa4>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800590a:	d10d      	bne.n	8005928 <UART_Start_Receive_IT+0x9c>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <UART_Start_Receive_IT+0x92>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	227f      	movs	r2, #127	; 0x7f
 8005918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800591c:	e008      	b.n	8005930 <UART_Start_Receive_IT+0xa4>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	223f      	movs	r2, #63	; 0x3f
 8005922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005926:	e003      	b.n	8005930 <UART_Start_Receive_IT+0xa4>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2222      	movs	r2, #34	; 0x22
 800593c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	657b      	str	r3, [r7, #84]	; 0x54
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3308      	adds	r3, #8
 800595e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005960:	64ba      	str	r2, [r7, #72]	; 0x48
 8005962:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800596e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e5      	bne.n	8005940 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597c:	d107      	bne.n	800598e <UART_Start_Receive_IT+0x102>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d103      	bne.n	800598e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <UART_Start_Receive_IT+0x184>)
 800598a:	669a      	str	r2, [r3, #104]	; 0x68
 800598c:	e002      	b.n	8005994 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <UART_Start_Receive_IT+0x188>)
 8005992:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d019      	beq.n	80059d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80059b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
 80059bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e6      	bne.n	800599c <UART_Start_Receive_IT+0x110>
 80059ce:	e018      	b.n	8005a02 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	613b      	str	r3, [r7, #16]
   return(result);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f043 0320 	orr.w	r3, r3, #32
 80059e4:	653b      	str	r3, [r7, #80]	; 0x50
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ee:	623b      	str	r3, [r7, #32]
 80059f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	69f9      	ldr	r1, [r7, #28]
 80059f4:	6a3a      	ldr	r2, [r7, #32]
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e6      	bne.n	80059d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	375c      	adds	r7, #92	; 0x5c
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	08005d1d 	.word	0x08005d1d
 8005a14:	08005b61 	.word	0x08005b61

08005a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b095      	sub	sp, #84	; 0x54
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e6      	bne.n	8005a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d118      	bne.n	8005ac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6979      	ldr	r1, [r7, #20]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ad4:	bf00      	nop
 8005ad6:	3754      	adds	r7, #84	; 0x54
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fad0 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fa9c 	bl	8005090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b58:	bf00      	nop
 8005b5a:	3720      	adds	r7, #32
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b09c      	sub	sp, #112	; 0x70
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b78:	2b22      	cmp	r3, #34	; 0x22
 8005b7a:	f040 80be 	bne.w	8005cfa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b8c:	b2d9      	uxtb	r1, r3
 8005b8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	400a      	ands	r2, r1
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f040 80a3 	bne.w	8005d0e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005be8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e6      	bne.n	8005bc8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	667b      	str	r3, [r7, #100]	; 0x64
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c1a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e5      	bne.n	8005bfa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <UART_RxISR_8BIT+0x1b8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01f      	beq.n	8005c8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	623b      	str	r3, [r7, #32]
   return(result);
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30
 8005c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d12e      	bne.n	8005cf2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0310 	bic.w	r3, r3, #16
 8005cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	69b9      	ldr	r1, [r7, #24]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e6      	bne.n	8005c9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b10      	cmp	r3, #16
 8005cd8:	d103      	bne.n	8005ce2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2210      	movs	r2, #16
 8005ce0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff f9e4 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cf0:	e00d      	b.n	8005d0e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb fb82 	bl	80013fc <HAL_UART_RxCpltCallback>
}
 8005cf8:	e009      	b.n	8005d0e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	8b1b      	ldrh	r3, [r3, #24]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0208 	orr.w	r2, r2, #8
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	831a      	strh	r2, [r3, #24]
}
 8005d0e:	bf00      	nop
 8005d10:	3770      	adds	r7, #112	; 0x70
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40008000 	.word	0x40008000

08005d1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b09c      	sub	sp, #112	; 0x70
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d34:	2b22      	cmp	r3, #34	; 0x22
 8005d36:	f040 80be 	bne.w	8005eb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005d4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005d52:	4013      	ands	r3, r2
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	1c9a      	adds	r2, r3, #2
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 80a3 	bne.w	8005eca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d98:	667b      	str	r3, [r7, #100]	; 0x64
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da2:	657b      	str	r3, [r7, #84]	; 0x54
 8005da4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dd6:	643a      	str	r2, [r7, #64]	; 0x40
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a34      	ldr	r2, [pc, #208]	; (8005ed4 <UART_RxISR_16BIT+0x1b8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d01f      	beq.n	8005e48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d018      	beq.n	8005e48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e6      	bne.n	8005e16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d12e      	bne.n	8005eae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f023 0310 	bic.w	r3, r3, #16
 8005e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6979      	ldr	r1, [r7, #20]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	613b      	str	r3, [r7, #16]
   return(result);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e6      	bne.n	8005e56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d103      	bne.n	8005e9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff f906 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005eac:	e00d      	b.n	8005eca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb faa4 	bl	80013fc <HAL_UART_RxCpltCallback>
}
 8005eb4:	e009      	b.n	8005eca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	8b1b      	ldrh	r3, [r3, #24]
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0208 	orr.w	r2, r2, #8
 8005ec6:	b292      	uxth	r2, r2
 8005ec8:	831a      	strh	r2, [r3, #24]
}
 8005eca:	bf00      	nop
 8005ecc:	3770      	adds	r7, #112	; 0x70
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40008000 	.word	0x40008000

08005ed8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e056      	b.n	8005f9e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7fb fe3d 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2224      	movs	r2, #36	; 0x24
 8005f0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff faff 	bl	8005528 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff f8d0 	bl	80050d0 <UART_SetConfig>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e031      	b.n	8005f9e <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f48:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	055b      	lsls	r3, r3, #21
 8005f62:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8005f78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	6979      	ldr	r1, [r7, #20]
 8005f82:	430b      	orrs	r3, r1
 8005f84:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff fb68 	bl	800566c <UART_CheckIdleState>
 8005f9c:	4603      	mov	r3, r0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <__assert_func>:
 8005fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <__assert_func+0x2c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	68d8      	ldr	r0, [r3, #12]
 8005fca:	b14c      	cbz	r4, 8005fe0 <__assert_func+0x24>
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <__assert_func+0x30>)
 8005fce:	9100      	str	r1, [sp, #0]
 8005fd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fd4:	4906      	ldr	r1, [pc, #24]	; (8005ff0 <__assert_func+0x34>)
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	f000 fece 	bl	8006d78 <fiprintf>
 8005fdc:	f001 f834 	bl	8007048 <abort>
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <__assert_func+0x38>)
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	e7f3      	b.n	8005fce <__assert_func+0x12>
 8005fe6:	bf00      	nop
 8005fe8:	200001d8 	.word	0x200001d8
 8005fec:	08009a68 	.word	0x08009a68
 8005ff0:	08009a75 	.word	0x08009a75
 8005ff4:	08009aa3 	.word	0x08009aa3

08005ff8 <atof>:
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f000 be0d 	b.w	8006c18 <strtod>

08005ffe <sulp>:
 8005ffe:	b570      	push	{r4, r5, r6, lr}
 8006000:	4604      	mov	r4, r0
 8006002:	460d      	mov	r5, r1
 8006004:	ec45 4b10 	vmov	d0, r4, r5
 8006008:	4616      	mov	r6, r2
 800600a:	f001 fff3 	bl	8007ff4 <__ulp>
 800600e:	ec51 0b10 	vmov	r0, r1, d0
 8006012:	b17e      	cbz	r6, 8006034 <sulp+0x36>
 8006014:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006018:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800601c:	2b00      	cmp	r3, #0
 800601e:	dd09      	ble.n	8006034 <sulp+0x36>
 8006020:	051b      	lsls	r3, r3, #20
 8006022:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006026:	2400      	movs	r4, #0
 8006028:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800602c:	4622      	mov	r2, r4
 800602e:	462b      	mov	r3, r5
 8006030:	f7fa faf2 	bl	8000618 <__aeabi_dmul>
 8006034:	bd70      	pop	{r4, r5, r6, pc}
	...

08006038 <_strtod_l>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	ed2d 8b02 	vpush	{d8}
 8006040:	b09b      	sub	sp, #108	; 0x6c
 8006042:	4604      	mov	r4, r0
 8006044:	9213      	str	r2, [sp, #76]	; 0x4c
 8006046:	2200      	movs	r2, #0
 8006048:	9216      	str	r2, [sp, #88]	; 0x58
 800604a:	460d      	mov	r5, r1
 800604c:	f04f 0800 	mov.w	r8, #0
 8006050:	f04f 0900 	mov.w	r9, #0
 8006054:	460a      	mov	r2, r1
 8006056:	9215      	str	r2, [sp, #84]	; 0x54
 8006058:	7811      	ldrb	r1, [r2, #0]
 800605a:	292b      	cmp	r1, #43	; 0x2b
 800605c:	d04c      	beq.n	80060f8 <_strtod_l+0xc0>
 800605e:	d83a      	bhi.n	80060d6 <_strtod_l+0x9e>
 8006060:	290d      	cmp	r1, #13
 8006062:	d834      	bhi.n	80060ce <_strtod_l+0x96>
 8006064:	2908      	cmp	r1, #8
 8006066:	d834      	bhi.n	80060d2 <_strtod_l+0x9a>
 8006068:	2900      	cmp	r1, #0
 800606a:	d03d      	beq.n	80060e8 <_strtod_l+0xb0>
 800606c:	2200      	movs	r2, #0
 800606e:	920a      	str	r2, [sp, #40]	; 0x28
 8006070:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006072:	7832      	ldrb	r2, [r6, #0]
 8006074:	2a30      	cmp	r2, #48	; 0x30
 8006076:	f040 80b4 	bne.w	80061e2 <_strtod_l+0x1aa>
 800607a:	7872      	ldrb	r2, [r6, #1]
 800607c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006080:	2a58      	cmp	r2, #88	; 0x58
 8006082:	d170      	bne.n	8006166 <_strtod_l+0x12e>
 8006084:	9302      	str	r3, [sp, #8]
 8006086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	ab16      	add	r3, sp, #88	; 0x58
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4a8e      	ldr	r2, [pc, #568]	; (80062c8 <_strtod_l+0x290>)
 8006090:	ab17      	add	r3, sp, #92	; 0x5c
 8006092:	a915      	add	r1, sp, #84	; 0x54
 8006094:	4620      	mov	r0, r4
 8006096:	f001 f893 	bl	80071c0 <__gethex>
 800609a:	f010 070f 	ands.w	r7, r0, #15
 800609e:	4605      	mov	r5, r0
 80060a0:	d005      	beq.n	80060ae <_strtod_l+0x76>
 80060a2:	2f06      	cmp	r7, #6
 80060a4:	d12a      	bne.n	80060fc <_strtod_l+0xc4>
 80060a6:	3601      	adds	r6, #1
 80060a8:	2300      	movs	r3, #0
 80060aa:	9615      	str	r6, [sp, #84]	; 0x54
 80060ac:	930a      	str	r3, [sp, #40]	; 0x28
 80060ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 857f 	bne.w	8006bb4 <_strtod_l+0xb7c>
 80060b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b8:	b1db      	cbz	r3, 80060f2 <_strtod_l+0xba>
 80060ba:	4642      	mov	r2, r8
 80060bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80060c0:	ec43 2b10 	vmov	d0, r2, r3
 80060c4:	b01b      	add	sp, #108	; 0x6c
 80060c6:	ecbd 8b02 	vpop	{d8}
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	2920      	cmp	r1, #32
 80060d0:	d1cc      	bne.n	800606c <_strtod_l+0x34>
 80060d2:	3201      	adds	r2, #1
 80060d4:	e7bf      	b.n	8006056 <_strtod_l+0x1e>
 80060d6:	292d      	cmp	r1, #45	; 0x2d
 80060d8:	d1c8      	bne.n	800606c <_strtod_l+0x34>
 80060da:	2101      	movs	r1, #1
 80060dc:	910a      	str	r1, [sp, #40]	; 0x28
 80060de:	1c51      	adds	r1, r2, #1
 80060e0:	9115      	str	r1, [sp, #84]	; 0x54
 80060e2:	7852      	ldrb	r2, [r2, #1]
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	d1c3      	bne.n	8006070 <_strtod_l+0x38>
 80060e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060ea:	9515      	str	r5, [sp, #84]	; 0x54
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f040 855f 	bne.w	8006bb0 <_strtod_l+0xb78>
 80060f2:	4642      	mov	r2, r8
 80060f4:	464b      	mov	r3, r9
 80060f6:	e7e3      	b.n	80060c0 <_strtod_l+0x88>
 80060f8:	2100      	movs	r1, #0
 80060fa:	e7ef      	b.n	80060dc <_strtod_l+0xa4>
 80060fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80060fe:	b13a      	cbz	r2, 8006110 <_strtod_l+0xd8>
 8006100:	2135      	movs	r1, #53	; 0x35
 8006102:	a818      	add	r0, sp, #96	; 0x60
 8006104:	f002 f873 	bl	80081ee <__copybits>
 8006108:	9916      	ldr	r1, [sp, #88]	; 0x58
 800610a:	4620      	mov	r0, r4
 800610c:	f001 fc46 	bl	800799c <_Bfree>
 8006110:	3f01      	subs	r7, #1
 8006112:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006114:	2f04      	cmp	r7, #4
 8006116:	d806      	bhi.n	8006126 <_strtod_l+0xee>
 8006118:	e8df f007 	tbb	[pc, r7]
 800611c:	201d0314 	.word	0x201d0314
 8006120:	14          	.byte	0x14
 8006121:	00          	.byte	0x00
 8006122:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006126:	05e9      	lsls	r1, r5, #23
 8006128:	bf48      	it	mi
 800612a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800612e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006132:	0d1b      	lsrs	r3, r3, #20
 8006134:	051b      	lsls	r3, r3, #20
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1b9      	bne.n	80060ae <_strtod_l+0x76>
 800613a:	f000 ff3f 	bl	8006fbc <__errno>
 800613e:	2322      	movs	r3, #34	; 0x22
 8006140:	6003      	str	r3, [r0, #0]
 8006142:	e7b4      	b.n	80060ae <_strtod_l+0x76>
 8006144:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006148:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800614c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006150:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006154:	e7e7      	b.n	8006126 <_strtod_l+0xee>
 8006156:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80062d0 <_strtod_l+0x298>
 800615a:	e7e4      	b.n	8006126 <_strtod_l+0xee>
 800615c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006160:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006164:	e7df      	b.n	8006126 <_strtod_l+0xee>
 8006166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	9215      	str	r2, [sp, #84]	; 0x54
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b30      	cmp	r3, #48	; 0x30
 8006170:	d0f9      	beq.n	8006166 <_strtod_l+0x12e>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d09b      	beq.n	80060ae <_strtod_l+0x76>
 8006176:	2301      	movs	r3, #1
 8006178:	f04f 0a00 	mov.w	sl, #0
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006180:	930b      	str	r3, [sp, #44]	; 0x2c
 8006182:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006186:	46d3      	mov	fp, sl
 8006188:	220a      	movs	r2, #10
 800618a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800618c:	7806      	ldrb	r6, [r0, #0]
 800618e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006192:	b2d9      	uxtb	r1, r3
 8006194:	2909      	cmp	r1, #9
 8006196:	d926      	bls.n	80061e6 <_strtod_l+0x1ae>
 8006198:	494c      	ldr	r1, [pc, #304]	; (80062cc <_strtod_l+0x294>)
 800619a:	2201      	movs	r2, #1
 800619c:	f000 feb5 	bl	8006f0a <strncmp>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d030      	beq.n	8006206 <_strtod_l+0x1ce>
 80061a4:	2000      	movs	r0, #0
 80061a6:	4632      	mov	r2, r6
 80061a8:	9005      	str	r0, [sp, #20]
 80061aa:	465e      	mov	r6, fp
 80061ac:	4603      	mov	r3, r0
 80061ae:	2a65      	cmp	r2, #101	; 0x65
 80061b0:	d001      	beq.n	80061b6 <_strtod_l+0x17e>
 80061b2:	2a45      	cmp	r2, #69	; 0x45
 80061b4:	d113      	bne.n	80061de <_strtod_l+0x1a6>
 80061b6:	b91e      	cbnz	r6, 80061c0 <_strtod_l+0x188>
 80061b8:	9a04      	ldr	r2, [sp, #16]
 80061ba:	4302      	orrs	r2, r0
 80061bc:	d094      	beq.n	80060e8 <_strtod_l+0xb0>
 80061be:	2600      	movs	r6, #0
 80061c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80061c2:	1c6a      	adds	r2, r5, #1
 80061c4:	9215      	str	r2, [sp, #84]	; 0x54
 80061c6:	786a      	ldrb	r2, [r5, #1]
 80061c8:	2a2b      	cmp	r2, #43	; 0x2b
 80061ca:	d074      	beq.n	80062b6 <_strtod_l+0x27e>
 80061cc:	2a2d      	cmp	r2, #45	; 0x2d
 80061ce:	d078      	beq.n	80062c2 <_strtod_l+0x28a>
 80061d0:	f04f 0c00 	mov.w	ip, #0
 80061d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80061d8:	2909      	cmp	r1, #9
 80061da:	d97f      	bls.n	80062dc <_strtod_l+0x2a4>
 80061dc:	9515      	str	r5, [sp, #84]	; 0x54
 80061de:	2700      	movs	r7, #0
 80061e0:	e09e      	b.n	8006320 <_strtod_l+0x2e8>
 80061e2:	2300      	movs	r3, #0
 80061e4:	e7c8      	b.n	8006178 <_strtod_l+0x140>
 80061e6:	f1bb 0f08 	cmp.w	fp, #8
 80061ea:	bfd8      	it	le
 80061ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80061ee:	f100 0001 	add.w	r0, r0, #1
 80061f2:	bfda      	itte	le
 80061f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80061f8:	9309      	strle	r3, [sp, #36]	; 0x24
 80061fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80061fe:	f10b 0b01 	add.w	fp, fp, #1
 8006202:	9015      	str	r0, [sp, #84]	; 0x54
 8006204:	e7c1      	b.n	800618a <_strtod_l+0x152>
 8006206:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	9215      	str	r2, [sp, #84]	; 0x54
 800620c:	785a      	ldrb	r2, [r3, #1]
 800620e:	f1bb 0f00 	cmp.w	fp, #0
 8006212:	d037      	beq.n	8006284 <_strtod_l+0x24c>
 8006214:	9005      	str	r0, [sp, #20]
 8006216:	465e      	mov	r6, fp
 8006218:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800621c:	2b09      	cmp	r3, #9
 800621e:	d912      	bls.n	8006246 <_strtod_l+0x20e>
 8006220:	2301      	movs	r3, #1
 8006222:	e7c4      	b.n	80061ae <_strtod_l+0x176>
 8006224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	9215      	str	r2, [sp, #84]	; 0x54
 800622a:	785a      	ldrb	r2, [r3, #1]
 800622c:	3001      	adds	r0, #1
 800622e:	2a30      	cmp	r2, #48	; 0x30
 8006230:	d0f8      	beq.n	8006224 <_strtod_l+0x1ec>
 8006232:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006236:	2b08      	cmp	r3, #8
 8006238:	f200 84c1 	bhi.w	8006bbe <_strtod_l+0xb86>
 800623c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800623e:	9005      	str	r0, [sp, #20]
 8006240:	2000      	movs	r0, #0
 8006242:	930b      	str	r3, [sp, #44]	; 0x2c
 8006244:	4606      	mov	r6, r0
 8006246:	3a30      	subs	r2, #48	; 0x30
 8006248:	f100 0301 	add.w	r3, r0, #1
 800624c:	d014      	beq.n	8006278 <_strtod_l+0x240>
 800624e:	9905      	ldr	r1, [sp, #20]
 8006250:	4419      	add	r1, r3
 8006252:	9105      	str	r1, [sp, #20]
 8006254:	4633      	mov	r3, r6
 8006256:	eb00 0c06 	add.w	ip, r0, r6
 800625a:	210a      	movs	r1, #10
 800625c:	4563      	cmp	r3, ip
 800625e:	d113      	bne.n	8006288 <_strtod_l+0x250>
 8006260:	1833      	adds	r3, r6, r0
 8006262:	2b08      	cmp	r3, #8
 8006264:	f106 0601 	add.w	r6, r6, #1
 8006268:	4406      	add	r6, r0
 800626a:	dc1a      	bgt.n	80062a2 <_strtod_l+0x26a>
 800626c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800626e:	230a      	movs	r3, #10
 8006270:	fb03 2301 	mla	r3, r3, r1, r2
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	2300      	movs	r3, #0
 8006278:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800627a:	1c51      	adds	r1, r2, #1
 800627c:	9115      	str	r1, [sp, #84]	; 0x54
 800627e:	7852      	ldrb	r2, [r2, #1]
 8006280:	4618      	mov	r0, r3
 8006282:	e7c9      	b.n	8006218 <_strtod_l+0x1e0>
 8006284:	4658      	mov	r0, fp
 8006286:	e7d2      	b.n	800622e <_strtod_l+0x1f6>
 8006288:	2b08      	cmp	r3, #8
 800628a:	f103 0301 	add.w	r3, r3, #1
 800628e:	dc03      	bgt.n	8006298 <_strtod_l+0x260>
 8006290:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006292:	434f      	muls	r7, r1
 8006294:	9709      	str	r7, [sp, #36]	; 0x24
 8006296:	e7e1      	b.n	800625c <_strtod_l+0x224>
 8006298:	2b10      	cmp	r3, #16
 800629a:	bfd8      	it	le
 800629c:	fb01 fa0a 	mulle.w	sl, r1, sl
 80062a0:	e7dc      	b.n	800625c <_strtod_l+0x224>
 80062a2:	2e10      	cmp	r6, #16
 80062a4:	bfdc      	itt	le
 80062a6:	230a      	movle	r3, #10
 80062a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80062ac:	e7e3      	b.n	8006276 <_strtod_l+0x23e>
 80062ae:	2300      	movs	r3, #0
 80062b0:	9305      	str	r3, [sp, #20]
 80062b2:	2301      	movs	r3, #1
 80062b4:	e780      	b.n	80061b8 <_strtod_l+0x180>
 80062b6:	f04f 0c00 	mov.w	ip, #0
 80062ba:	1caa      	adds	r2, r5, #2
 80062bc:	9215      	str	r2, [sp, #84]	; 0x54
 80062be:	78aa      	ldrb	r2, [r5, #2]
 80062c0:	e788      	b.n	80061d4 <_strtod_l+0x19c>
 80062c2:	f04f 0c01 	mov.w	ip, #1
 80062c6:	e7f8      	b.n	80062ba <_strtod_l+0x282>
 80062c8:	08009ab4 	.word	0x08009ab4
 80062cc:	08009aa4 	.word	0x08009aa4
 80062d0:	7ff00000 	.word	0x7ff00000
 80062d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062d6:	1c51      	adds	r1, r2, #1
 80062d8:	9115      	str	r1, [sp, #84]	; 0x54
 80062da:	7852      	ldrb	r2, [r2, #1]
 80062dc:	2a30      	cmp	r2, #48	; 0x30
 80062de:	d0f9      	beq.n	80062d4 <_strtod_l+0x29c>
 80062e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80062e4:	2908      	cmp	r1, #8
 80062e6:	f63f af7a 	bhi.w	80061de <_strtod_l+0x1a6>
 80062ea:	3a30      	subs	r2, #48	; 0x30
 80062ec:	9208      	str	r2, [sp, #32]
 80062ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062f0:	920c      	str	r2, [sp, #48]	; 0x30
 80062f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062f4:	1c57      	adds	r7, r2, #1
 80062f6:	9715      	str	r7, [sp, #84]	; 0x54
 80062f8:	7852      	ldrb	r2, [r2, #1]
 80062fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80062fe:	f1be 0f09 	cmp.w	lr, #9
 8006302:	d938      	bls.n	8006376 <_strtod_l+0x33e>
 8006304:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006306:	1a7f      	subs	r7, r7, r1
 8006308:	2f08      	cmp	r7, #8
 800630a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800630e:	dc03      	bgt.n	8006318 <_strtod_l+0x2e0>
 8006310:	9908      	ldr	r1, [sp, #32]
 8006312:	428f      	cmp	r7, r1
 8006314:	bfa8      	it	ge
 8006316:	460f      	movge	r7, r1
 8006318:	f1bc 0f00 	cmp.w	ip, #0
 800631c:	d000      	beq.n	8006320 <_strtod_l+0x2e8>
 800631e:	427f      	negs	r7, r7
 8006320:	2e00      	cmp	r6, #0
 8006322:	d14f      	bne.n	80063c4 <_strtod_l+0x38c>
 8006324:	9904      	ldr	r1, [sp, #16]
 8006326:	4301      	orrs	r1, r0
 8006328:	f47f aec1 	bne.w	80060ae <_strtod_l+0x76>
 800632c:	2b00      	cmp	r3, #0
 800632e:	f47f aedb 	bne.w	80060e8 <_strtod_l+0xb0>
 8006332:	2a69      	cmp	r2, #105	; 0x69
 8006334:	d029      	beq.n	800638a <_strtod_l+0x352>
 8006336:	dc26      	bgt.n	8006386 <_strtod_l+0x34e>
 8006338:	2a49      	cmp	r2, #73	; 0x49
 800633a:	d026      	beq.n	800638a <_strtod_l+0x352>
 800633c:	2a4e      	cmp	r2, #78	; 0x4e
 800633e:	f47f aed3 	bne.w	80060e8 <_strtod_l+0xb0>
 8006342:	499b      	ldr	r1, [pc, #620]	; (80065b0 <_strtod_l+0x578>)
 8006344:	a815      	add	r0, sp, #84	; 0x54
 8006346:	f001 f97b 	bl	8007640 <__match>
 800634a:	2800      	cmp	r0, #0
 800634c:	f43f aecc 	beq.w	80060e8 <_strtod_l+0xb0>
 8006350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b28      	cmp	r3, #40	; 0x28
 8006356:	d12f      	bne.n	80063b8 <_strtod_l+0x380>
 8006358:	4996      	ldr	r1, [pc, #600]	; (80065b4 <_strtod_l+0x57c>)
 800635a:	aa18      	add	r2, sp, #96	; 0x60
 800635c:	a815      	add	r0, sp, #84	; 0x54
 800635e:	f001 f983 	bl	8007668 <__hexnan>
 8006362:	2805      	cmp	r0, #5
 8006364:	d128      	bne.n	80063b8 <_strtod_l+0x380>
 8006366:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006368:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800636c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006370:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006374:	e69b      	b.n	80060ae <_strtod_l+0x76>
 8006376:	9f08      	ldr	r7, [sp, #32]
 8006378:	210a      	movs	r1, #10
 800637a:	fb01 2107 	mla	r1, r1, r7, r2
 800637e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006382:	9208      	str	r2, [sp, #32]
 8006384:	e7b5      	b.n	80062f2 <_strtod_l+0x2ba>
 8006386:	2a6e      	cmp	r2, #110	; 0x6e
 8006388:	e7d9      	b.n	800633e <_strtod_l+0x306>
 800638a:	498b      	ldr	r1, [pc, #556]	; (80065b8 <_strtod_l+0x580>)
 800638c:	a815      	add	r0, sp, #84	; 0x54
 800638e:	f001 f957 	bl	8007640 <__match>
 8006392:	2800      	cmp	r0, #0
 8006394:	f43f aea8 	beq.w	80060e8 <_strtod_l+0xb0>
 8006398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800639a:	4988      	ldr	r1, [pc, #544]	; (80065bc <_strtod_l+0x584>)
 800639c:	3b01      	subs	r3, #1
 800639e:	a815      	add	r0, sp, #84	; 0x54
 80063a0:	9315      	str	r3, [sp, #84]	; 0x54
 80063a2:	f001 f94d 	bl	8007640 <__match>
 80063a6:	b910      	cbnz	r0, 80063ae <_strtod_l+0x376>
 80063a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063aa:	3301      	adds	r3, #1
 80063ac:	9315      	str	r3, [sp, #84]	; 0x54
 80063ae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80065cc <_strtod_l+0x594>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	e67a      	b.n	80060ae <_strtod_l+0x76>
 80063b8:	4881      	ldr	r0, [pc, #516]	; (80065c0 <_strtod_l+0x588>)
 80063ba:	f000 fe3d 	bl	8007038 <nan>
 80063be:	ec59 8b10 	vmov	r8, r9, d0
 80063c2:	e674      	b.n	80060ae <_strtod_l+0x76>
 80063c4:	9b05      	ldr	r3, [sp, #20]
 80063c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063c8:	1afb      	subs	r3, r7, r3
 80063ca:	f1bb 0f00 	cmp.w	fp, #0
 80063ce:	bf08      	it	eq
 80063d0:	46b3      	moveq	fp, r6
 80063d2:	2e10      	cmp	r6, #16
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	4635      	mov	r5, r6
 80063d8:	bfa8      	it	ge
 80063da:	2510      	movge	r5, #16
 80063dc:	f7fa f8a2 	bl	8000524 <__aeabi_ui2d>
 80063e0:	2e09      	cmp	r6, #9
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	dd13      	ble.n	8006410 <_strtod_l+0x3d8>
 80063e8:	4b76      	ldr	r3, [pc, #472]	; (80065c4 <_strtod_l+0x58c>)
 80063ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80063ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80063f2:	f7fa f911 	bl	8000618 <__aeabi_dmul>
 80063f6:	4680      	mov	r8, r0
 80063f8:	4650      	mov	r0, sl
 80063fa:	4689      	mov	r9, r1
 80063fc:	f7fa f892 	bl	8000524 <__aeabi_ui2d>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4640      	mov	r0, r8
 8006406:	4649      	mov	r1, r9
 8006408:	f7f9 ff50 	bl	80002ac <__adddf3>
 800640c:	4680      	mov	r8, r0
 800640e:	4689      	mov	r9, r1
 8006410:	2e0f      	cmp	r6, #15
 8006412:	dc38      	bgt.n	8006486 <_strtod_l+0x44e>
 8006414:	9b08      	ldr	r3, [sp, #32]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f43f ae49 	beq.w	80060ae <_strtod_l+0x76>
 800641c:	dd24      	ble.n	8006468 <_strtod_l+0x430>
 800641e:	2b16      	cmp	r3, #22
 8006420:	dc0b      	bgt.n	800643a <_strtod_l+0x402>
 8006422:	4968      	ldr	r1, [pc, #416]	; (80065c4 <_strtod_l+0x58c>)
 8006424:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	f7fa f8f2 	bl	8000618 <__aeabi_dmul>
 8006434:	4680      	mov	r8, r0
 8006436:	4689      	mov	r9, r1
 8006438:	e639      	b.n	80060ae <_strtod_l+0x76>
 800643a:	9a08      	ldr	r2, [sp, #32]
 800643c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006440:	4293      	cmp	r3, r2
 8006442:	db20      	blt.n	8006486 <_strtod_l+0x44e>
 8006444:	4c5f      	ldr	r4, [pc, #380]	; (80065c4 <_strtod_l+0x58c>)
 8006446:	f1c6 060f 	rsb	r6, r6, #15
 800644a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800644e:	4642      	mov	r2, r8
 8006450:	464b      	mov	r3, r9
 8006452:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006456:	f7fa f8df 	bl	8000618 <__aeabi_dmul>
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	1b9e      	subs	r6, r3, r6
 800645e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006462:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006466:	e7e3      	b.n	8006430 <_strtod_l+0x3f8>
 8006468:	9b08      	ldr	r3, [sp, #32]
 800646a:	3316      	adds	r3, #22
 800646c:	db0b      	blt.n	8006486 <_strtod_l+0x44e>
 800646e:	9b05      	ldr	r3, [sp, #20]
 8006470:	1bdf      	subs	r7, r3, r7
 8006472:	4b54      	ldr	r3, [pc, #336]	; (80065c4 <_strtod_l+0x58c>)
 8006474:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647c:	4640      	mov	r0, r8
 800647e:	4649      	mov	r1, r9
 8006480:	f7fa f9f4 	bl	800086c <__aeabi_ddiv>
 8006484:	e7d6      	b.n	8006434 <_strtod_l+0x3fc>
 8006486:	9b08      	ldr	r3, [sp, #32]
 8006488:	1b75      	subs	r5, r6, r5
 800648a:	441d      	add	r5, r3
 800648c:	2d00      	cmp	r5, #0
 800648e:	dd70      	ble.n	8006572 <_strtod_l+0x53a>
 8006490:	f015 030f 	ands.w	r3, r5, #15
 8006494:	d00a      	beq.n	80064ac <_strtod_l+0x474>
 8006496:	494b      	ldr	r1, [pc, #300]	; (80065c4 <_strtod_l+0x58c>)
 8006498:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064a4:	f7fa f8b8 	bl	8000618 <__aeabi_dmul>
 80064a8:	4680      	mov	r8, r0
 80064aa:	4689      	mov	r9, r1
 80064ac:	f035 050f 	bics.w	r5, r5, #15
 80064b0:	d04d      	beq.n	800654e <_strtod_l+0x516>
 80064b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80064b6:	dd22      	ble.n	80064fe <_strtod_l+0x4c6>
 80064b8:	2500      	movs	r5, #0
 80064ba:	46ab      	mov	fp, r5
 80064bc:	9509      	str	r5, [sp, #36]	; 0x24
 80064be:	9505      	str	r5, [sp, #20]
 80064c0:	2322      	movs	r3, #34	; 0x22
 80064c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80065cc <_strtod_l+0x594>
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	f04f 0800 	mov.w	r8, #0
 80064cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f43f aded 	beq.w	80060ae <_strtod_l+0x76>
 80064d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80064d6:	4620      	mov	r0, r4
 80064d8:	f001 fa60 	bl	800799c <_Bfree>
 80064dc:	9905      	ldr	r1, [sp, #20]
 80064de:	4620      	mov	r0, r4
 80064e0:	f001 fa5c 	bl	800799c <_Bfree>
 80064e4:	4659      	mov	r1, fp
 80064e6:	4620      	mov	r0, r4
 80064e8:	f001 fa58 	bl	800799c <_Bfree>
 80064ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ee:	4620      	mov	r0, r4
 80064f0:	f001 fa54 	bl	800799c <_Bfree>
 80064f4:	4629      	mov	r1, r5
 80064f6:	4620      	mov	r0, r4
 80064f8:	f001 fa50 	bl	800799c <_Bfree>
 80064fc:	e5d7      	b.n	80060ae <_strtod_l+0x76>
 80064fe:	4b32      	ldr	r3, [pc, #200]	; (80065c8 <_strtod_l+0x590>)
 8006500:	9304      	str	r3, [sp, #16]
 8006502:	2300      	movs	r3, #0
 8006504:	112d      	asrs	r5, r5, #4
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	469a      	mov	sl, r3
 800650c:	2d01      	cmp	r5, #1
 800650e:	dc21      	bgt.n	8006554 <_strtod_l+0x51c>
 8006510:	b10b      	cbz	r3, 8006516 <_strtod_l+0x4de>
 8006512:	4680      	mov	r8, r0
 8006514:	4689      	mov	r9, r1
 8006516:	492c      	ldr	r1, [pc, #176]	; (80065c8 <_strtod_l+0x590>)
 8006518:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800651c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006528:	f7fa f876 	bl	8000618 <__aeabi_dmul>
 800652c:	4b27      	ldr	r3, [pc, #156]	; (80065cc <_strtod_l+0x594>)
 800652e:	460a      	mov	r2, r1
 8006530:	400b      	ands	r3, r1
 8006532:	4927      	ldr	r1, [pc, #156]	; (80065d0 <_strtod_l+0x598>)
 8006534:	428b      	cmp	r3, r1
 8006536:	4680      	mov	r8, r0
 8006538:	d8be      	bhi.n	80064b8 <_strtod_l+0x480>
 800653a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800653e:	428b      	cmp	r3, r1
 8006540:	bf86      	itte	hi
 8006542:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80065d4 <_strtod_l+0x59c>
 8006546:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800654a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800654e:	2300      	movs	r3, #0
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	e07b      	b.n	800664c <_strtod_l+0x614>
 8006554:	07ea      	lsls	r2, r5, #31
 8006556:	d505      	bpl.n	8006564 <_strtod_l+0x52c>
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f7fa f85b 	bl	8000618 <__aeabi_dmul>
 8006562:	2301      	movs	r3, #1
 8006564:	9a04      	ldr	r2, [sp, #16]
 8006566:	3208      	adds	r2, #8
 8006568:	f10a 0a01 	add.w	sl, sl, #1
 800656c:	106d      	asrs	r5, r5, #1
 800656e:	9204      	str	r2, [sp, #16]
 8006570:	e7cc      	b.n	800650c <_strtod_l+0x4d4>
 8006572:	d0ec      	beq.n	800654e <_strtod_l+0x516>
 8006574:	426d      	negs	r5, r5
 8006576:	f015 020f 	ands.w	r2, r5, #15
 800657a:	d00a      	beq.n	8006592 <_strtod_l+0x55a>
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <_strtod_l+0x58c>)
 800657e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7fa f96f 	bl	800086c <__aeabi_ddiv>
 800658e:	4680      	mov	r8, r0
 8006590:	4689      	mov	r9, r1
 8006592:	112d      	asrs	r5, r5, #4
 8006594:	d0db      	beq.n	800654e <_strtod_l+0x516>
 8006596:	2d1f      	cmp	r5, #31
 8006598:	dd1e      	ble.n	80065d8 <_strtod_l+0x5a0>
 800659a:	2500      	movs	r5, #0
 800659c:	46ab      	mov	fp, r5
 800659e:	9509      	str	r5, [sp, #36]	; 0x24
 80065a0:	9505      	str	r5, [sp, #20]
 80065a2:	2322      	movs	r3, #34	; 0x22
 80065a4:	f04f 0800 	mov.w	r8, #0
 80065a8:	f04f 0900 	mov.w	r9, #0
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	e78d      	b.n	80064cc <_strtod_l+0x494>
 80065b0:	08009aaf 	.word	0x08009aaf
 80065b4:	08009ac8 	.word	0x08009ac8
 80065b8:	08009aa6 	.word	0x08009aa6
 80065bc:	08009aa9 	.word	0x08009aa9
 80065c0:	08009aa3 	.word	0x08009aa3
 80065c4:	08009c20 	.word	0x08009c20
 80065c8:	08009bf8 	.word	0x08009bf8
 80065cc:	7ff00000 	.word	0x7ff00000
 80065d0:	7ca00000 	.word	0x7ca00000
 80065d4:	7fefffff 	.word	0x7fefffff
 80065d8:	f015 0310 	ands.w	r3, r5, #16
 80065dc:	bf18      	it	ne
 80065de:	236a      	movne	r3, #106	; 0x6a
 80065e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006984 <_strtod_l+0x94c>
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	4640      	mov	r0, r8
 80065e8:	4649      	mov	r1, r9
 80065ea:	2300      	movs	r3, #0
 80065ec:	07ea      	lsls	r2, r5, #31
 80065ee:	d504      	bpl.n	80065fa <_strtod_l+0x5c2>
 80065f0:	e9da 2300 	ldrd	r2, r3, [sl]
 80065f4:	f7fa f810 	bl	8000618 <__aeabi_dmul>
 80065f8:	2301      	movs	r3, #1
 80065fa:	106d      	asrs	r5, r5, #1
 80065fc:	f10a 0a08 	add.w	sl, sl, #8
 8006600:	d1f4      	bne.n	80065ec <_strtod_l+0x5b4>
 8006602:	b10b      	cbz	r3, 8006608 <_strtod_l+0x5d0>
 8006604:	4680      	mov	r8, r0
 8006606:	4689      	mov	r9, r1
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	b1bb      	cbz	r3, 800663c <_strtod_l+0x604>
 800660c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006610:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006614:	2b00      	cmp	r3, #0
 8006616:	4649      	mov	r1, r9
 8006618:	dd10      	ble.n	800663c <_strtod_l+0x604>
 800661a:	2b1f      	cmp	r3, #31
 800661c:	f340 811e 	ble.w	800685c <_strtod_l+0x824>
 8006620:	2b34      	cmp	r3, #52	; 0x34
 8006622:	bfde      	ittt	le
 8006624:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006628:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800662c:	4093      	lslle	r3, r2
 800662e:	f04f 0800 	mov.w	r8, #0
 8006632:	bfcc      	ite	gt
 8006634:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006638:	ea03 0901 	andle.w	r9, r3, r1
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7fa fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 8006648:	2800      	cmp	r0, #0
 800664a:	d1a6      	bne.n	800659a <_strtod_l+0x562>
 800664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006652:	4633      	mov	r3, r6
 8006654:	465a      	mov	r2, fp
 8006656:	4620      	mov	r0, r4
 8006658:	f001 fa08 	bl	8007a6c <__s2b>
 800665c:	9009      	str	r0, [sp, #36]	; 0x24
 800665e:	2800      	cmp	r0, #0
 8006660:	f43f af2a 	beq.w	80064b8 <_strtod_l+0x480>
 8006664:	9a08      	ldr	r2, [sp, #32]
 8006666:	9b05      	ldr	r3, [sp, #20]
 8006668:	2a00      	cmp	r2, #0
 800666a:	eba3 0307 	sub.w	r3, r3, r7
 800666e:	bfa8      	it	ge
 8006670:	2300      	movge	r3, #0
 8006672:	930c      	str	r3, [sp, #48]	; 0x30
 8006674:	2500      	movs	r5, #0
 8006676:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800667a:	9312      	str	r3, [sp, #72]	; 0x48
 800667c:	46ab      	mov	fp, r5
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	4620      	mov	r0, r4
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	f001 f94a 	bl	800791c <_Balloc>
 8006688:	9005      	str	r0, [sp, #20]
 800668a:	2800      	cmp	r0, #0
 800668c:	f43f af18 	beq.w	80064c0 <_strtod_l+0x488>
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	3202      	adds	r2, #2
 8006696:	f103 010c 	add.w	r1, r3, #12
 800669a:	0092      	lsls	r2, r2, #2
 800669c:	300c      	adds	r0, #12
 800669e:	f000 fcba 	bl	8007016 <memcpy>
 80066a2:	ec49 8b10 	vmov	d0, r8, r9
 80066a6:	aa18      	add	r2, sp, #96	; 0x60
 80066a8:	a917      	add	r1, sp, #92	; 0x5c
 80066aa:	4620      	mov	r0, r4
 80066ac:	f001 fd12 	bl	80080d4 <__d2b>
 80066b0:	ec49 8b18 	vmov	d8, r8, r9
 80066b4:	9016      	str	r0, [sp, #88]	; 0x58
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f af02 	beq.w	80064c0 <_strtod_l+0x488>
 80066bc:	2101      	movs	r1, #1
 80066be:	4620      	mov	r0, r4
 80066c0:	f001 fa6c 	bl	8007b9c <__i2b>
 80066c4:	4683      	mov	fp, r0
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f43f aefa 	beq.w	80064c0 <_strtod_l+0x488>
 80066cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80066ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	bfab      	itete	ge
 80066d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80066d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80066d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80066da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80066de:	bfac      	ite	ge
 80066e0:	eb06 0a03 	addge.w	sl, r6, r3
 80066e4:	1b9f      	sublt	r7, r3, r6
 80066e6:	9b04      	ldr	r3, [sp, #16]
 80066e8:	1af6      	subs	r6, r6, r3
 80066ea:	4416      	add	r6, r2
 80066ec:	4ba0      	ldr	r3, [pc, #640]	; (8006970 <_strtod_l+0x938>)
 80066ee:	3e01      	subs	r6, #1
 80066f0:	429e      	cmp	r6, r3
 80066f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80066f6:	f280 80c4 	bge.w	8006882 <_strtod_l+0x84a>
 80066fa:	1b9b      	subs	r3, r3, r6
 80066fc:	2b1f      	cmp	r3, #31
 80066fe:	eba2 0203 	sub.w	r2, r2, r3
 8006702:	f04f 0101 	mov.w	r1, #1
 8006706:	f300 80b0 	bgt.w	800686a <_strtod_l+0x832>
 800670a:	fa01 f303 	lsl.w	r3, r1, r3
 800670e:	930e      	str	r3, [sp, #56]	; 0x38
 8006710:	2300      	movs	r3, #0
 8006712:	930d      	str	r3, [sp, #52]	; 0x34
 8006714:	eb0a 0602 	add.w	r6, sl, r2
 8006718:	9b04      	ldr	r3, [sp, #16]
 800671a:	45b2      	cmp	sl, r6
 800671c:	4417      	add	r7, r2
 800671e:	441f      	add	r7, r3
 8006720:	4653      	mov	r3, sl
 8006722:	bfa8      	it	ge
 8006724:	4633      	movge	r3, r6
 8006726:	42bb      	cmp	r3, r7
 8006728:	bfa8      	it	ge
 800672a:	463b      	movge	r3, r7
 800672c:	2b00      	cmp	r3, #0
 800672e:	bfc2      	ittt	gt
 8006730:	1af6      	subgt	r6, r6, r3
 8006732:	1aff      	subgt	r7, r7, r3
 8006734:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800673a:	2b00      	cmp	r3, #0
 800673c:	dd17      	ble.n	800676e <_strtod_l+0x736>
 800673e:	4659      	mov	r1, fp
 8006740:	461a      	mov	r2, r3
 8006742:	4620      	mov	r0, r4
 8006744:	f001 faea 	bl	8007d1c <__pow5mult>
 8006748:	4683      	mov	fp, r0
 800674a:	2800      	cmp	r0, #0
 800674c:	f43f aeb8 	beq.w	80064c0 <_strtod_l+0x488>
 8006750:	4601      	mov	r1, r0
 8006752:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006754:	4620      	mov	r0, r4
 8006756:	f001 fa37 	bl	8007bc8 <__multiply>
 800675a:	900b      	str	r0, [sp, #44]	; 0x2c
 800675c:	2800      	cmp	r0, #0
 800675e:	f43f aeaf 	beq.w	80064c0 <_strtod_l+0x488>
 8006762:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006764:	4620      	mov	r0, r4
 8006766:	f001 f919 	bl	800799c <_Bfree>
 800676a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800676c:	9316      	str	r3, [sp, #88]	; 0x58
 800676e:	2e00      	cmp	r6, #0
 8006770:	f300 808c 	bgt.w	800688c <_strtod_l+0x854>
 8006774:	9b08      	ldr	r3, [sp, #32]
 8006776:	2b00      	cmp	r3, #0
 8006778:	dd08      	ble.n	800678c <_strtod_l+0x754>
 800677a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800677c:	9905      	ldr	r1, [sp, #20]
 800677e:	4620      	mov	r0, r4
 8006780:	f001 facc 	bl	8007d1c <__pow5mult>
 8006784:	9005      	str	r0, [sp, #20]
 8006786:	2800      	cmp	r0, #0
 8006788:	f43f ae9a 	beq.w	80064c0 <_strtod_l+0x488>
 800678c:	2f00      	cmp	r7, #0
 800678e:	dd08      	ble.n	80067a2 <_strtod_l+0x76a>
 8006790:	9905      	ldr	r1, [sp, #20]
 8006792:	463a      	mov	r2, r7
 8006794:	4620      	mov	r0, r4
 8006796:	f001 fb1b 	bl	8007dd0 <__lshift>
 800679a:	9005      	str	r0, [sp, #20]
 800679c:	2800      	cmp	r0, #0
 800679e:	f43f ae8f 	beq.w	80064c0 <_strtod_l+0x488>
 80067a2:	f1ba 0f00 	cmp.w	sl, #0
 80067a6:	dd08      	ble.n	80067ba <_strtod_l+0x782>
 80067a8:	4659      	mov	r1, fp
 80067aa:	4652      	mov	r2, sl
 80067ac:	4620      	mov	r0, r4
 80067ae:	f001 fb0f 	bl	8007dd0 <__lshift>
 80067b2:	4683      	mov	fp, r0
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f43f ae83 	beq.w	80064c0 <_strtod_l+0x488>
 80067ba:	9a05      	ldr	r2, [sp, #20]
 80067bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80067be:	4620      	mov	r0, r4
 80067c0:	f001 fb8e 	bl	8007ee0 <__mdiff>
 80067c4:	4605      	mov	r5, r0
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f ae7a 	beq.w	80064c0 <_strtod_l+0x488>
 80067cc:	68c3      	ldr	r3, [r0, #12]
 80067ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d0:	2300      	movs	r3, #0
 80067d2:	60c3      	str	r3, [r0, #12]
 80067d4:	4659      	mov	r1, fp
 80067d6:	f001 fb67 	bl	8007ea8 <__mcmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	da60      	bge.n	80068a0 <_strtod_l+0x868>
 80067de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e0:	ea53 0308 	orrs.w	r3, r3, r8
 80067e4:	f040 8084 	bne.w	80068f0 <_strtod_l+0x8b8>
 80067e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d17f      	bne.n	80068f0 <_strtod_l+0x8b8>
 80067f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067f4:	0d1b      	lsrs	r3, r3, #20
 80067f6:	051b      	lsls	r3, r3, #20
 80067f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80067fc:	d978      	bls.n	80068f0 <_strtod_l+0x8b8>
 80067fe:	696b      	ldr	r3, [r5, #20]
 8006800:	b913      	cbnz	r3, 8006808 <_strtod_l+0x7d0>
 8006802:	692b      	ldr	r3, [r5, #16]
 8006804:	2b01      	cmp	r3, #1
 8006806:	dd73      	ble.n	80068f0 <_strtod_l+0x8b8>
 8006808:	4629      	mov	r1, r5
 800680a:	2201      	movs	r2, #1
 800680c:	4620      	mov	r0, r4
 800680e:	f001 fadf 	bl	8007dd0 <__lshift>
 8006812:	4659      	mov	r1, fp
 8006814:	4605      	mov	r5, r0
 8006816:	f001 fb47 	bl	8007ea8 <__mcmp>
 800681a:	2800      	cmp	r0, #0
 800681c:	dd68      	ble.n	80068f0 <_strtod_l+0x8b8>
 800681e:	9904      	ldr	r1, [sp, #16]
 8006820:	4a54      	ldr	r2, [pc, #336]	; (8006974 <_strtod_l+0x93c>)
 8006822:	464b      	mov	r3, r9
 8006824:	2900      	cmp	r1, #0
 8006826:	f000 8084 	beq.w	8006932 <_strtod_l+0x8fa>
 800682a:	ea02 0109 	and.w	r1, r2, r9
 800682e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006832:	dc7e      	bgt.n	8006932 <_strtod_l+0x8fa>
 8006834:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006838:	f77f aeb3 	ble.w	80065a2 <_strtod_l+0x56a>
 800683c:	4b4e      	ldr	r3, [pc, #312]	; (8006978 <_strtod_l+0x940>)
 800683e:	4640      	mov	r0, r8
 8006840:	4649      	mov	r1, r9
 8006842:	2200      	movs	r2, #0
 8006844:	f7f9 fee8 	bl	8000618 <__aeabi_dmul>
 8006848:	4b4a      	ldr	r3, [pc, #296]	; (8006974 <_strtod_l+0x93c>)
 800684a:	400b      	ands	r3, r1
 800684c:	4680      	mov	r8, r0
 800684e:	4689      	mov	r9, r1
 8006850:	2b00      	cmp	r3, #0
 8006852:	f47f ae3f 	bne.w	80064d4 <_strtod_l+0x49c>
 8006856:	2322      	movs	r3, #34	; 0x22
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	e63b      	b.n	80064d4 <_strtod_l+0x49c>
 800685c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	ea03 0808 	and.w	r8, r3, r8
 8006868:	e6e8      	b.n	800663c <_strtod_l+0x604>
 800686a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800686e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006872:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006876:	36e2      	adds	r6, #226	; 0xe2
 8006878:	fa01 f306 	lsl.w	r3, r1, r6
 800687c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006880:	e748      	b.n	8006714 <_strtod_l+0x6dc>
 8006882:	2100      	movs	r1, #0
 8006884:	2301      	movs	r3, #1
 8006886:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800688a:	e743      	b.n	8006714 <_strtod_l+0x6dc>
 800688c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800688e:	4632      	mov	r2, r6
 8006890:	4620      	mov	r0, r4
 8006892:	f001 fa9d 	bl	8007dd0 <__lshift>
 8006896:	9016      	str	r0, [sp, #88]	; 0x58
 8006898:	2800      	cmp	r0, #0
 800689a:	f47f af6b 	bne.w	8006774 <_strtod_l+0x73c>
 800689e:	e60f      	b.n	80064c0 <_strtod_l+0x488>
 80068a0:	46ca      	mov	sl, r9
 80068a2:	d171      	bne.n	8006988 <_strtod_l+0x950>
 80068a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068aa:	b352      	cbz	r2, 8006902 <_strtod_l+0x8ca>
 80068ac:	4a33      	ldr	r2, [pc, #204]	; (800697c <_strtod_l+0x944>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d12a      	bne.n	8006908 <_strtod_l+0x8d0>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	4641      	mov	r1, r8
 80068b6:	b1fb      	cbz	r3, 80068f8 <_strtod_l+0x8c0>
 80068b8:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <_strtod_l+0x93c>)
 80068ba:	ea09 0303 	and.w	r3, r9, r3
 80068be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068c6:	d81a      	bhi.n	80068fe <_strtod_l+0x8c6>
 80068c8:	0d1b      	lsrs	r3, r3, #20
 80068ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d118      	bne.n	8006908 <_strtod_l+0x8d0>
 80068d6:	4b2a      	ldr	r3, [pc, #168]	; (8006980 <_strtod_l+0x948>)
 80068d8:	459a      	cmp	sl, r3
 80068da:	d102      	bne.n	80068e2 <_strtod_l+0x8aa>
 80068dc:	3101      	adds	r1, #1
 80068de:	f43f adef 	beq.w	80064c0 <_strtod_l+0x488>
 80068e2:	4b24      	ldr	r3, [pc, #144]	; (8006974 <_strtod_l+0x93c>)
 80068e4:	ea0a 0303 	and.w	r3, sl, r3
 80068e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80068ec:	f04f 0800 	mov.w	r8, #0
 80068f0:	9b04      	ldr	r3, [sp, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1a2      	bne.n	800683c <_strtod_l+0x804>
 80068f6:	e5ed      	b.n	80064d4 <_strtod_l+0x49c>
 80068f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068fc:	e7e9      	b.n	80068d2 <_strtod_l+0x89a>
 80068fe:	4613      	mov	r3, r2
 8006900:	e7e7      	b.n	80068d2 <_strtod_l+0x89a>
 8006902:	ea53 0308 	orrs.w	r3, r3, r8
 8006906:	d08a      	beq.n	800681e <_strtod_l+0x7e6>
 8006908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800690a:	b1e3      	cbz	r3, 8006946 <_strtod_l+0x90e>
 800690c:	ea13 0f0a 	tst.w	r3, sl
 8006910:	d0ee      	beq.n	80068f0 <_strtod_l+0x8b8>
 8006912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006914:	9a04      	ldr	r2, [sp, #16]
 8006916:	4640      	mov	r0, r8
 8006918:	4649      	mov	r1, r9
 800691a:	b1c3      	cbz	r3, 800694e <_strtod_l+0x916>
 800691c:	f7ff fb6f 	bl	8005ffe <sulp>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	ec51 0b18 	vmov	r0, r1, d8
 8006928:	f7f9 fcc0 	bl	80002ac <__adddf3>
 800692c:	4680      	mov	r8, r0
 800692e:	4689      	mov	r9, r1
 8006930:	e7de      	b.n	80068f0 <_strtod_l+0x8b8>
 8006932:	4013      	ands	r3, r2
 8006934:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006938:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800693c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006940:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006944:	e7d4      	b.n	80068f0 <_strtod_l+0x8b8>
 8006946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006948:	ea13 0f08 	tst.w	r3, r8
 800694c:	e7e0      	b.n	8006910 <_strtod_l+0x8d8>
 800694e:	f7ff fb56 	bl	8005ffe <sulp>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	ec51 0b18 	vmov	r0, r1, d8
 800695a:	f7f9 fca5 	bl	80002a8 <__aeabi_dsub>
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	4680      	mov	r8, r0
 8006964:	4689      	mov	r9, r1
 8006966:	f7fa f8bf 	bl	8000ae8 <__aeabi_dcmpeq>
 800696a:	2800      	cmp	r0, #0
 800696c:	d0c0      	beq.n	80068f0 <_strtod_l+0x8b8>
 800696e:	e618      	b.n	80065a2 <_strtod_l+0x56a>
 8006970:	fffffc02 	.word	0xfffffc02
 8006974:	7ff00000 	.word	0x7ff00000
 8006978:	39500000 	.word	0x39500000
 800697c:	000fffff 	.word	0x000fffff
 8006980:	7fefffff 	.word	0x7fefffff
 8006984:	08009ae0 	.word	0x08009ae0
 8006988:	4659      	mov	r1, fp
 800698a:	4628      	mov	r0, r5
 800698c:	f001 fbfc 	bl	8008188 <__ratio>
 8006990:	ec57 6b10 	vmov	r6, r7, d0
 8006994:	ee10 0a10 	vmov	r0, s0
 8006998:	2200      	movs	r2, #0
 800699a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800699e:	4639      	mov	r1, r7
 80069a0:	f7fa f8b6 	bl	8000b10 <__aeabi_dcmple>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d071      	beq.n	8006a8c <_strtod_l+0xa54>
 80069a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d17c      	bne.n	8006aa8 <_strtod_l+0xa70>
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d15a      	bne.n	8006a6a <_strtod_l+0xa32>
 80069b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d15d      	bne.n	8006a78 <_strtod_l+0xa40>
 80069bc:	4b90      	ldr	r3, [pc, #576]	; (8006c00 <_strtod_l+0xbc8>)
 80069be:	2200      	movs	r2, #0
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7fa f89a 	bl	8000afc <__aeabi_dcmplt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d15c      	bne.n	8006a86 <_strtod_l+0xa4e>
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	4b8c      	ldr	r3, [pc, #560]	; (8006c04 <_strtod_l+0xbcc>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	f7f9 fe20 	bl	8000618 <__aeabi_dmul>
 80069d8:	4606      	mov	r6, r0
 80069da:	460f      	mov	r7, r1
 80069dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80069e0:	9606      	str	r6, [sp, #24]
 80069e2:	9307      	str	r3, [sp, #28]
 80069e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80069ec:	4b86      	ldr	r3, [pc, #536]	; (8006c08 <_strtod_l+0xbd0>)
 80069ee:	ea0a 0303 	and.w	r3, sl, r3
 80069f2:	930d      	str	r3, [sp, #52]	; 0x34
 80069f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069f6:	4b85      	ldr	r3, [pc, #532]	; (8006c0c <_strtod_l+0xbd4>)
 80069f8:	429a      	cmp	r2, r3
 80069fa:	f040 8090 	bne.w	8006b1e <_strtod_l+0xae6>
 80069fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006a02:	ec49 8b10 	vmov	d0, r8, r9
 8006a06:	f001 faf5 	bl	8007ff4 <__ulp>
 8006a0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a0e:	ec51 0b10 	vmov	r0, r1, d0
 8006a12:	f7f9 fe01 	bl	8000618 <__aeabi_dmul>
 8006a16:	4642      	mov	r2, r8
 8006a18:	464b      	mov	r3, r9
 8006a1a:	f7f9 fc47 	bl	80002ac <__adddf3>
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4979      	ldr	r1, [pc, #484]	; (8006c08 <_strtod_l+0xbd0>)
 8006a22:	4a7b      	ldr	r2, [pc, #492]	; (8006c10 <_strtod_l+0xbd8>)
 8006a24:	4019      	ands	r1, r3
 8006a26:	4291      	cmp	r1, r2
 8006a28:	4680      	mov	r8, r0
 8006a2a:	d944      	bls.n	8006ab6 <_strtod_l+0xa7e>
 8006a2c:	ee18 2a90 	vmov	r2, s17
 8006a30:	4b78      	ldr	r3, [pc, #480]	; (8006c14 <_strtod_l+0xbdc>)
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d104      	bne.n	8006a40 <_strtod_l+0xa08>
 8006a36:	ee18 3a10 	vmov	r3, s16
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f43f ad40 	beq.w	80064c0 <_strtod_l+0x488>
 8006a40:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8006c14 <_strtod_l+0xbdc>
 8006a44:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006a48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 ffa6 	bl	800799c <_Bfree>
 8006a50:	9905      	ldr	r1, [sp, #20]
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 ffa2 	bl	800799c <_Bfree>
 8006a58:	4659      	mov	r1, fp
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 ff9e 	bl	800799c <_Bfree>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 ff9a 	bl	800799c <_Bfree>
 8006a68:	e609      	b.n	800667e <_strtod_l+0x646>
 8006a6a:	f1b8 0f01 	cmp.w	r8, #1
 8006a6e:	d103      	bne.n	8006a78 <_strtod_l+0xa40>
 8006a70:	f1b9 0f00 	cmp.w	r9, #0
 8006a74:	f43f ad95 	beq.w	80065a2 <_strtod_l+0x56a>
 8006a78:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006bd0 <_strtod_l+0xb98>
 8006a7c:	4f60      	ldr	r7, [pc, #384]	; (8006c00 <_strtod_l+0xbc8>)
 8006a7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006a82:	2600      	movs	r6, #0
 8006a84:	e7ae      	b.n	80069e4 <_strtod_l+0x9ac>
 8006a86:	4f5f      	ldr	r7, [pc, #380]	; (8006c04 <_strtod_l+0xbcc>)
 8006a88:	2600      	movs	r6, #0
 8006a8a:	e7a7      	b.n	80069dc <_strtod_l+0x9a4>
 8006a8c:	4b5d      	ldr	r3, [pc, #372]	; (8006c04 <_strtod_l+0xbcc>)
 8006a8e:	4630      	mov	r0, r6
 8006a90:	4639      	mov	r1, r7
 8006a92:	2200      	movs	r2, #0
 8006a94:	f7f9 fdc0 	bl	8000618 <__aeabi_dmul>
 8006a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d09c      	beq.n	80069dc <_strtod_l+0x9a4>
 8006aa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006aa6:	e79d      	b.n	80069e4 <_strtod_l+0x9ac>
 8006aa8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006bd8 <_strtod_l+0xba0>
 8006aac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ab0:	ec57 6b17 	vmov	r6, r7, d7
 8006ab4:	e796      	b.n	80069e4 <_strtod_l+0x9ac>
 8006ab6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006aba:	9b04      	ldr	r3, [sp, #16]
 8006abc:	46ca      	mov	sl, r9
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1c2      	bne.n	8006a48 <_strtod_l+0xa10>
 8006ac2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ac8:	0d1b      	lsrs	r3, r3, #20
 8006aca:	051b      	lsls	r3, r3, #20
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d1bb      	bne.n	8006a48 <_strtod_l+0xa10>
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7fa f89a 	bl	8000c0c <__aeabi_d2lz>
 8006ad8:	f7f9 fd70 	bl	80005bc <__aeabi_l2d>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7f9 fbe0 	bl	80002a8 <__aeabi_dsub>
 8006ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006aee:	ea43 0308 	orr.w	r3, r3, r8
 8006af2:	4313      	orrs	r3, r2
 8006af4:	4606      	mov	r6, r0
 8006af6:	460f      	mov	r7, r1
 8006af8:	d054      	beq.n	8006ba4 <_strtod_l+0xb6c>
 8006afa:	a339      	add	r3, pc, #228	; (adr r3, 8006be0 <_strtod_l+0xba8>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 fffc 	bl	8000afc <__aeabi_dcmplt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f47f ace5 	bne.w	80064d4 <_strtod_l+0x49c>
 8006b0a:	a337      	add	r3, pc, #220	; (adr r3, 8006be8 <_strtod_l+0xbb0>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	4630      	mov	r0, r6
 8006b12:	4639      	mov	r1, r7
 8006b14:	f7fa f810 	bl	8000b38 <__aeabi_dcmpgt>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d095      	beq.n	8006a48 <_strtod_l+0xa10>
 8006b1c:	e4da      	b.n	80064d4 <_strtod_l+0x49c>
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	b333      	cbz	r3, 8006b70 <_strtod_l+0xb38>
 8006b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b28:	d822      	bhi.n	8006b70 <_strtod_l+0xb38>
 8006b2a:	a331      	add	r3, pc, #196	; (adr r3, 8006bf0 <_strtod_l+0xbb8>)
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 ffec 	bl	8000b10 <__aeabi_dcmple>
 8006b38:	b1a0      	cbz	r0, 8006b64 <_strtod_l+0xb2c>
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f7fa f82d 	bl	8000b9c <__aeabi_d2uiz>
 8006b42:	2801      	cmp	r0, #1
 8006b44:	bf38      	it	cc
 8006b46:	2001      	movcc	r0, #1
 8006b48:	f7f9 fcec 	bl	8000524 <__aeabi_ui2d>
 8006b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b4e:	4606      	mov	r6, r0
 8006b50:	460f      	mov	r7, r1
 8006b52:	bb23      	cbnz	r3, 8006b9e <_strtod_l+0xb66>
 8006b54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b58:	9010      	str	r0, [sp, #64]	; 0x40
 8006b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b74:	eeb0 0a48 	vmov.f32	s0, s16
 8006b78:	eef0 0a68 	vmov.f32	s1, s17
 8006b7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006b80:	f001 fa38 	bl	8007ff4 <__ulp>
 8006b84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b88:	ec53 2b10 	vmov	r2, r3, d0
 8006b8c:	f7f9 fd44 	bl	8000618 <__aeabi_dmul>
 8006b90:	ec53 2b18 	vmov	r2, r3, d8
 8006b94:	f7f9 fb8a 	bl	80002ac <__adddf3>
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	e78d      	b.n	8006aba <_strtod_l+0xa82>
 8006b9e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006ba2:	e7db      	b.n	8006b5c <_strtod_l+0xb24>
 8006ba4:	a314      	add	r3, pc, #80	; (adr r3, 8006bf8 <_strtod_l+0xbc0>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 ffa7 	bl	8000afc <__aeabi_dcmplt>
 8006bae:	e7b3      	b.n	8006b18 <_strtod_l+0xae0>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	f7ff ba7c 	b.w	80060b6 <_strtod_l+0x7e>
 8006bbe:	2a65      	cmp	r2, #101	; 0x65
 8006bc0:	f43f ab75 	beq.w	80062ae <_strtod_l+0x276>
 8006bc4:	2a45      	cmp	r2, #69	; 0x45
 8006bc6:	f43f ab72 	beq.w	80062ae <_strtod_l+0x276>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f7ff bbaa 	b.w	8006324 <_strtod_l+0x2ec>
 8006bd0:	00000000 	.word	0x00000000
 8006bd4:	bff00000 	.word	0xbff00000
 8006bd8:	00000000 	.word	0x00000000
 8006bdc:	3ff00000 	.word	0x3ff00000
 8006be0:	94a03595 	.word	0x94a03595
 8006be4:	3fdfffff 	.word	0x3fdfffff
 8006be8:	35afe535 	.word	0x35afe535
 8006bec:	3fe00000 	.word	0x3fe00000
 8006bf0:	ffc00000 	.word	0xffc00000
 8006bf4:	41dfffff 	.word	0x41dfffff
 8006bf8:	94a03595 	.word	0x94a03595
 8006bfc:	3fcfffff 	.word	0x3fcfffff
 8006c00:	3ff00000 	.word	0x3ff00000
 8006c04:	3fe00000 	.word	0x3fe00000
 8006c08:	7ff00000 	.word	0x7ff00000
 8006c0c:	7fe00000 	.word	0x7fe00000
 8006c10:	7c9fffff 	.word	0x7c9fffff
 8006c14:	7fefffff 	.word	0x7fefffff

08006c18 <strtod>:
 8006c18:	460a      	mov	r2, r1
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4802      	ldr	r0, [pc, #8]	; (8006c28 <strtod+0x10>)
 8006c1e:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <strtod+0x14>)
 8006c20:	6800      	ldr	r0, [r0, #0]
 8006c22:	f7ff ba09 	b.w	8006038 <_strtod_l>
 8006c26:	bf00      	nop
 8006c28:	200001d8 	.word	0x200001d8
 8006c2c:	20000020 	.word	0x20000020

08006c30 <std>:
 8006c30:	2300      	movs	r3, #0
 8006c32:	b510      	push	{r4, lr}
 8006c34:	4604      	mov	r4, r0
 8006c36:	e9c0 3300 	strd	r3, r3, [r0]
 8006c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c3e:	6083      	str	r3, [r0, #8]
 8006c40:	8181      	strh	r1, [r0, #12]
 8006c42:	6643      	str	r3, [r0, #100]	; 0x64
 8006c44:	81c2      	strh	r2, [r0, #14]
 8006c46:	6183      	str	r3, [r0, #24]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	305c      	adds	r0, #92	; 0x5c
 8006c4e:	f000 f954 	bl	8006efa <memset>
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <std+0x58>)
 8006c54:	6263      	str	r3, [r4, #36]	; 0x24
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <std+0x5c>)
 8006c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <std+0x60>)
 8006c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <std+0x64>)
 8006c60:	6323      	str	r3, [r4, #48]	; 0x30
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <std+0x68>)
 8006c64:	6224      	str	r4, [r4, #32]
 8006c66:	429c      	cmp	r4, r3
 8006c68:	d006      	beq.n	8006c78 <std+0x48>
 8006c6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c6e:	4294      	cmp	r4, r2
 8006c70:	d002      	beq.n	8006c78 <std+0x48>
 8006c72:	33d0      	adds	r3, #208	; 0xd0
 8006c74:	429c      	cmp	r4, r3
 8006c76:	d105      	bne.n	8006c84 <std+0x54>
 8006c78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c80:	f000 b9c6 	b.w	8007010 <__retarget_lock_init_recursive>
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	bf00      	nop
 8006c88:	08006e71 	.word	0x08006e71
 8006c8c:	08006e97 	.word	0x08006e97
 8006c90:	08006ecf 	.word	0x08006ecf
 8006c94:	08006ef3 	.word	0x08006ef3
 8006c98:	2000075c 	.word	0x2000075c

08006c9c <stdio_exit_handler>:
 8006c9c:	4a02      	ldr	r2, [pc, #8]	; (8006ca8 <stdio_exit_handler+0xc>)
 8006c9e:	4903      	ldr	r1, [pc, #12]	; (8006cac <stdio_exit_handler+0x10>)
 8006ca0:	4803      	ldr	r0, [pc, #12]	; (8006cb0 <stdio_exit_handler+0x14>)
 8006ca2:	f000 b87b 	b.w	8006d9c <_fwalk_sglue>
 8006ca6:	bf00      	nop
 8006ca8:	20000014 	.word	0x20000014
 8006cac:	08009235 	.word	0x08009235
 8006cb0:	2000018c 	.word	0x2000018c

08006cb4 <cleanup_stdio>:
 8006cb4:	6841      	ldr	r1, [r0, #4]
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <cleanup_stdio+0x34>)
 8006cb8:	4299      	cmp	r1, r3
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	d001      	beq.n	8006cc4 <cleanup_stdio+0x10>
 8006cc0:	f002 fab8 	bl	8009234 <_fflush_r>
 8006cc4:	68a1      	ldr	r1, [r4, #8]
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <cleanup_stdio+0x38>)
 8006cc8:	4299      	cmp	r1, r3
 8006cca:	d002      	beq.n	8006cd2 <cleanup_stdio+0x1e>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f002 fab1 	bl	8009234 <_fflush_r>
 8006cd2:	68e1      	ldr	r1, [r4, #12]
 8006cd4:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <cleanup_stdio+0x3c>)
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	d004      	beq.n	8006ce4 <cleanup_stdio+0x30>
 8006cda:	4620      	mov	r0, r4
 8006cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce0:	f002 baa8 	b.w	8009234 <_fflush_r>
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	bf00      	nop
 8006ce8:	2000075c 	.word	0x2000075c
 8006cec:	200007c4 	.word	0x200007c4
 8006cf0:	2000082c 	.word	0x2000082c

08006cf4 <global_stdio_init.part.0>:
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <global_stdio_init.part.0+0x30>)
 8006cf8:	4c0b      	ldr	r4, [pc, #44]	; (8006d28 <global_stdio_init.part.0+0x34>)
 8006cfa:	4a0c      	ldr	r2, [pc, #48]	; (8006d2c <global_stdio_init.part.0+0x38>)
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	2200      	movs	r2, #0
 8006d02:	2104      	movs	r1, #4
 8006d04:	f7ff ff94 	bl	8006c30 <std>
 8006d08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	2109      	movs	r1, #9
 8006d10:	f7ff ff8e 	bl	8006c30 <std>
 8006d14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d18:	2202      	movs	r2, #2
 8006d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1e:	2112      	movs	r1, #18
 8006d20:	f7ff bf86 	b.w	8006c30 <std>
 8006d24:	20000894 	.word	0x20000894
 8006d28:	2000075c 	.word	0x2000075c
 8006d2c:	08006c9d 	.word	0x08006c9d

08006d30 <__sfp_lock_acquire>:
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <__sfp_lock_acquire+0x8>)
 8006d32:	f000 b96e 	b.w	8007012 <__retarget_lock_acquire_recursive>
 8006d36:	bf00      	nop
 8006d38:	2000089d 	.word	0x2000089d

08006d3c <__sfp_lock_release>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__sfp_lock_release+0x8>)
 8006d3e:	f000 b969 	b.w	8007014 <__retarget_lock_release_recursive>
 8006d42:	bf00      	nop
 8006d44:	2000089d 	.word	0x2000089d

08006d48 <__sinit>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	f7ff fff0 	bl	8006d30 <__sfp_lock_acquire>
 8006d50:	6a23      	ldr	r3, [r4, #32]
 8006d52:	b11b      	cbz	r3, 8006d5c <__sinit+0x14>
 8006d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d58:	f7ff bff0 	b.w	8006d3c <__sfp_lock_release>
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <__sinit+0x28>)
 8006d5e:	6223      	str	r3, [r4, #32]
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <__sinit+0x2c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f5      	bne.n	8006d54 <__sinit+0xc>
 8006d68:	f7ff ffc4 	bl	8006cf4 <global_stdio_init.part.0>
 8006d6c:	e7f2      	b.n	8006d54 <__sinit+0xc>
 8006d6e:	bf00      	nop
 8006d70:	08006cb5 	.word	0x08006cb5
 8006d74:	20000894 	.word	0x20000894

08006d78 <fiprintf>:
 8006d78:	b40e      	push	{r1, r2, r3}
 8006d7a:	b503      	push	{r0, r1, lr}
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	4805      	ldr	r0, [pc, #20]	; (8006d98 <fiprintf+0x20>)
 8006d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d86:	6800      	ldr	r0, [r0, #0]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	f001 fdd5 	bl	8008938 <_vfiprintf_r>
 8006d8e:	b002      	add	sp, #8
 8006d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d94:	b003      	add	sp, #12
 8006d96:	4770      	bx	lr
 8006d98:	200001d8 	.word	0x200001d8

08006d9c <_fwalk_sglue>:
 8006d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da0:	4607      	mov	r7, r0
 8006da2:	4688      	mov	r8, r1
 8006da4:	4614      	mov	r4, r2
 8006da6:	2600      	movs	r6, #0
 8006da8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dac:	f1b9 0901 	subs.w	r9, r9, #1
 8006db0:	d505      	bpl.n	8006dbe <_fwalk_sglue+0x22>
 8006db2:	6824      	ldr	r4, [r4, #0]
 8006db4:	2c00      	cmp	r4, #0
 8006db6:	d1f7      	bne.n	8006da8 <_fwalk_sglue+0xc>
 8006db8:	4630      	mov	r0, r6
 8006dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dbe:	89ab      	ldrh	r3, [r5, #12]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d907      	bls.n	8006dd4 <_fwalk_sglue+0x38>
 8006dc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	d003      	beq.n	8006dd4 <_fwalk_sglue+0x38>
 8006dcc:	4629      	mov	r1, r5
 8006dce:	4638      	mov	r0, r7
 8006dd0:	47c0      	blx	r8
 8006dd2:	4306      	orrs	r6, r0
 8006dd4:	3568      	adds	r5, #104	; 0x68
 8006dd6:	e7e9      	b.n	8006dac <_fwalk_sglue+0x10>

08006dd8 <siprintf>:
 8006dd8:	b40e      	push	{r1, r2, r3}
 8006dda:	b500      	push	{lr}
 8006ddc:	b09c      	sub	sp, #112	; 0x70
 8006dde:	ab1d      	add	r3, sp, #116	; 0x74
 8006de0:	9002      	str	r0, [sp, #8]
 8006de2:	9006      	str	r0, [sp, #24]
 8006de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006de8:	4809      	ldr	r0, [pc, #36]	; (8006e10 <siprintf+0x38>)
 8006dea:	9107      	str	r1, [sp, #28]
 8006dec:	9104      	str	r1, [sp, #16]
 8006dee:	4909      	ldr	r1, [pc, #36]	; (8006e14 <siprintf+0x3c>)
 8006df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df4:	9105      	str	r1, [sp, #20]
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	a902      	add	r1, sp, #8
 8006dfc:	f001 faa2 	bl	8008344 <_svfiprintf_r>
 8006e00:	9b02      	ldr	r3, [sp, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	b01c      	add	sp, #112	; 0x70
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b003      	add	sp, #12
 8006e0e:	4770      	bx	lr
 8006e10:	200001d8 	.word	0x200001d8
 8006e14:	ffff0208 	.word	0xffff0208

08006e18 <siscanf>:
 8006e18:	b40e      	push	{r1, r2, r3}
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	b09f      	sub	sp, #124	; 0x7c
 8006e1e:	ac21      	add	r4, sp, #132	; 0x84
 8006e20:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006e24:	f854 2b04 	ldr.w	r2, [r4], #4
 8006e28:	9201      	str	r2, [sp, #4]
 8006e2a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006e2e:	9004      	str	r0, [sp, #16]
 8006e30:	9008      	str	r0, [sp, #32]
 8006e32:	f7f9 f9d7 	bl	80001e4 <strlen>
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <siscanf+0x50>)
 8006e38:	9005      	str	r0, [sp, #20]
 8006e3a:	9009      	str	r0, [sp, #36]	; 0x24
 8006e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8006e3e:	480b      	ldr	r0, [pc, #44]	; (8006e6c <siscanf+0x54>)
 8006e40:	9a01      	ldr	r2, [sp, #4]
 8006e42:	6800      	ldr	r0, [r0, #0]
 8006e44:	9403      	str	r4, [sp, #12]
 8006e46:	2300      	movs	r3, #0
 8006e48:	9311      	str	r3, [sp, #68]	; 0x44
 8006e4a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e50:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	4623      	mov	r3, r4
 8006e58:	f001 fbcc 	bl	80085f4 <__ssvfiscanf_r>
 8006e5c:	b01f      	add	sp, #124	; 0x7c
 8006e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e62:	b003      	add	sp, #12
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	08006e93 	.word	0x08006e93
 8006e6c:	200001d8 	.word	0x200001d8

08006e70 <__sread>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f87c 	bl	8006f74 <_read_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	bfab      	itete	ge
 8006e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e82:	89a3      	ldrhlt	r3, [r4, #12]
 8006e84:	181b      	addge	r3, r3, r0
 8006e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e8a:	bfac      	ite	ge
 8006e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e8e:	81a3      	strhlt	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__seofread>:
 8006e92:	2000      	movs	r0, #0
 8006e94:	4770      	bx	lr

08006e96 <__swrite>:
 8006e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9a:	461f      	mov	r7, r3
 8006e9c:	898b      	ldrh	r3, [r1, #12]
 8006e9e:	05db      	lsls	r3, r3, #23
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4616      	mov	r6, r2
 8006ea6:	d505      	bpl.n	8006eb4 <__swrite+0x1e>
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	2302      	movs	r3, #2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f000 f84e 	bl	8006f50 <_lseek_r>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eca:	f000 b865 	b.w	8006f98 <_write_r>

08006ece <__sseek>:
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed6:	f000 f83b 	bl	8006f50 <_lseek_r>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	bf15      	itete	ne
 8006ee0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eea:	81a3      	strheq	r3, [r4, #12]
 8006eec:	bf18      	it	ne
 8006eee:	81a3      	strhne	r3, [r4, #12]
 8006ef0:	bd10      	pop	{r4, pc}

08006ef2 <__sclose>:
 8006ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef6:	f000 b81b 	b.w	8006f30 <_close_r>

08006efa <memset>:
 8006efa:	4402      	add	r2, r0
 8006efc:	4603      	mov	r3, r0
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d100      	bne.n	8006f04 <memset+0xa>
 8006f02:	4770      	bx	lr
 8006f04:	f803 1b01 	strb.w	r1, [r3], #1
 8006f08:	e7f9      	b.n	8006efe <memset+0x4>

08006f0a <strncmp>:
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	b16a      	cbz	r2, 8006f2a <strncmp+0x20>
 8006f0e:	3901      	subs	r1, #1
 8006f10:	1884      	adds	r4, r0, r2
 8006f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d103      	bne.n	8006f26 <strncmp+0x1c>
 8006f1e:	42a0      	cmp	r0, r4
 8006f20:	d001      	beq.n	8006f26 <strncmp+0x1c>
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	d1f5      	bne.n	8006f12 <strncmp+0x8>
 8006f26:	1ad0      	subs	r0, r2, r3
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	e7fc      	b.n	8006f28 <strncmp+0x1e>
	...

08006f30 <_close_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d06      	ldr	r5, [pc, #24]	; (8006f4c <_close_r+0x1c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	f7fa ff61 	bl	8001e02 <_close>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_close_r+0x1a>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_close_r+0x1a>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	20000898 	.word	0x20000898

08006f50 <_lseek_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d07      	ldr	r5, [pc, #28]	; (8006f70 <_lseek_r+0x20>)
 8006f54:	4604      	mov	r4, r0
 8006f56:	4608      	mov	r0, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f7fa ff76 	bl	8001e50 <_lseek>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_lseek_r+0x1e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_lseek_r+0x1e>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000898 	.word	0x20000898

08006f74 <_read_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_read_r+0x20>)
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7fa ff04 	bl	8001d90 <_read>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_read_r+0x1e>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_read_r+0x1e>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	20000898 	.word	0x20000898

08006f98 <_write_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	; (8006fb8 <_write_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fa ff0f 	bl	8001dca <_write>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_write_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_write_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000898 	.word	0x20000898

08006fbc <__errno>:
 8006fbc:	4b01      	ldr	r3, [pc, #4]	; (8006fc4 <__errno+0x8>)
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	200001d8 	.word	0x200001d8

08006fc8 <__libc_init_array>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	4d0d      	ldr	r5, [pc, #52]	; (8007000 <__libc_init_array+0x38>)
 8006fcc:	4c0d      	ldr	r4, [pc, #52]	; (8007004 <__libc_init_array+0x3c>)
 8006fce:	1b64      	subs	r4, r4, r5
 8006fd0:	10a4      	asrs	r4, r4, #2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	42a6      	cmp	r6, r4
 8006fd6:	d109      	bne.n	8006fec <__libc_init_array+0x24>
 8006fd8:	4d0b      	ldr	r5, [pc, #44]	; (8007008 <__libc_init_array+0x40>)
 8006fda:	4c0c      	ldr	r4, [pc, #48]	; (800700c <__libc_init_array+0x44>)
 8006fdc:	f002 fc9a 	bl	8009914 <_init>
 8006fe0:	1b64      	subs	r4, r4, r5
 8006fe2:	10a4      	asrs	r4, r4, #2
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	42a6      	cmp	r6, r4
 8006fe8:	d105      	bne.n	8006ff6 <__libc_init_array+0x2e>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff0:	4798      	blx	r3
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7ee      	b.n	8006fd4 <__libc_init_array+0xc>
 8006ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffa:	4798      	blx	r3
 8006ffc:	3601      	adds	r6, #1
 8006ffe:	e7f2      	b.n	8006fe6 <__libc_init_array+0x1e>
 8007000:	08009e4c 	.word	0x08009e4c
 8007004:	08009e4c 	.word	0x08009e4c
 8007008:	08009e4c 	.word	0x08009e4c
 800700c:	08009e50 	.word	0x08009e50

08007010 <__retarget_lock_init_recursive>:
 8007010:	4770      	bx	lr

08007012 <__retarget_lock_acquire_recursive>:
 8007012:	4770      	bx	lr

08007014 <__retarget_lock_release_recursive>:
 8007014:	4770      	bx	lr

08007016 <memcpy>:
 8007016:	440a      	add	r2, r1
 8007018:	4291      	cmp	r1, r2
 800701a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800701e:	d100      	bne.n	8007022 <memcpy+0xc>
 8007020:	4770      	bx	lr
 8007022:	b510      	push	{r4, lr}
 8007024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007028:	f803 4f01 	strb.w	r4, [r3, #1]!
 800702c:	4291      	cmp	r1, r2
 800702e:	d1f9      	bne.n	8007024 <memcpy+0xe>
 8007030:	bd10      	pop	{r4, pc}
 8007032:	0000      	movs	r0, r0
 8007034:	0000      	movs	r0, r0
	...

08007038 <nan>:
 8007038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007040 <nan+0x8>
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	00000000 	.word	0x00000000
 8007044:	7ff80000 	.word	0x7ff80000

08007048 <abort>:
 8007048:	b508      	push	{r3, lr}
 800704a:	2006      	movs	r0, #6
 800704c:	f002 fa64 	bl	8009518 <raise>
 8007050:	2001      	movs	r0, #1
 8007052:	f7fa fe93 	bl	8001d7c <_exit>
	...

08007058 <_free_r>:
 8007058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800705a:	2900      	cmp	r1, #0
 800705c:	d044      	beq.n	80070e8 <_free_r+0x90>
 800705e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007062:	9001      	str	r0, [sp, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f1a1 0404 	sub.w	r4, r1, #4
 800706a:	bfb8      	it	lt
 800706c:	18e4      	addlt	r4, r4, r3
 800706e:	f000 fc49 	bl	8007904 <__malloc_lock>
 8007072:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <_free_r+0x94>)
 8007074:	9801      	ldr	r0, [sp, #4]
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	b933      	cbnz	r3, 8007088 <_free_r+0x30>
 800707a:	6063      	str	r3, [r4, #4]
 800707c:	6014      	str	r4, [r2, #0]
 800707e:	b003      	add	sp, #12
 8007080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007084:	f000 bc44 	b.w	8007910 <__malloc_unlock>
 8007088:	42a3      	cmp	r3, r4
 800708a:	d908      	bls.n	800709e <_free_r+0x46>
 800708c:	6825      	ldr	r5, [r4, #0]
 800708e:	1961      	adds	r1, r4, r5
 8007090:	428b      	cmp	r3, r1
 8007092:	bf01      	itttt	eq
 8007094:	6819      	ldreq	r1, [r3, #0]
 8007096:	685b      	ldreq	r3, [r3, #4]
 8007098:	1949      	addeq	r1, r1, r5
 800709a:	6021      	streq	r1, [r4, #0]
 800709c:	e7ed      	b.n	800707a <_free_r+0x22>
 800709e:	461a      	mov	r2, r3
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	b10b      	cbz	r3, 80070a8 <_free_r+0x50>
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	d9fa      	bls.n	800709e <_free_r+0x46>
 80070a8:	6811      	ldr	r1, [r2, #0]
 80070aa:	1855      	adds	r5, r2, r1
 80070ac:	42a5      	cmp	r5, r4
 80070ae:	d10b      	bne.n	80070c8 <_free_r+0x70>
 80070b0:	6824      	ldr	r4, [r4, #0]
 80070b2:	4421      	add	r1, r4
 80070b4:	1854      	adds	r4, r2, r1
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	d1e0      	bne.n	800707e <_free_r+0x26>
 80070bc:	681c      	ldr	r4, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	6053      	str	r3, [r2, #4]
 80070c2:	440c      	add	r4, r1
 80070c4:	6014      	str	r4, [r2, #0]
 80070c6:	e7da      	b.n	800707e <_free_r+0x26>
 80070c8:	d902      	bls.n	80070d0 <_free_r+0x78>
 80070ca:	230c      	movs	r3, #12
 80070cc:	6003      	str	r3, [r0, #0]
 80070ce:	e7d6      	b.n	800707e <_free_r+0x26>
 80070d0:	6825      	ldr	r5, [r4, #0]
 80070d2:	1961      	adds	r1, r4, r5
 80070d4:	428b      	cmp	r3, r1
 80070d6:	bf04      	itt	eq
 80070d8:	6819      	ldreq	r1, [r3, #0]
 80070da:	685b      	ldreq	r3, [r3, #4]
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	bf04      	itt	eq
 80070e0:	1949      	addeq	r1, r1, r5
 80070e2:	6021      	streq	r1, [r4, #0]
 80070e4:	6054      	str	r4, [r2, #4]
 80070e6:	e7ca      	b.n	800707e <_free_r+0x26>
 80070e8:	b003      	add	sp, #12
 80070ea:	bd30      	pop	{r4, r5, pc}
 80070ec:	200008a0 	.word	0x200008a0

080070f0 <rshift>:
 80070f0:	6903      	ldr	r3, [r0, #16]
 80070f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070fe:	f100 0414 	add.w	r4, r0, #20
 8007102:	dd45      	ble.n	8007190 <rshift+0xa0>
 8007104:	f011 011f 	ands.w	r1, r1, #31
 8007108:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800710c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007110:	d10c      	bne.n	800712c <rshift+0x3c>
 8007112:	f100 0710 	add.w	r7, r0, #16
 8007116:	4629      	mov	r1, r5
 8007118:	42b1      	cmp	r1, r6
 800711a:	d334      	bcc.n	8007186 <rshift+0x96>
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	1eea      	subs	r2, r5, #3
 8007122:	4296      	cmp	r6, r2
 8007124:	bf38      	it	cc
 8007126:	2300      	movcc	r3, #0
 8007128:	4423      	add	r3, r4
 800712a:	e015      	b.n	8007158 <rshift+0x68>
 800712c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007130:	f1c1 0820 	rsb	r8, r1, #32
 8007134:	40cf      	lsrs	r7, r1
 8007136:	f105 0e04 	add.w	lr, r5, #4
 800713a:	46a1      	mov	r9, r4
 800713c:	4576      	cmp	r6, lr
 800713e:	46f4      	mov	ip, lr
 8007140:	d815      	bhi.n	800716e <rshift+0x7e>
 8007142:	1a9a      	subs	r2, r3, r2
 8007144:	0092      	lsls	r2, r2, #2
 8007146:	3a04      	subs	r2, #4
 8007148:	3501      	adds	r5, #1
 800714a:	42ae      	cmp	r6, r5
 800714c:	bf38      	it	cc
 800714e:	2200      	movcc	r2, #0
 8007150:	18a3      	adds	r3, r4, r2
 8007152:	50a7      	str	r7, [r4, r2]
 8007154:	b107      	cbz	r7, 8007158 <rshift+0x68>
 8007156:	3304      	adds	r3, #4
 8007158:	1b1a      	subs	r2, r3, r4
 800715a:	42a3      	cmp	r3, r4
 800715c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007160:	bf08      	it	eq
 8007162:	2300      	moveq	r3, #0
 8007164:	6102      	str	r2, [r0, #16]
 8007166:	bf08      	it	eq
 8007168:	6143      	streq	r3, [r0, #20]
 800716a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800716e:	f8dc c000 	ldr.w	ip, [ip]
 8007172:	fa0c fc08 	lsl.w	ip, ip, r8
 8007176:	ea4c 0707 	orr.w	r7, ip, r7
 800717a:	f849 7b04 	str.w	r7, [r9], #4
 800717e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007182:	40cf      	lsrs	r7, r1
 8007184:	e7da      	b.n	800713c <rshift+0x4c>
 8007186:	f851 cb04 	ldr.w	ip, [r1], #4
 800718a:	f847 cf04 	str.w	ip, [r7, #4]!
 800718e:	e7c3      	b.n	8007118 <rshift+0x28>
 8007190:	4623      	mov	r3, r4
 8007192:	e7e1      	b.n	8007158 <rshift+0x68>

08007194 <__hexdig_fun>:
 8007194:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007198:	2b09      	cmp	r3, #9
 800719a:	d802      	bhi.n	80071a2 <__hexdig_fun+0xe>
 800719c:	3820      	subs	r0, #32
 800719e:	b2c0      	uxtb	r0, r0
 80071a0:	4770      	bx	lr
 80071a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d801      	bhi.n	80071ae <__hexdig_fun+0x1a>
 80071aa:	3847      	subs	r0, #71	; 0x47
 80071ac:	e7f7      	b.n	800719e <__hexdig_fun+0xa>
 80071ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d801      	bhi.n	80071ba <__hexdig_fun+0x26>
 80071b6:	3827      	subs	r0, #39	; 0x27
 80071b8:	e7f1      	b.n	800719e <__hexdig_fun+0xa>
 80071ba:	2000      	movs	r0, #0
 80071bc:	4770      	bx	lr
	...

080071c0 <__gethex>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4617      	mov	r7, r2
 80071c6:	680a      	ldr	r2, [r1, #0]
 80071c8:	b085      	sub	sp, #20
 80071ca:	f102 0b02 	add.w	fp, r2, #2
 80071ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80071d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80071d6:	4681      	mov	r9, r0
 80071d8:	468a      	mov	sl, r1
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	32fe      	adds	r2, #254	; 0xfe
 80071de:	eb02 030b 	add.w	r3, r2, fp
 80071e2:	46d8      	mov	r8, fp
 80071e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	2830      	cmp	r0, #48	; 0x30
 80071ec:	d0f7      	beq.n	80071de <__gethex+0x1e>
 80071ee:	f7ff ffd1 	bl	8007194 <__hexdig_fun>
 80071f2:	4604      	mov	r4, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d138      	bne.n	800726a <__gethex+0xaa>
 80071f8:	49a7      	ldr	r1, [pc, #668]	; (8007498 <__gethex+0x2d8>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	4640      	mov	r0, r8
 80071fe:	f7ff fe84 	bl	8006f0a <strncmp>
 8007202:	4606      	mov	r6, r0
 8007204:	2800      	cmp	r0, #0
 8007206:	d169      	bne.n	80072dc <__gethex+0x11c>
 8007208:	f898 0001 	ldrb.w	r0, [r8, #1]
 800720c:	465d      	mov	r5, fp
 800720e:	f7ff ffc1 	bl	8007194 <__hexdig_fun>
 8007212:	2800      	cmp	r0, #0
 8007214:	d064      	beq.n	80072e0 <__gethex+0x120>
 8007216:	465a      	mov	r2, fp
 8007218:	7810      	ldrb	r0, [r2, #0]
 800721a:	2830      	cmp	r0, #48	; 0x30
 800721c:	4690      	mov	r8, r2
 800721e:	f102 0201 	add.w	r2, r2, #1
 8007222:	d0f9      	beq.n	8007218 <__gethex+0x58>
 8007224:	f7ff ffb6 	bl	8007194 <__hexdig_fun>
 8007228:	2301      	movs	r3, #1
 800722a:	fab0 f480 	clz	r4, r0
 800722e:	0964      	lsrs	r4, r4, #5
 8007230:	465e      	mov	r6, fp
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	4642      	mov	r2, r8
 8007236:	4615      	mov	r5, r2
 8007238:	3201      	adds	r2, #1
 800723a:	7828      	ldrb	r0, [r5, #0]
 800723c:	f7ff ffaa 	bl	8007194 <__hexdig_fun>
 8007240:	2800      	cmp	r0, #0
 8007242:	d1f8      	bne.n	8007236 <__gethex+0x76>
 8007244:	4994      	ldr	r1, [pc, #592]	; (8007498 <__gethex+0x2d8>)
 8007246:	2201      	movs	r2, #1
 8007248:	4628      	mov	r0, r5
 800724a:	f7ff fe5e 	bl	8006f0a <strncmp>
 800724e:	b978      	cbnz	r0, 8007270 <__gethex+0xb0>
 8007250:	b946      	cbnz	r6, 8007264 <__gethex+0xa4>
 8007252:	1c6e      	adds	r6, r5, #1
 8007254:	4632      	mov	r2, r6
 8007256:	4615      	mov	r5, r2
 8007258:	3201      	adds	r2, #1
 800725a:	7828      	ldrb	r0, [r5, #0]
 800725c:	f7ff ff9a 	bl	8007194 <__hexdig_fun>
 8007260:	2800      	cmp	r0, #0
 8007262:	d1f8      	bne.n	8007256 <__gethex+0x96>
 8007264:	1b73      	subs	r3, r6, r5
 8007266:	009e      	lsls	r6, r3, #2
 8007268:	e004      	b.n	8007274 <__gethex+0xb4>
 800726a:	2400      	movs	r4, #0
 800726c:	4626      	mov	r6, r4
 800726e:	e7e1      	b.n	8007234 <__gethex+0x74>
 8007270:	2e00      	cmp	r6, #0
 8007272:	d1f7      	bne.n	8007264 <__gethex+0xa4>
 8007274:	782b      	ldrb	r3, [r5, #0]
 8007276:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800727a:	2b50      	cmp	r3, #80	; 0x50
 800727c:	d13d      	bne.n	80072fa <__gethex+0x13a>
 800727e:	786b      	ldrb	r3, [r5, #1]
 8007280:	2b2b      	cmp	r3, #43	; 0x2b
 8007282:	d02f      	beq.n	80072e4 <__gethex+0x124>
 8007284:	2b2d      	cmp	r3, #45	; 0x2d
 8007286:	d031      	beq.n	80072ec <__gethex+0x12c>
 8007288:	1c69      	adds	r1, r5, #1
 800728a:	f04f 0b00 	mov.w	fp, #0
 800728e:	7808      	ldrb	r0, [r1, #0]
 8007290:	f7ff ff80 	bl	8007194 <__hexdig_fun>
 8007294:	1e42      	subs	r2, r0, #1
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	2a18      	cmp	r2, #24
 800729a:	d82e      	bhi.n	80072fa <__gethex+0x13a>
 800729c:	f1a0 0210 	sub.w	r2, r0, #16
 80072a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80072a4:	f7ff ff76 	bl	8007194 <__hexdig_fun>
 80072a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80072ac:	fa5f fc8c 	uxtb.w	ip, ip
 80072b0:	f1bc 0f18 	cmp.w	ip, #24
 80072b4:	d91d      	bls.n	80072f2 <__gethex+0x132>
 80072b6:	f1bb 0f00 	cmp.w	fp, #0
 80072ba:	d000      	beq.n	80072be <__gethex+0xfe>
 80072bc:	4252      	negs	r2, r2
 80072be:	4416      	add	r6, r2
 80072c0:	f8ca 1000 	str.w	r1, [sl]
 80072c4:	b1dc      	cbz	r4, 80072fe <__gethex+0x13e>
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bf14      	ite	ne
 80072cc:	f04f 0800 	movne.w	r8, #0
 80072d0:	f04f 0806 	moveq.w	r8, #6
 80072d4:	4640      	mov	r0, r8
 80072d6:	b005      	add	sp, #20
 80072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072dc:	4645      	mov	r5, r8
 80072de:	4626      	mov	r6, r4
 80072e0:	2401      	movs	r4, #1
 80072e2:	e7c7      	b.n	8007274 <__gethex+0xb4>
 80072e4:	f04f 0b00 	mov.w	fp, #0
 80072e8:	1ca9      	adds	r1, r5, #2
 80072ea:	e7d0      	b.n	800728e <__gethex+0xce>
 80072ec:	f04f 0b01 	mov.w	fp, #1
 80072f0:	e7fa      	b.n	80072e8 <__gethex+0x128>
 80072f2:	230a      	movs	r3, #10
 80072f4:	fb03 0002 	mla	r0, r3, r2, r0
 80072f8:	e7d0      	b.n	800729c <__gethex+0xdc>
 80072fa:	4629      	mov	r1, r5
 80072fc:	e7e0      	b.n	80072c0 <__gethex+0x100>
 80072fe:	eba5 0308 	sub.w	r3, r5, r8
 8007302:	3b01      	subs	r3, #1
 8007304:	4621      	mov	r1, r4
 8007306:	2b07      	cmp	r3, #7
 8007308:	dc0a      	bgt.n	8007320 <__gethex+0x160>
 800730a:	4648      	mov	r0, r9
 800730c:	f000 fb06 	bl	800791c <_Balloc>
 8007310:	4604      	mov	r4, r0
 8007312:	b940      	cbnz	r0, 8007326 <__gethex+0x166>
 8007314:	4b61      	ldr	r3, [pc, #388]	; (800749c <__gethex+0x2dc>)
 8007316:	4602      	mov	r2, r0
 8007318:	21e4      	movs	r1, #228	; 0xe4
 800731a:	4861      	ldr	r0, [pc, #388]	; (80074a0 <__gethex+0x2e0>)
 800731c:	f7fe fe4e 	bl	8005fbc <__assert_func>
 8007320:	3101      	adds	r1, #1
 8007322:	105b      	asrs	r3, r3, #1
 8007324:	e7ef      	b.n	8007306 <__gethex+0x146>
 8007326:	f100 0a14 	add.w	sl, r0, #20
 800732a:	2300      	movs	r3, #0
 800732c:	495a      	ldr	r1, [pc, #360]	; (8007498 <__gethex+0x2d8>)
 800732e:	f8cd a004 	str.w	sl, [sp, #4]
 8007332:	469b      	mov	fp, r3
 8007334:	45a8      	cmp	r8, r5
 8007336:	d342      	bcc.n	80073be <__gethex+0x1fe>
 8007338:	9801      	ldr	r0, [sp, #4]
 800733a:	f840 bb04 	str.w	fp, [r0], #4
 800733e:	eba0 000a 	sub.w	r0, r0, sl
 8007342:	1080      	asrs	r0, r0, #2
 8007344:	6120      	str	r0, [r4, #16]
 8007346:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800734a:	4658      	mov	r0, fp
 800734c:	f000 fbd8 	bl	8007b00 <__hi0bits>
 8007350:	683d      	ldr	r5, [r7, #0]
 8007352:	eba8 0000 	sub.w	r0, r8, r0
 8007356:	42a8      	cmp	r0, r5
 8007358:	dd59      	ble.n	800740e <__gethex+0x24e>
 800735a:	eba0 0805 	sub.w	r8, r0, r5
 800735e:	4641      	mov	r1, r8
 8007360:	4620      	mov	r0, r4
 8007362:	f000 ff67 	bl	8008234 <__any_on>
 8007366:	4683      	mov	fp, r0
 8007368:	b1b8      	cbz	r0, 800739a <__gethex+0x1da>
 800736a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800736e:	1159      	asrs	r1, r3, #5
 8007370:	f003 021f 	and.w	r2, r3, #31
 8007374:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007378:	f04f 0b01 	mov.w	fp, #1
 800737c:	fa0b f202 	lsl.w	r2, fp, r2
 8007380:	420a      	tst	r2, r1
 8007382:	d00a      	beq.n	800739a <__gethex+0x1da>
 8007384:	455b      	cmp	r3, fp
 8007386:	dd06      	ble.n	8007396 <__gethex+0x1d6>
 8007388:	f1a8 0102 	sub.w	r1, r8, #2
 800738c:	4620      	mov	r0, r4
 800738e:	f000 ff51 	bl	8008234 <__any_on>
 8007392:	2800      	cmp	r0, #0
 8007394:	d138      	bne.n	8007408 <__gethex+0x248>
 8007396:	f04f 0b02 	mov.w	fp, #2
 800739a:	4641      	mov	r1, r8
 800739c:	4620      	mov	r0, r4
 800739e:	f7ff fea7 	bl	80070f0 <rshift>
 80073a2:	4446      	add	r6, r8
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	42b3      	cmp	r3, r6
 80073a8:	da41      	bge.n	800742e <__gethex+0x26e>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4648      	mov	r0, r9
 80073ae:	f000 faf5 	bl	800799c <_Bfree>
 80073b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073b4:	2300      	movs	r3, #0
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80073bc:	e78a      	b.n	80072d4 <__gethex+0x114>
 80073be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80073c2:	2a2e      	cmp	r2, #46	; 0x2e
 80073c4:	d014      	beq.n	80073f0 <__gethex+0x230>
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d106      	bne.n	80073d8 <__gethex+0x218>
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	f843 bb04 	str.w	fp, [r3], #4
 80073d0:	f04f 0b00 	mov.w	fp, #0
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	465b      	mov	r3, fp
 80073d8:	7828      	ldrb	r0, [r5, #0]
 80073da:	9303      	str	r3, [sp, #12]
 80073dc:	f7ff feda 	bl	8007194 <__hexdig_fun>
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	f000 000f 	and.w	r0, r0, #15
 80073e6:	4098      	lsls	r0, r3
 80073e8:	ea4b 0b00 	orr.w	fp, fp, r0
 80073ec:	3304      	adds	r3, #4
 80073ee:	e7a1      	b.n	8007334 <__gethex+0x174>
 80073f0:	45a8      	cmp	r8, r5
 80073f2:	d8e8      	bhi.n	80073c6 <__gethex+0x206>
 80073f4:	2201      	movs	r2, #1
 80073f6:	4628      	mov	r0, r5
 80073f8:	9303      	str	r3, [sp, #12]
 80073fa:	f7ff fd86 	bl	8006f0a <strncmp>
 80073fe:	4926      	ldr	r1, [pc, #152]	; (8007498 <__gethex+0x2d8>)
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	2800      	cmp	r0, #0
 8007404:	d1df      	bne.n	80073c6 <__gethex+0x206>
 8007406:	e795      	b.n	8007334 <__gethex+0x174>
 8007408:	f04f 0b03 	mov.w	fp, #3
 800740c:	e7c5      	b.n	800739a <__gethex+0x1da>
 800740e:	da0b      	bge.n	8007428 <__gethex+0x268>
 8007410:	eba5 0800 	sub.w	r8, r5, r0
 8007414:	4621      	mov	r1, r4
 8007416:	4642      	mov	r2, r8
 8007418:	4648      	mov	r0, r9
 800741a:	f000 fcd9 	bl	8007dd0 <__lshift>
 800741e:	eba6 0608 	sub.w	r6, r6, r8
 8007422:	4604      	mov	r4, r0
 8007424:	f100 0a14 	add.w	sl, r0, #20
 8007428:	f04f 0b00 	mov.w	fp, #0
 800742c:	e7ba      	b.n	80073a4 <__gethex+0x1e4>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	42b3      	cmp	r3, r6
 8007432:	dd73      	ble.n	800751c <__gethex+0x35c>
 8007434:	1b9e      	subs	r6, r3, r6
 8007436:	42b5      	cmp	r5, r6
 8007438:	dc34      	bgt.n	80074a4 <__gethex+0x2e4>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d023      	beq.n	8007488 <__gethex+0x2c8>
 8007440:	2b03      	cmp	r3, #3
 8007442:	d025      	beq.n	8007490 <__gethex+0x2d0>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d115      	bne.n	8007474 <__gethex+0x2b4>
 8007448:	42b5      	cmp	r5, r6
 800744a:	d113      	bne.n	8007474 <__gethex+0x2b4>
 800744c:	2d01      	cmp	r5, #1
 800744e:	d10b      	bne.n	8007468 <__gethex+0x2a8>
 8007450:	9a02      	ldr	r2, [sp, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	2301      	movs	r3, #1
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	f8ca 3000 	str.w	r3, [sl]
 800745e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007460:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007464:	601c      	str	r4, [r3, #0]
 8007466:	e735      	b.n	80072d4 <__gethex+0x114>
 8007468:	1e69      	subs	r1, r5, #1
 800746a:	4620      	mov	r0, r4
 800746c:	f000 fee2 	bl	8008234 <__any_on>
 8007470:	2800      	cmp	r0, #0
 8007472:	d1ed      	bne.n	8007450 <__gethex+0x290>
 8007474:	4621      	mov	r1, r4
 8007476:	4648      	mov	r0, r9
 8007478:	f000 fa90 	bl	800799c <_Bfree>
 800747c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800747e:	2300      	movs	r3, #0
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007486:	e725      	b.n	80072d4 <__gethex+0x114>
 8007488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f2      	bne.n	8007474 <__gethex+0x2b4>
 800748e:	e7df      	b.n	8007450 <__gethex+0x290>
 8007490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1dc      	bne.n	8007450 <__gethex+0x290>
 8007496:	e7ed      	b.n	8007474 <__gethex+0x2b4>
 8007498:	08009aa4 	.word	0x08009aa4
 800749c:	08009b10 	.word	0x08009b10
 80074a0:	08009b21 	.word	0x08009b21
 80074a4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80074a8:	f1bb 0f00 	cmp.w	fp, #0
 80074ac:	d133      	bne.n	8007516 <__gethex+0x356>
 80074ae:	f1b8 0f00 	cmp.w	r8, #0
 80074b2:	d004      	beq.n	80074be <__gethex+0x2fe>
 80074b4:	4641      	mov	r1, r8
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 febc 	bl	8008234 <__any_on>
 80074bc:	4683      	mov	fp, r0
 80074be:	ea4f 1268 	mov.w	r2, r8, asr #5
 80074c2:	2301      	movs	r3, #1
 80074c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80074c8:	f008 081f 	and.w	r8, r8, #31
 80074cc:	fa03 f308 	lsl.w	r3, r3, r8
 80074d0:	4213      	tst	r3, r2
 80074d2:	4631      	mov	r1, r6
 80074d4:	4620      	mov	r0, r4
 80074d6:	bf18      	it	ne
 80074d8:	f04b 0b02 	orrne.w	fp, fp, #2
 80074dc:	1bad      	subs	r5, r5, r6
 80074de:	f7ff fe07 	bl	80070f0 <rshift>
 80074e2:	687e      	ldr	r6, [r7, #4]
 80074e4:	f04f 0802 	mov.w	r8, #2
 80074e8:	f1bb 0f00 	cmp.w	fp, #0
 80074ec:	d04a      	beq.n	8007584 <__gethex+0x3c4>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d016      	beq.n	8007522 <__gethex+0x362>
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d018      	beq.n	800752a <__gethex+0x36a>
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d109      	bne.n	8007510 <__gethex+0x350>
 80074fc:	f01b 0f02 	tst.w	fp, #2
 8007500:	d006      	beq.n	8007510 <__gethex+0x350>
 8007502:	f8da 3000 	ldr.w	r3, [sl]
 8007506:	ea4b 0b03 	orr.w	fp, fp, r3
 800750a:	f01b 0f01 	tst.w	fp, #1
 800750e:	d10f      	bne.n	8007530 <__gethex+0x370>
 8007510:	f048 0810 	orr.w	r8, r8, #16
 8007514:	e036      	b.n	8007584 <__gethex+0x3c4>
 8007516:	f04f 0b01 	mov.w	fp, #1
 800751a:	e7d0      	b.n	80074be <__gethex+0x2fe>
 800751c:	f04f 0801 	mov.w	r8, #1
 8007520:	e7e2      	b.n	80074e8 <__gethex+0x328>
 8007522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007524:	f1c3 0301 	rsb	r3, r3, #1
 8007528:	930f      	str	r3, [sp, #60]	; 0x3c
 800752a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0ef      	beq.n	8007510 <__gethex+0x350>
 8007530:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007534:	f104 0214 	add.w	r2, r4, #20
 8007538:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007542:	2300      	movs	r3, #0
 8007544:	4694      	mov	ip, r2
 8007546:	f852 1b04 	ldr.w	r1, [r2], #4
 800754a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800754e:	d01e      	beq.n	800758e <__gethex+0x3ce>
 8007550:	3101      	adds	r1, #1
 8007552:	f8cc 1000 	str.w	r1, [ip]
 8007556:	f1b8 0f02 	cmp.w	r8, #2
 800755a:	f104 0214 	add.w	r2, r4, #20
 800755e:	d13d      	bne.n	80075dc <__gethex+0x41c>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	3b01      	subs	r3, #1
 8007564:	42ab      	cmp	r3, r5
 8007566:	d10b      	bne.n	8007580 <__gethex+0x3c0>
 8007568:	1169      	asrs	r1, r5, #5
 800756a:	2301      	movs	r3, #1
 800756c:	f005 051f 	and.w	r5, r5, #31
 8007570:	fa03 f505 	lsl.w	r5, r3, r5
 8007574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007578:	421d      	tst	r5, r3
 800757a:	bf18      	it	ne
 800757c:	f04f 0801 	movne.w	r8, #1
 8007580:	f048 0820 	orr.w	r8, r8, #32
 8007584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007586:	601c      	str	r4, [r3, #0]
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	601e      	str	r6, [r3, #0]
 800758c:	e6a2      	b.n	80072d4 <__gethex+0x114>
 800758e:	4290      	cmp	r0, r2
 8007590:	f842 3c04 	str.w	r3, [r2, #-4]
 8007594:	d8d6      	bhi.n	8007544 <__gethex+0x384>
 8007596:	68a2      	ldr	r2, [r4, #8]
 8007598:	4593      	cmp	fp, r2
 800759a:	db17      	blt.n	80075cc <__gethex+0x40c>
 800759c:	6861      	ldr	r1, [r4, #4]
 800759e:	4648      	mov	r0, r9
 80075a0:	3101      	adds	r1, #1
 80075a2:	f000 f9bb 	bl	800791c <_Balloc>
 80075a6:	4682      	mov	sl, r0
 80075a8:	b918      	cbnz	r0, 80075b2 <__gethex+0x3f2>
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <__gethex+0x458>)
 80075ac:	4602      	mov	r2, r0
 80075ae:	2184      	movs	r1, #132	; 0x84
 80075b0:	e6b3      	b.n	800731a <__gethex+0x15a>
 80075b2:	6922      	ldr	r2, [r4, #16]
 80075b4:	3202      	adds	r2, #2
 80075b6:	f104 010c 	add.w	r1, r4, #12
 80075ba:	0092      	lsls	r2, r2, #2
 80075bc:	300c      	adds	r0, #12
 80075be:	f7ff fd2a 	bl	8007016 <memcpy>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4648      	mov	r0, r9
 80075c6:	f000 f9e9 	bl	800799c <_Bfree>
 80075ca:	4654      	mov	r4, sl
 80075cc:	6922      	ldr	r2, [r4, #16]
 80075ce:	1c51      	adds	r1, r2, #1
 80075d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80075d4:	6121      	str	r1, [r4, #16]
 80075d6:	2101      	movs	r1, #1
 80075d8:	6151      	str	r1, [r2, #20]
 80075da:	e7bc      	b.n	8007556 <__gethex+0x396>
 80075dc:	6921      	ldr	r1, [r4, #16]
 80075de:	4559      	cmp	r1, fp
 80075e0:	dd0b      	ble.n	80075fa <__gethex+0x43a>
 80075e2:	2101      	movs	r1, #1
 80075e4:	4620      	mov	r0, r4
 80075e6:	f7ff fd83 	bl	80070f0 <rshift>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	3601      	adds	r6, #1
 80075ee:	42b3      	cmp	r3, r6
 80075f0:	f6ff aedb 	blt.w	80073aa <__gethex+0x1ea>
 80075f4:	f04f 0801 	mov.w	r8, #1
 80075f8:	e7c2      	b.n	8007580 <__gethex+0x3c0>
 80075fa:	f015 051f 	ands.w	r5, r5, #31
 80075fe:	d0f9      	beq.n	80075f4 <__gethex+0x434>
 8007600:	9b01      	ldr	r3, [sp, #4]
 8007602:	441a      	add	r2, r3
 8007604:	f1c5 0520 	rsb	r5, r5, #32
 8007608:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800760c:	f000 fa78 	bl	8007b00 <__hi0bits>
 8007610:	42a8      	cmp	r0, r5
 8007612:	dbe6      	blt.n	80075e2 <__gethex+0x422>
 8007614:	e7ee      	b.n	80075f4 <__gethex+0x434>
 8007616:	bf00      	nop
 8007618:	08009b10 	.word	0x08009b10

0800761c <L_shift>:
 800761c:	f1c2 0208 	rsb	r2, r2, #8
 8007620:	0092      	lsls	r2, r2, #2
 8007622:	b570      	push	{r4, r5, r6, lr}
 8007624:	f1c2 0620 	rsb	r6, r2, #32
 8007628:	6843      	ldr	r3, [r0, #4]
 800762a:	6804      	ldr	r4, [r0, #0]
 800762c:	fa03 f506 	lsl.w	r5, r3, r6
 8007630:	432c      	orrs	r4, r5
 8007632:	40d3      	lsrs	r3, r2
 8007634:	6004      	str	r4, [r0, #0]
 8007636:	f840 3f04 	str.w	r3, [r0, #4]!
 800763a:	4288      	cmp	r0, r1
 800763c:	d3f4      	bcc.n	8007628 <L_shift+0xc>
 800763e:	bd70      	pop	{r4, r5, r6, pc}

08007640 <__match>:
 8007640:	b530      	push	{r4, r5, lr}
 8007642:	6803      	ldr	r3, [r0, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764a:	b914      	cbnz	r4, 8007652 <__match+0x12>
 800764c:	6003      	str	r3, [r0, #0]
 800764e:	2001      	movs	r0, #1
 8007650:	bd30      	pop	{r4, r5, pc}
 8007652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800765a:	2d19      	cmp	r5, #25
 800765c:	bf98      	it	ls
 800765e:	3220      	addls	r2, #32
 8007660:	42a2      	cmp	r2, r4
 8007662:	d0f0      	beq.n	8007646 <__match+0x6>
 8007664:	2000      	movs	r0, #0
 8007666:	e7f3      	b.n	8007650 <__match+0x10>

08007668 <__hexnan>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	6801      	ldr	r1, [r0, #0]
 8007670:	115e      	asrs	r6, r3, #5
 8007672:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007676:	f013 031f 	ands.w	r3, r3, #31
 800767a:	b087      	sub	sp, #28
 800767c:	bf18      	it	ne
 800767e:	3604      	addne	r6, #4
 8007680:	2500      	movs	r5, #0
 8007682:	1f37      	subs	r7, r6, #4
 8007684:	4682      	mov	sl, r0
 8007686:	4690      	mov	r8, r2
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	f846 5c04 	str.w	r5, [r6, #-4]
 800768e:	46b9      	mov	r9, r7
 8007690:	463c      	mov	r4, r7
 8007692:	9502      	str	r5, [sp, #8]
 8007694:	46ab      	mov	fp, r5
 8007696:	784a      	ldrb	r2, [r1, #1]
 8007698:	1c4b      	adds	r3, r1, #1
 800769a:	9303      	str	r3, [sp, #12]
 800769c:	b342      	cbz	r2, 80076f0 <__hexnan+0x88>
 800769e:	4610      	mov	r0, r2
 80076a0:	9105      	str	r1, [sp, #20]
 80076a2:	9204      	str	r2, [sp, #16]
 80076a4:	f7ff fd76 	bl	8007194 <__hexdig_fun>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d14f      	bne.n	800774c <__hexnan+0xe4>
 80076ac:	9a04      	ldr	r2, [sp, #16]
 80076ae:	9905      	ldr	r1, [sp, #20]
 80076b0:	2a20      	cmp	r2, #32
 80076b2:	d818      	bhi.n	80076e6 <__hexnan+0x7e>
 80076b4:	9b02      	ldr	r3, [sp, #8]
 80076b6:	459b      	cmp	fp, r3
 80076b8:	dd13      	ble.n	80076e2 <__hexnan+0x7a>
 80076ba:	454c      	cmp	r4, r9
 80076bc:	d206      	bcs.n	80076cc <__hexnan+0x64>
 80076be:	2d07      	cmp	r5, #7
 80076c0:	dc04      	bgt.n	80076cc <__hexnan+0x64>
 80076c2:	462a      	mov	r2, r5
 80076c4:	4649      	mov	r1, r9
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff ffa8 	bl	800761c <L_shift>
 80076cc:	4544      	cmp	r4, r8
 80076ce:	d950      	bls.n	8007772 <__hexnan+0x10a>
 80076d0:	2300      	movs	r3, #0
 80076d2:	f1a4 0904 	sub.w	r9, r4, #4
 80076d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80076da:	f8cd b008 	str.w	fp, [sp, #8]
 80076de:	464c      	mov	r4, r9
 80076e0:	461d      	mov	r5, r3
 80076e2:	9903      	ldr	r1, [sp, #12]
 80076e4:	e7d7      	b.n	8007696 <__hexnan+0x2e>
 80076e6:	2a29      	cmp	r2, #41	; 0x29
 80076e8:	d155      	bne.n	8007796 <__hexnan+0x12e>
 80076ea:	3102      	adds	r1, #2
 80076ec:	f8ca 1000 	str.w	r1, [sl]
 80076f0:	f1bb 0f00 	cmp.w	fp, #0
 80076f4:	d04f      	beq.n	8007796 <__hexnan+0x12e>
 80076f6:	454c      	cmp	r4, r9
 80076f8:	d206      	bcs.n	8007708 <__hexnan+0xa0>
 80076fa:	2d07      	cmp	r5, #7
 80076fc:	dc04      	bgt.n	8007708 <__hexnan+0xa0>
 80076fe:	462a      	mov	r2, r5
 8007700:	4649      	mov	r1, r9
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff ff8a 	bl	800761c <L_shift>
 8007708:	4544      	cmp	r4, r8
 800770a:	d934      	bls.n	8007776 <__hexnan+0x10e>
 800770c:	f1a8 0204 	sub.w	r2, r8, #4
 8007710:	4623      	mov	r3, r4
 8007712:	f853 1b04 	ldr.w	r1, [r3], #4
 8007716:	f842 1f04 	str.w	r1, [r2, #4]!
 800771a:	429f      	cmp	r7, r3
 800771c:	d2f9      	bcs.n	8007712 <__hexnan+0xaa>
 800771e:	1b3b      	subs	r3, r7, r4
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	3304      	adds	r3, #4
 8007726:	3e03      	subs	r6, #3
 8007728:	3401      	adds	r4, #1
 800772a:	42a6      	cmp	r6, r4
 800772c:	bf38      	it	cc
 800772e:	2304      	movcc	r3, #4
 8007730:	4443      	add	r3, r8
 8007732:	2200      	movs	r2, #0
 8007734:	f843 2b04 	str.w	r2, [r3], #4
 8007738:	429f      	cmp	r7, r3
 800773a:	d2fb      	bcs.n	8007734 <__hexnan+0xcc>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	b91b      	cbnz	r3, 8007748 <__hexnan+0xe0>
 8007740:	4547      	cmp	r7, r8
 8007742:	d126      	bne.n	8007792 <__hexnan+0x12a>
 8007744:	2301      	movs	r3, #1
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	2005      	movs	r0, #5
 800774a:	e025      	b.n	8007798 <__hexnan+0x130>
 800774c:	3501      	adds	r5, #1
 800774e:	2d08      	cmp	r5, #8
 8007750:	f10b 0b01 	add.w	fp, fp, #1
 8007754:	dd06      	ble.n	8007764 <__hexnan+0xfc>
 8007756:	4544      	cmp	r4, r8
 8007758:	d9c3      	bls.n	80076e2 <__hexnan+0x7a>
 800775a:	2300      	movs	r3, #0
 800775c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007760:	2501      	movs	r5, #1
 8007762:	3c04      	subs	r4, #4
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	f000 000f 	and.w	r0, r0, #15
 800776a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	e7b7      	b.n	80076e2 <__hexnan+0x7a>
 8007772:	2508      	movs	r5, #8
 8007774:	e7b5      	b.n	80076e2 <__hexnan+0x7a>
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0df      	beq.n	800773c <__hexnan+0xd4>
 800777c:	f1c3 0320 	rsb	r3, r3, #32
 8007780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007784:	40da      	lsrs	r2, r3
 8007786:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800778a:	4013      	ands	r3, r2
 800778c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007790:	e7d4      	b.n	800773c <__hexnan+0xd4>
 8007792:	3f04      	subs	r7, #4
 8007794:	e7d2      	b.n	800773c <__hexnan+0xd4>
 8007796:	2004      	movs	r0, #4
 8007798:	b007      	add	sp, #28
 800779a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080077a0 <sbrk_aligned>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	4e0e      	ldr	r6, [pc, #56]	; (80077dc <sbrk_aligned+0x3c>)
 80077a4:	460c      	mov	r4, r1
 80077a6:	6831      	ldr	r1, [r6, #0]
 80077a8:	4605      	mov	r5, r0
 80077aa:	b911      	cbnz	r1, 80077b2 <sbrk_aligned+0x12>
 80077ac:	f001 fed0 	bl	8009550 <_sbrk_r>
 80077b0:	6030      	str	r0, [r6, #0]
 80077b2:	4621      	mov	r1, r4
 80077b4:	4628      	mov	r0, r5
 80077b6:	f001 fecb 	bl	8009550 <_sbrk_r>
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	d00a      	beq.n	80077d4 <sbrk_aligned+0x34>
 80077be:	1cc4      	adds	r4, r0, #3
 80077c0:	f024 0403 	bic.w	r4, r4, #3
 80077c4:	42a0      	cmp	r0, r4
 80077c6:	d007      	beq.n	80077d8 <sbrk_aligned+0x38>
 80077c8:	1a21      	subs	r1, r4, r0
 80077ca:	4628      	mov	r0, r5
 80077cc:	f001 fec0 	bl	8009550 <_sbrk_r>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d101      	bne.n	80077d8 <sbrk_aligned+0x38>
 80077d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077d8:	4620      	mov	r0, r4
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	200008a4 	.word	0x200008a4

080077e0 <_malloc_r>:
 80077e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e4:	1ccd      	adds	r5, r1, #3
 80077e6:	f025 0503 	bic.w	r5, r5, #3
 80077ea:	3508      	adds	r5, #8
 80077ec:	2d0c      	cmp	r5, #12
 80077ee:	bf38      	it	cc
 80077f0:	250c      	movcc	r5, #12
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	4607      	mov	r7, r0
 80077f6:	db01      	blt.n	80077fc <_malloc_r+0x1c>
 80077f8:	42a9      	cmp	r1, r5
 80077fa:	d905      	bls.n	8007808 <_malloc_r+0x28>
 80077fc:	230c      	movs	r3, #12
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	2600      	movs	r6, #0
 8007802:	4630      	mov	r0, r6
 8007804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007808:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078dc <_malloc_r+0xfc>
 800780c:	f000 f87a 	bl	8007904 <__malloc_lock>
 8007810:	f8d8 3000 	ldr.w	r3, [r8]
 8007814:	461c      	mov	r4, r3
 8007816:	bb5c      	cbnz	r4, 8007870 <_malloc_r+0x90>
 8007818:	4629      	mov	r1, r5
 800781a:	4638      	mov	r0, r7
 800781c:	f7ff ffc0 	bl	80077a0 <sbrk_aligned>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	4604      	mov	r4, r0
 8007824:	d155      	bne.n	80078d2 <_malloc_r+0xf2>
 8007826:	f8d8 4000 	ldr.w	r4, [r8]
 800782a:	4626      	mov	r6, r4
 800782c:	2e00      	cmp	r6, #0
 800782e:	d145      	bne.n	80078bc <_malloc_r+0xdc>
 8007830:	2c00      	cmp	r4, #0
 8007832:	d048      	beq.n	80078c6 <_malloc_r+0xe6>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	4631      	mov	r1, r6
 8007838:	4638      	mov	r0, r7
 800783a:	eb04 0903 	add.w	r9, r4, r3
 800783e:	f001 fe87 	bl	8009550 <_sbrk_r>
 8007842:	4581      	cmp	r9, r0
 8007844:	d13f      	bne.n	80078c6 <_malloc_r+0xe6>
 8007846:	6821      	ldr	r1, [r4, #0]
 8007848:	1a6d      	subs	r5, r5, r1
 800784a:	4629      	mov	r1, r5
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ffa7 	bl	80077a0 <sbrk_aligned>
 8007852:	3001      	adds	r0, #1
 8007854:	d037      	beq.n	80078c6 <_malloc_r+0xe6>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	442b      	add	r3, r5
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	f8d8 3000 	ldr.w	r3, [r8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d038      	beq.n	80078d6 <_malloc_r+0xf6>
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	42a2      	cmp	r2, r4
 8007868:	d12b      	bne.n	80078c2 <_malloc_r+0xe2>
 800786a:	2200      	movs	r2, #0
 800786c:	605a      	str	r2, [r3, #4]
 800786e:	e00f      	b.n	8007890 <_malloc_r+0xb0>
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	1b52      	subs	r2, r2, r5
 8007874:	d41f      	bmi.n	80078b6 <_malloc_r+0xd6>
 8007876:	2a0b      	cmp	r2, #11
 8007878:	d917      	bls.n	80078aa <_malloc_r+0xca>
 800787a:	1961      	adds	r1, r4, r5
 800787c:	42a3      	cmp	r3, r4
 800787e:	6025      	str	r5, [r4, #0]
 8007880:	bf18      	it	ne
 8007882:	6059      	strne	r1, [r3, #4]
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	bf08      	it	eq
 8007888:	f8c8 1000 	streq.w	r1, [r8]
 800788c:	5162      	str	r2, [r4, r5]
 800788e:	604b      	str	r3, [r1, #4]
 8007890:	4638      	mov	r0, r7
 8007892:	f104 060b 	add.w	r6, r4, #11
 8007896:	f000 f83b 	bl	8007910 <__malloc_unlock>
 800789a:	f026 0607 	bic.w	r6, r6, #7
 800789e:	1d23      	adds	r3, r4, #4
 80078a0:	1af2      	subs	r2, r6, r3
 80078a2:	d0ae      	beq.n	8007802 <_malloc_r+0x22>
 80078a4:	1b9b      	subs	r3, r3, r6
 80078a6:	50a3      	str	r3, [r4, r2]
 80078a8:	e7ab      	b.n	8007802 <_malloc_r+0x22>
 80078aa:	42a3      	cmp	r3, r4
 80078ac:	6862      	ldr	r2, [r4, #4]
 80078ae:	d1dd      	bne.n	800786c <_malloc_r+0x8c>
 80078b0:	f8c8 2000 	str.w	r2, [r8]
 80078b4:	e7ec      	b.n	8007890 <_malloc_r+0xb0>
 80078b6:	4623      	mov	r3, r4
 80078b8:	6864      	ldr	r4, [r4, #4]
 80078ba:	e7ac      	b.n	8007816 <_malloc_r+0x36>
 80078bc:	4634      	mov	r4, r6
 80078be:	6876      	ldr	r6, [r6, #4]
 80078c0:	e7b4      	b.n	800782c <_malloc_r+0x4c>
 80078c2:	4613      	mov	r3, r2
 80078c4:	e7cc      	b.n	8007860 <_malloc_r+0x80>
 80078c6:	230c      	movs	r3, #12
 80078c8:	603b      	str	r3, [r7, #0]
 80078ca:	4638      	mov	r0, r7
 80078cc:	f000 f820 	bl	8007910 <__malloc_unlock>
 80078d0:	e797      	b.n	8007802 <_malloc_r+0x22>
 80078d2:	6025      	str	r5, [r4, #0]
 80078d4:	e7dc      	b.n	8007890 <_malloc_r+0xb0>
 80078d6:	605b      	str	r3, [r3, #4]
 80078d8:	deff      	udf	#255	; 0xff
 80078da:	bf00      	nop
 80078dc:	200008a0 	.word	0x200008a0

080078e0 <__ascii_mbtowc>:
 80078e0:	b082      	sub	sp, #8
 80078e2:	b901      	cbnz	r1, 80078e6 <__ascii_mbtowc+0x6>
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	b142      	cbz	r2, 80078fa <__ascii_mbtowc+0x1a>
 80078e8:	b14b      	cbz	r3, 80078fe <__ascii_mbtowc+0x1e>
 80078ea:	7813      	ldrb	r3, [r2, #0]
 80078ec:	600b      	str	r3, [r1, #0]
 80078ee:	7812      	ldrb	r2, [r2, #0]
 80078f0:	1e10      	subs	r0, r2, #0
 80078f2:	bf18      	it	ne
 80078f4:	2001      	movne	r0, #1
 80078f6:	b002      	add	sp, #8
 80078f8:	4770      	bx	lr
 80078fa:	4610      	mov	r0, r2
 80078fc:	e7fb      	b.n	80078f6 <__ascii_mbtowc+0x16>
 80078fe:	f06f 0001 	mvn.w	r0, #1
 8007902:	e7f8      	b.n	80078f6 <__ascii_mbtowc+0x16>

08007904 <__malloc_lock>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__malloc_lock+0x8>)
 8007906:	f7ff bb84 	b.w	8007012 <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	2000089c 	.word	0x2000089c

08007910 <__malloc_unlock>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__malloc_unlock+0x8>)
 8007912:	f7ff bb7f 	b.w	8007014 <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	2000089c 	.word	0x2000089c

0800791c <_Balloc>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	69c6      	ldr	r6, [r0, #28]
 8007920:	4604      	mov	r4, r0
 8007922:	460d      	mov	r5, r1
 8007924:	b976      	cbnz	r6, 8007944 <_Balloc+0x28>
 8007926:	2010      	movs	r0, #16
 8007928:	f001 fe38 	bl	800959c <malloc>
 800792c:	4602      	mov	r2, r0
 800792e:	61e0      	str	r0, [r4, #28]
 8007930:	b920      	cbnz	r0, 800793c <_Balloc+0x20>
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <_Balloc+0x78>)
 8007934:	4818      	ldr	r0, [pc, #96]	; (8007998 <_Balloc+0x7c>)
 8007936:	216b      	movs	r1, #107	; 0x6b
 8007938:	f7fe fb40 	bl	8005fbc <__assert_func>
 800793c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007940:	6006      	str	r6, [r0, #0]
 8007942:	60c6      	str	r6, [r0, #12]
 8007944:	69e6      	ldr	r6, [r4, #28]
 8007946:	68f3      	ldr	r3, [r6, #12]
 8007948:	b183      	cbz	r3, 800796c <_Balloc+0x50>
 800794a:	69e3      	ldr	r3, [r4, #28]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007952:	b9b8      	cbnz	r0, 8007984 <_Balloc+0x68>
 8007954:	2101      	movs	r1, #1
 8007956:	fa01 f605 	lsl.w	r6, r1, r5
 800795a:	1d72      	adds	r2, r6, #5
 800795c:	0092      	lsls	r2, r2, #2
 800795e:	4620      	mov	r0, r4
 8007960:	f001 fe06 	bl	8009570 <_calloc_r>
 8007964:	b160      	cbz	r0, 8007980 <_Balloc+0x64>
 8007966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800796a:	e00e      	b.n	800798a <_Balloc+0x6e>
 800796c:	2221      	movs	r2, #33	; 0x21
 800796e:	2104      	movs	r1, #4
 8007970:	4620      	mov	r0, r4
 8007972:	f001 fdfd 	bl	8009570 <_calloc_r>
 8007976:	69e3      	ldr	r3, [r4, #28]
 8007978:	60f0      	str	r0, [r6, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e4      	bne.n	800794a <_Balloc+0x2e>
 8007980:	2000      	movs	r0, #0
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	6802      	ldr	r2, [r0, #0]
 8007986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800798a:	2300      	movs	r3, #0
 800798c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007990:	e7f7      	b.n	8007982 <_Balloc+0x66>
 8007992:	bf00      	nop
 8007994:	08009b81 	.word	0x08009b81
 8007998:	08009b98 	.word	0x08009b98

0800799c <_Bfree>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	69c6      	ldr	r6, [r0, #28]
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	b976      	cbnz	r6, 80079c4 <_Bfree+0x28>
 80079a6:	2010      	movs	r0, #16
 80079a8:	f001 fdf8 	bl	800959c <malloc>
 80079ac:	4602      	mov	r2, r0
 80079ae:	61e8      	str	r0, [r5, #28]
 80079b0:	b920      	cbnz	r0, 80079bc <_Bfree+0x20>
 80079b2:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <_Bfree+0x3c>)
 80079b4:	4809      	ldr	r0, [pc, #36]	; (80079dc <_Bfree+0x40>)
 80079b6:	218f      	movs	r1, #143	; 0x8f
 80079b8:	f7fe fb00 	bl	8005fbc <__assert_func>
 80079bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079c0:	6006      	str	r6, [r0, #0]
 80079c2:	60c6      	str	r6, [r0, #12]
 80079c4:	b13c      	cbz	r4, 80079d6 <_Bfree+0x3a>
 80079c6:	69eb      	ldr	r3, [r5, #28]
 80079c8:	6862      	ldr	r2, [r4, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079d0:	6021      	str	r1, [r4, #0]
 80079d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	08009b81 	.word	0x08009b81
 80079dc:	08009b98 	.word	0x08009b98

080079e0 <__multadd>:
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	690d      	ldr	r5, [r1, #16]
 80079e6:	4607      	mov	r7, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	461e      	mov	r6, r3
 80079ec:	f101 0c14 	add.w	ip, r1, #20
 80079f0:	2000      	movs	r0, #0
 80079f2:	f8dc 3000 	ldr.w	r3, [ip]
 80079f6:	b299      	uxth	r1, r3
 80079f8:	fb02 6101 	mla	r1, r2, r1, r6
 80079fc:	0c1e      	lsrs	r6, r3, #16
 80079fe:	0c0b      	lsrs	r3, r1, #16
 8007a00:	fb02 3306 	mla	r3, r2, r6, r3
 8007a04:	b289      	uxth	r1, r1
 8007a06:	3001      	adds	r0, #1
 8007a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a0c:	4285      	cmp	r5, r0
 8007a0e:	f84c 1b04 	str.w	r1, [ip], #4
 8007a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a16:	dcec      	bgt.n	80079f2 <__multadd+0x12>
 8007a18:	b30e      	cbz	r6, 8007a5e <__multadd+0x7e>
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dc19      	bgt.n	8007a54 <__multadd+0x74>
 8007a20:	6861      	ldr	r1, [r4, #4]
 8007a22:	4638      	mov	r0, r7
 8007a24:	3101      	adds	r1, #1
 8007a26:	f7ff ff79 	bl	800791c <_Balloc>
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	b928      	cbnz	r0, 8007a3a <__multadd+0x5a>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <__multadd+0x84>)
 8007a32:	480d      	ldr	r0, [pc, #52]	; (8007a68 <__multadd+0x88>)
 8007a34:	21ba      	movs	r1, #186	; 0xba
 8007a36:	f7fe fac1 	bl	8005fbc <__assert_func>
 8007a3a:	6922      	ldr	r2, [r4, #16]
 8007a3c:	3202      	adds	r2, #2
 8007a3e:	f104 010c 	add.w	r1, r4, #12
 8007a42:	0092      	lsls	r2, r2, #2
 8007a44:	300c      	adds	r0, #12
 8007a46:	f7ff fae6 	bl	8007016 <memcpy>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff ffa5 	bl	800799c <_Bfree>
 8007a52:	4644      	mov	r4, r8
 8007a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a58:	3501      	adds	r5, #1
 8007a5a:	615e      	str	r6, [r3, #20]
 8007a5c:	6125      	str	r5, [r4, #16]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a64:	08009b10 	.word	0x08009b10
 8007a68:	08009b98 	.word	0x08009b98

08007a6c <__s2b>:
 8007a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a70:	460c      	mov	r4, r1
 8007a72:	4615      	mov	r5, r2
 8007a74:	461f      	mov	r7, r3
 8007a76:	2209      	movs	r2, #9
 8007a78:	3308      	adds	r3, #8
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a80:	2100      	movs	r1, #0
 8007a82:	2201      	movs	r2, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	db09      	blt.n	8007a9c <__s2b+0x30>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff ff47 	bl	800791c <_Balloc>
 8007a8e:	b940      	cbnz	r0, 8007aa2 <__s2b+0x36>
 8007a90:	4602      	mov	r2, r0
 8007a92:	4b19      	ldr	r3, [pc, #100]	; (8007af8 <__s2b+0x8c>)
 8007a94:	4819      	ldr	r0, [pc, #100]	; (8007afc <__s2b+0x90>)
 8007a96:	21d3      	movs	r1, #211	; 0xd3
 8007a98:	f7fe fa90 	bl	8005fbc <__assert_func>
 8007a9c:	0052      	lsls	r2, r2, #1
 8007a9e:	3101      	adds	r1, #1
 8007aa0:	e7f0      	b.n	8007a84 <__s2b+0x18>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	6143      	str	r3, [r0, #20]
 8007aa6:	2d09      	cmp	r5, #9
 8007aa8:	f04f 0301 	mov.w	r3, #1
 8007aac:	6103      	str	r3, [r0, #16]
 8007aae:	dd16      	ble.n	8007ade <__s2b+0x72>
 8007ab0:	f104 0909 	add.w	r9, r4, #9
 8007ab4:	46c8      	mov	r8, r9
 8007ab6:	442c      	add	r4, r5
 8007ab8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007abc:	4601      	mov	r1, r0
 8007abe:	3b30      	subs	r3, #48	; 0x30
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ff8c 	bl	80079e0 <__multadd>
 8007ac8:	45a0      	cmp	r8, r4
 8007aca:	d1f5      	bne.n	8007ab8 <__s2b+0x4c>
 8007acc:	f1a5 0408 	sub.w	r4, r5, #8
 8007ad0:	444c      	add	r4, r9
 8007ad2:	1b2d      	subs	r5, r5, r4
 8007ad4:	1963      	adds	r3, r4, r5
 8007ad6:	42bb      	cmp	r3, r7
 8007ad8:	db04      	blt.n	8007ae4 <__s2b+0x78>
 8007ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ade:	340a      	adds	r4, #10
 8007ae0:	2509      	movs	r5, #9
 8007ae2:	e7f6      	b.n	8007ad2 <__s2b+0x66>
 8007ae4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ae8:	4601      	mov	r1, r0
 8007aea:	3b30      	subs	r3, #48	; 0x30
 8007aec:	220a      	movs	r2, #10
 8007aee:	4630      	mov	r0, r6
 8007af0:	f7ff ff76 	bl	80079e0 <__multadd>
 8007af4:	e7ee      	b.n	8007ad4 <__s2b+0x68>
 8007af6:	bf00      	nop
 8007af8:	08009b10 	.word	0x08009b10
 8007afc:	08009b98 	.word	0x08009b98

08007b00 <__hi0bits>:
 8007b00:	0c03      	lsrs	r3, r0, #16
 8007b02:	041b      	lsls	r3, r3, #16
 8007b04:	b9d3      	cbnz	r3, 8007b3c <__hi0bits+0x3c>
 8007b06:	0400      	lsls	r0, r0, #16
 8007b08:	2310      	movs	r3, #16
 8007b0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b0e:	bf04      	itt	eq
 8007b10:	0200      	lsleq	r0, r0, #8
 8007b12:	3308      	addeq	r3, #8
 8007b14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b18:	bf04      	itt	eq
 8007b1a:	0100      	lsleq	r0, r0, #4
 8007b1c:	3304      	addeq	r3, #4
 8007b1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b22:	bf04      	itt	eq
 8007b24:	0080      	lsleq	r0, r0, #2
 8007b26:	3302      	addeq	r3, #2
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	db05      	blt.n	8007b38 <__hi0bits+0x38>
 8007b2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b30:	f103 0301 	add.w	r3, r3, #1
 8007b34:	bf08      	it	eq
 8007b36:	2320      	moveq	r3, #32
 8007b38:	4618      	mov	r0, r3
 8007b3a:	4770      	bx	lr
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e7e4      	b.n	8007b0a <__hi0bits+0xa>

08007b40 <__lo0bits>:
 8007b40:	6803      	ldr	r3, [r0, #0]
 8007b42:	f013 0207 	ands.w	r2, r3, #7
 8007b46:	d00c      	beq.n	8007b62 <__lo0bits+0x22>
 8007b48:	07d9      	lsls	r1, r3, #31
 8007b4a:	d422      	bmi.n	8007b92 <__lo0bits+0x52>
 8007b4c:	079a      	lsls	r2, r3, #30
 8007b4e:	bf49      	itett	mi
 8007b50:	085b      	lsrmi	r3, r3, #1
 8007b52:	089b      	lsrpl	r3, r3, #2
 8007b54:	6003      	strmi	r3, [r0, #0]
 8007b56:	2201      	movmi	r2, #1
 8007b58:	bf5c      	itt	pl
 8007b5a:	6003      	strpl	r3, [r0, #0]
 8007b5c:	2202      	movpl	r2, #2
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4770      	bx	lr
 8007b62:	b299      	uxth	r1, r3
 8007b64:	b909      	cbnz	r1, 8007b6a <__lo0bits+0x2a>
 8007b66:	0c1b      	lsrs	r3, r3, #16
 8007b68:	2210      	movs	r2, #16
 8007b6a:	b2d9      	uxtb	r1, r3
 8007b6c:	b909      	cbnz	r1, 8007b72 <__lo0bits+0x32>
 8007b6e:	3208      	adds	r2, #8
 8007b70:	0a1b      	lsrs	r3, r3, #8
 8007b72:	0719      	lsls	r1, r3, #28
 8007b74:	bf04      	itt	eq
 8007b76:	091b      	lsreq	r3, r3, #4
 8007b78:	3204      	addeq	r2, #4
 8007b7a:	0799      	lsls	r1, r3, #30
 8007b7c:	bf04      	itt	eq
 8007b7e:	089b      	lsreq	r3, r3, #2
 8007b80:	3202      	addeq	r2, #2
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d403      	bmi.n	8007b8e <__lo0bits+0x4e>
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	f102 0201 	add.w	r2, r2, #1
 8007b8c:	d003      	beq.n	8007b96 <__lo0bits+0x56>
 8007b8e:	6003      	str	r3, [r0, #0]
 8007b90:	e7e5      	b.n	8007b5e <__lo0bits+0x1e>
 8007b92:	2200      	movs	r2, #0
 8007b94:	e7e3      	b.n	8007b5e <__lo0bits+0x1e>
 8007b96:	2220      	movs	r2, #32
 8007b98:	e7e1      	b.n	8007b5e <__lo0bits+0x1e>
	...

08007b9c <__i2b>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	f7ff febb 	bl	800791c <_Balloc>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	b928      	cbnz	r0, 8007bb6 <__i2b+0x1a>
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <__i2b+0x24>)
 8007bac:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <__i2b+0x28>)
 8007bae:	f240 1145 	movw	r1, #325	; 0x145
 8007bb2:	f7fe fa03 	bl	8005fbc <__assert_func>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	6144      	str	r4, [r0, #20]
 8007bba:	6103      	str	r3, [r0, #16]
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08009b10 	.word	0x08009b10
 8007bc4:	08009b98 	.word	0x08009b98

08007bc8 <__multiply>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	4691      	mov	r9, r2
 8007bce:	690a      	ldr	r2, [r1, #16]
 8007bd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	bfb8      	it	lt
 8007bd8:	460b      	movlt	r3, r1
 8007bda:	460c      	mov	r4, r1
 8007bdc:	bfbc      	itt	lt
 8007bde:	464c      	movlt	r4, r9
 8007be0:	4699      	movlt	r9, r3
 8007be2:	6927      	ldr	r7, [r4, #16]
 8007be4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007be8:	68a3      	ldr	r3, [r4, #8]
 8007bea:	6861      	ldr	r1, [r4, #4]
 8007bec:	eb07 060a 	add.w	r6, r7, sl
 8007bf0:	42b3      	cmp	r3, r6
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	bfb8      	it	lt
 8007bf6:	3101      	addlt	r1, #1
 8007bf8:	f7ff fe90 	bl	800791c <_Balloc>
 8007bfc:	b930      	cbnz	r0, 8007c0c <__multiply+0x44>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	4b44      	ldr	r3, [pc, #272]	; (8007d14 <__multiply+0x14c>)
 8007c02:	4845      	ldr	r0, [pc, #276]	; (8007d18 <__multiply+0x150>)
 8007c04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c08:	f7fe f9d8 	bl	8005fbc <__assert_func>
 8007c0c:	f100 0514 	add.w	r5, r0, #20
 8007c10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c14:	462b      	mov	r3, r5
 8007c16:	2200      	movs	r2, #0
 8007c18:	4543      	cmp	r3, r8
 8007c1a:	d321      	bcc.n	8007c60 <__multiply+0x98>
 8007c1c:	f104 0314 	add.w	r3, r4, #20
 8007c20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c24:	f109 0314 	add.w	r3, r9, #20
 8007c28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c2c:	9202      	str	r2, [sp, #8]
 8007c2e:	1b3a      	subs	r2, r7, r4
 8007c30:	3a15      	subs	r2, #21
 8007c32:	f022 0203 	bic.w	r2, r2, #3
 8007c36:	3204      	adds	r2, #4
 8007c38:	f104 0115 	add.w	r1, r4, #21
 8007c3c:	428f      	cmp	r7, r1
 8007c3e:	bf38      	it	cc
 8007c40:	2204      	movcc	r2, #4
 8007c42:	9201      	str	r2, [sp, #4]
 8007c44:	9a02      	ldr	r2, [sp, #8]
 8007c46:	9303      	str	r3, [sp, #12]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d80c      	bhi.n	8007c66 <__multiply+0x9e>
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	dd03      	ble.n	8007c58 <__multiply+0x90>
 8007c50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05b      	beq.n	8007d10 <__multiply+0x148>
 8007c58:	6106      	str	r6, [r0, #16]
 8007c5a:	b005      	add	sp, #20
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c60:	f843 2b04 	str.w	r2, [r3], #4
 8007c64:	e7d8      	b.n	8007c18 <__multiply+0x50>
 8007c66:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c6a:	f1ba 0f00 	cmp.w	sl, #0
 8007c6e:	d024      	beq.n	8007cba <__multiply+0xf2>
 8007c70:	f104 0e14 	add.w	lr, r4, #20
 8007c74:	46a9      	mov	r9, r5
 8007c76:	f04f 0c00 	mov.w	ip, #0
 8007c7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c7e:	f8d9 1000 	ldr.w	r1, [r9]
 8007c82:	fa1f fb82 	uxth.w	fp, r2
 8007c86:	b289      	uxth	r1, r1
 8007c88:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c90:	f8d9 2000 	ldr.w	r2, [r9]
 8007c94:	4461      	add	r1, ip
 8007c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ca2:	b289      	uxth	r1, r1
 8007ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ca8:	4577      	cmp	r7, lr
 8007caa:	f849 1b04 	str.w	r1, [r9], #4
 8007cae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cb2:	d8e2      	bhi.n	8007c7a <__multiply+0xb2>
 8007cb4:	9a01      	ldr	r2, [sp, #4]
 8007cb6:	f845 c002 	str.w	ip, [r5, r2]
 8007cba:	9a03      	ldr	r2, [sp, #12]
 8007cbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	f1b9 0f00 	cmp.w	r9, #0
 8007cc6:	d021      	beq.n	8007d0c <__multiply+0x144>
 8007cc8:	6829      	ldr	r1, [r5, #0]
 8007cca:	f104 0c14 	add.w	ip, r4, #20
 8007cce:	46ae      	mov	lr, r5
 8007cd0:	f04f 0a00 	mov.w	sl, #0
 8007cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8007cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007cdc:	fb09 220b 	mla	r2, r9, fp, r2
 8007ce0:	4452      	add	r2, sl
 8007ce2:	b289      	uxth	r1, r1
 8007ce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ce8:	f84e 1b04 	str.w	r1, [lr], #4
 8007cec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007cf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cf4:	f8be 1000 	ldrh.w	r1, [lr]
 8007cf8:	fb09 110a 	mla	r1, r9, sl, r1
 8007cfc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007d00:	4567      	cmp	r7, ip
 8007d02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d06:	d8e5      	bhi.n	8007cd4 <__multiply+0x10c>
 8007d08:	9a01      	ldr	r2, [sp, #4]
 8007d0a:	50a9      	str	r1, [r5, r2]
 8007d0c:	3504      	adds	r5, #4
 8007d0e:	e799      	b.n	8007c44 <__multiply+0x7c>
 8007d10:	3e01      	subs	r6, #1
 8007d12:	e79b      	b.n	8007c4c <__multiply+0x84>
 8007d14:	08009b10 	.word	0x08009b10
 8007d18:	08009b98 	.word	0x08009b98

08007d1c <__pow5mult>:
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4615      	mov	r5, r2
 8007d22:	f012 0203 	ands.w	r2, r2, #3
 8007d26:	4606      	mov	r6, r0
 8007d28:	460f      	mov	r7, r1
 8007d2a:	d007      	beq.n	8007d3c <__pow5mult+0x20>
 8007d2c:	4c25      	ldr	r4, [pc, #148]	; (8007dc4 <__pow5mult+0xa8>)
 8007d2e:	3a01      	subs	r2, #1
 8007d30:	2300      	movs	r3, #0
 8007d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d36:	f7ff fe53 	bl	80079e0 <__multadd>
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	10ad      	asrs	r5, r5, #2
 8007d3e:	d03d      	beq.n	8007dbc <__pow5mult+0xa0>
 8007d40:	69f4      	ldr	r4, [r6, #28]
 8007d42:	b97c      	cbnz	r4, 8007d64 <__pow5mult+0x48>
 8007d44:	2010      	movs	r0, #16
 8007d46:	f001 fc29 	bl	800959c <malloc>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	61f0      	str	r0, [r6, #28]
 8007d4e:	b928      	cbnz	r0, 8007d5c <__pow5mult+0x40>
 8007d50:	4b1d      	ldr	r3, [pc, #116]	; (8007dc8 <__pow5mult+0xac>)
 8007d52:	481e      	ldr	r0, [pc, #120]	; (8007dcc <__pow5mult+0xb0>)
 8007d54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d58:	f7fe f930 	bl	8005fbc <__assert_func>
 8007d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d60:	6004      	str	r4, [r0, #0]
 8007d62:	60c4      	str	r4, [r0, #12]
 8007d64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d6c:	b94c      	cbnz	r4, 8007d82 <__pow5mult+0x66>
 8007d6e:	f240 2171 	movw	r1, #625	; 0x271
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff ff12 	bl	8007b9c <__i2b>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d7e:	4604      	mov	r4, r0
 8007d80:	6003      	str	r3, [r0, #0]
 8007d82:	f04f 0900 	mov.w	r9, #0
 8007d86:	07eb      	lsls	r3, r5, #31
 8007d88:	d50a      	bpl.n	8007da0 <__pow5mult+0x84>
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	4622      	mov	r2, r4
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff ff1a 	bl	8007bc8 <__multiply>
 8007d94:	4639      	mov	r1, r7
 8007d96:	4680      	mov	r8, r0
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff fdff 	bl	800799c <_Bfree>
 8007d9e:	4647      	mov	r7, r8
 8007da0:	106d      	asrs	r5, r5, #1
 8007da2:	d00b      	beq.n	8007dbc <__pow5mult+0xa0>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	b938      	cbnz	r0, 8007db8 <__pow5mult+0x9c>
 8007da8:	4622      	mov	r2, r4
 8007daa:	4621      	mov	r1, r4
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7ff ff0b 	bl	8007bc8 <__multiply>
 8007db2:	6020      	str	r0, [r4, #0]
 8007db4:	f8c0 9000 	str.w	r9, [r0]
 8007db8:	4604      	mov	r4, r0
 8007dba:	e7e4      	b.n	8007d86 <__pow5mult+0x6a>
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08009ce8 	.word	0x08009ce8
 8007dc8:	08009b81 	.word	0x08009b81
 8007dcc:	08009b98 	.word	0x08009b98

08007dd0 <__lshift>:
 8007dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	6849      	ldr	r1, [r1, #4]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	4607      	mov	r7, r0
 8007de2:	4691      	mov	r9, r2
 8007de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007de8:	f108 0601 	add.w	r6, r8, #1
 8007dec:	42b3      	cmp	r3, r6
 8007dee:	db0b      	blt.n	8007e08 <__lshift+0x38>
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff fd93 	bl	800791c <_Balloc>
 8007df6:	4605      	mov	r5, r0
 8007df8:	b948      	cbnz	r0, 8007e0e <__lshift+0x3e>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <__lshift+0xd0>)
 8007dfe:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <__lshift+0xd4>)
 8007e00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e04:	f7fe f8da 	bl	8005fbc <__assert_func>
 8007e08:	3101      	adds	r1, #1
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	e7ee      	b.n	8007dec <__lshift+0x1c>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f100 0114 	add.w	r1, r0, #20
 8007e14:	f100 0210 	add.w	r2, r0, #16
 8007e18:	4618      	mov	r0, r3
 8007e1a:	4553      	cmp	r3, sl
 8007e1c:	db33      	blt.n	8007e86 <__lshift+0xb6>
 8007e1e:	6920      	ldr	r0, [r4, #16]
 8007e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e24:	f104 0314 	add.w	r3, r4, #20
 8007e28:	f019 091f 	ands.w	r9, r9, #31
 8007e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e34:	d02b      	beq.n	8007e8e <__lshift+0xbe>
 8007e36:	f1c9 0e20 	rsb	lr, r9, #32
 8007e3a:	468a      	mov	sl, r1
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	fa00 f009 	lsl.w	r0, r0, r9
 8007e44:	4310      	orrs	r0, r2
 8007e46:	f84a 0b04 	str.w	r0, [sl], #4
 8007e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4e:	459c      	cmp	ip, r3
 8007e50:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e54:	d8f3      	bhi.n	8007e3e <__lshift+0x6e>
 8007e56:	ebac 0304 	sub.w	r3, ip, r4
 8007e5a:	3b15      	subs	r3, #21
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	3304      	adds	r3, #4
 8007e62:	f104 0015 	add.w	r0, r4, #21
 8007e66:	4584      	cmp	ip, r0
 8007e68:	bf38      	it	cc
 8007e6a:	2304      	movcc	r3, #4
 8007e6c:	50ca      	str	r2, [r1, r3]
 8007e6e:	b10a      	cbz	r2, 8007e74 <__lshift+0xa4>
 8007e70:	f108 0602 	add.w	r6, r8, #2
 8007e74:	3e01      	subs	r6, #1
 8007e76:	4638      	mov	r0, r7
 8007e78:	612e      	str	r6, [r5, #16]
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	f7ff fd8e 	bl	800799c <_Bfree>
 8007e80:	4628      	mov	r0, r5
 8007e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e86:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	e7c5      	b.n	8007e1a <__lshift+0x4a>
 8007e8e:	3904      	subs	r1, #4
 8007e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e94:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e98:	459c      	cmp	ip, r3
 8007e9a:	d8f9      	bhi.n	8007e90 <__lshift+0xc0>
 8007e9c:	e7ea      	b.n	8007e74 <__lshift+0xa4>
 8007e9e:	bf00      	nop
 8007ea0:	08009b10 	.word	0x08009b10
 8007ea4:	08009b98 	.word	0x08009b98

08007ea8 <__mcmp>:
 8007ea8:	b530      	push	{r4, r5, lr}
 8007eaa:	6902      	ldr	r2, [r0, #16]
 8007eac:	690c      	ldr	r4, [r1, #16]
 8007eae:	1b12      	subs	r2, r2, r4
 8007eb0:	d10e      	bne.n	8007ed0 <__mcmp+0x28>
 8007eb2:	f100 0314 	add.w	r3, r0, #20
 8007eb6:	3114      	adds	r1, #20
 8007eb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ebc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ec0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ec4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ec8:	42a5      	cmp	r5, r4
 8007eca:	d003      	beq.n	8007ed4 <__mcmp+0x2c>
 8007ecc:	d305      	bcc.n	8007eda <__mcmp+0x32>
 8007ece:	2201      	movs	r2, #1
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	bd30      	pop	{r4, r5, pc}
 8007ed4:	4283      	cmp	r3, r0
 8007ed6:	d3f3      	bcc.n	8007ec0 <__mcmp+0x18>
 8007ed8:	e7fa      	b.n	8007ed0 <__mcmp+0x28>
 8007eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ede:	e7f7      	b.n	8007ed0 <__mcmp+0x28>

08007ee0 <__mdiff>:
 8007ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4620      	mov	r0, r4
 8007eec:	4690      	mov	r8, r2
 8007eee:	f7ff ffdb 	bl	8007ea8 <__mcmp>
 8007ef2:	1e05      	subs	r5, r0, #0
 8007ef4:	d110      	bne.n	8007f18 <__mdiff+0x38>
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7ff fd0f 	bl	800791c <_Balloc>
 8007efe:	b930      	cbnz	r0, 8007f0e <__mdiff+0x2e>
 8007f00:	4b3a      	ldr	r3, [pc, #232]	; (8007fec <__mdiff+0x10c>)
 8007f02:	4602      	mov	r2, r0
 8007f04:	f240 2137 	movw	r1, #567	; 0x237
 8007f08:	4839      	ldr	r0, [pc, #228]	; (8007ff0 <__mdiff+0x110>)
 8007f0a:	f7fe f857 	bl	8005fbc <__assert_func>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	bfa4      	itt	ge
 8007f1a:	4643      	movge	r3, r8
 8007f1c:	46a0      	movge	r8, r4
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f24:	bfa6      	itte	ge
 8007f26:	461c      	movge	r4, r3
 8007f28:	2500      	movge	r5, #0
 8007f2a:	2501      	movlt	r5, #1
 8007f2c:	f7ff fcf6 	bl	800791c <_Balloc>
 8007f30:	b920      	cbnz	r0, 8007f3c <__mdiff+0x5c>
 8007f32:	4b2e      	ldr	r3, [pc, #184]	; (8007fec <__mdiff+0x10c>)
 8007f34:	4602      	mov	r2, r0
 8007f36:	f240 2145 	movw	r1, #581	; 0x245
 8007f3a:	e7e5      	b.n	8007f08 <__mdiff+0x28>
 8007f3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f40:	6926      	ldr	r6, [r4, #16]
 8007f42:	60c5      	str	r5, [r0, #12]
 8007f44:	f104 0914 	add.w	r9, r4, #20
 8007f48:	f108 0514 	add.w	r5, r8, #20
 8007f4c:	f100 0e14 	add.w	lr, r0, #20
 8007f50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f58:	f108 0210 	add.w	r2, r8, #16
 8007f5c:	46f2      	mov	sl, lr
 8007f5e:	2100      	movs	r1, #0
 8007f60:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f68:	fa11 f88b 	uxtah	r8, r1, fp
 8007f6c:	b299      	uxth	r1, r3
 8007f6e:	0c1b      	lsrs	r3, r3, #16
 8007f70:	eba8 0801 	sub.w	r8, r8, r1
 8007f74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f7c:	fa1f f888 	uxth.w	r8, r8
 8007f80:	1419      	asrs	r1, r3, #16
 8007f82:	454e      	cmp	r6, r9
 8007f84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f88:	f84a 3b04 	str.w	r3, [sl], #4
 8007f8c:	d8e8      	bhi.n	8007f60 <__mdiff+0x80>
 8007f8e:	1b33      	subs	r3, r6, r4
 8007f90:	3b15      	subs	r3, #21
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	3304      	adds	r3, #4
 8007f98:	3415      	adds	r4, #21
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	bf38      	it	cc
 8007f9e:	2304      	movcc	r3, #4
 8007fa0:	441d      	add	r5, r3
 8007fa2:	4473      	add	r3, lr
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	462e      	mov	r6, r5
 8007fa8:	4566      	cmp	r6, ip
 8007faa:	d30e      	bcc.n	8007fca <__mdiff+0xea>
 8007fac:	f10c 0203 	add.w	r2, ip, #3
 8007fb0:	1b52      	subs	r2, r2, r5
 8007fb2:	f022 0203 	bic.w	r2, r2, #3
 8007fb6:	3d03      	subs	r5, #3
 8007fb8:	45ac      	cmp	ip, r5
 8007fba:	bf38      	it	cc
 8007fbc:	2200      	movcc	r2, #0
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007fc4:	b17a      	cbz	r2, 8007fe6 <__mdiff+0x106>
 8007fc6:	6107      	str	r7, [r0, #16]
 8007fc8:	e7a4      	b.n	8007f14 <__mdiff+0x34>
 8007fca:	f856 8b04 	ldr.w	r8, [r6], #4
 8007fce:	fa11 f288 	uxtah	r2, r1, r8
 8007fd2:	1414      	asrs	r4, r2, #16
 8007fd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fd8:	b292      	uxth	r2, r2
 8007fda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fde:	f84e 2b04 	str.w	r2, [lr], #4
 8007fe2:	1421      	asrs	r1, r4, #16
 8007fe4:	e7e0      	b.n	8007fa8 <__mdiff+0xc8>
 8007fe6:	3f01      	subs	r7, #1
 8007fe8:	e7ea      	b.n	8007fc0 <__mdiff+0xe0>
 8007fea:	bf00      	nop
 8007fec:	08009b10 	.word	0x08009b10
 8007ff0:	08009b98 	.word	0x08009b98

08007ff4 <__ulp>:
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	ed8d 0b00 	vstr	d0, [sp]
 8007ffa:	9a01      	ldr	r2, [sp, #4]
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <__ulp+0x48>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008004:	2b00      	cmp	r3, #0
 8008006:	dc08      	bgt.n	800801a <__ulp+0x26>
 8008008:	425b      	negs	r3, r3
 800800a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800800e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008012:	da04      	bge.n	800801e <__ulp+0x2a>
 8008014:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008018:	4113      	asrs	r3, r2
 800801a:	2200      	movs	r2, #0
 800801c:	e008      	b.n	8008030 <__ulp+0x3c>
 800801e:	f1a2 0314 	sub.w	r3, r2, #20
 8008022:	2b1e      	cmp	r3, #30
 8008024:	bfda      	itte	le
 8008026:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800802a:	40da      	lsrle	r2, r3
 800802c:	2201      	movgt	r2, #1
 800802e:	2300      	movs	r3, #0
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	ec41 0b10 	vmov	d0, r0, r1
 8008038:	b002      	add	sp, #8
 800803a:	4770      	bx	lr
 800803c:	7ff00000 	.word	0x7ff00000

08008040 <__b2d>:
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	6906      	ldr	r6, [r0, #16]
 8008046:	f100 0814 	add.w	r8, r0, #20
 800804a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800804e:	1f37      	subs	r7, r6, #4
 8008050:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008054:	4610      	mov	r0, r2
 8008056:	f7ff fd53 	bl	8007b00 <__hi0bits>
 800805a:	f1c0 0320 	rsb	r3, r0, #32
 800805e:	280a      	cmp	r0, #10
 8008060:	600b      	str	r3, [r1, #0]
 8008062:	491b      	ldr	r1, [pc, #108]	; (80080d0 <__b2d+0x90>)
 8008064:	dc15      	bgt.n	8008092 <__b2d+0x52>
 8008066:	f1c0 0c0b 	rsb	ip, r0, #11
 800806a:	fa22 f30c 	lsr.w	r3, r2, ip
 800806e:	45b8      	cmp	r8, r7
 8008070:	ea43 0501 	orr.w	r5, r3, r1
 8008074:	bf34      	ite	cc
 8008076:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800807a:	2300      	movcs	r3, #0
 800807c:	3015      	adds	r0, #21
 800807e:	fa02 f000 	lsl.w	r0, r2, r0
 8008082:	fa23 f30c 	lsr.w	r3, r3, ip
 8008086:	4303      	orrs	r3, r0
 8008088:	461c      	mov	r4, r3
 800808a:	ec45 4b10 	vmov	d0, r4, r5
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008092:	45b8      	cmp	r8, r7
 8008094:	bf3a      	itte	cc
 8008096:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800809a:	f1a6 0708 	subcc.w	r7, r6, #8
 800809e:	2300      	movcs	r3, #0
 80080a0:	380b      	subs	r0, #11
 80080a2:	d012      	beq.n	80080ca <__b2d+0x8a>
 80080a4:	f1c0 0120 	rsb	r1, r0, #32
 80080a8:	fa23 f401 	lsr.w	r4, r3, r1
 80080ac:	4082      	lsls	r2, r0
 80080ae:	4322      	orrs	r2, r4
 80080b0:	4547      	cmp	r7, r8
 80080b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80080b6:	bf8c      	ite	hi
 80080b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80080bc:	2200      	movls	r2, #0
 80080be:	4083      	lsls	r3, r0
 80080c0:	40ca      	lsrs	r2, r1
 80080c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080c6:	4313      	orrs	r3, r2
 80080c8:	e7de      	b.n	8008088 <__b2d+0x48>
 80080ca:	ea42 0501 	orr.w	r5, r2, r1
 80080ce:	e7db      	b.n	8008088 <__b2d+0x48>
 80080d0:	3ff00000 	.word	0x3ff00000

080080d4 <__d2b>:
 80080d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	460f      	mov	r7, r1
 80080da:	2101      	movs	r1, #1
 80080dc:	ec59 8b10 	vmov	r8, r9, d0
 80080e0:	4616      	mov	r6, r2
 80080e2:	f7ff fc1b 	bl	800791c <_Balloc>
 80080e6:	4604      	mov	r4, r0
 80080e8:	b930      	cbnz	r0, 80080f8 <__d2b+0x24>
 80080ea:	4602      	mov	r2, r0
 80080ec:	4b24      	ldr	r3, [pc, #144]	; (8008180 <__d2b+0xac>)
 80080ee:	4825      	ldr	r0, [pc, #148]	; (8008184 <__d2b+0xb0>)
 80080f0:	f240 310f 	movw	r1, #783	; 0x30f
 80080f4:	f7fd ff62 	bl	8005fbc <__assert_func>
 80080f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008100:	bb2d      	cbnz	r5, 800814e <__d2b+0x7a>
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	f1b8 0300 	subs.w	r3, r8, #0
 8008108:	d026      	beq.n	8008158 <__d2b+0x84>
 800810a:	4668      	mov	r0, sp
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	f7ff fd17 	bl	8007b40 <__lo0bits>
 8008112:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008116:	b1e8      	cbz	r0, 8008154 <__d2b+0x80>
 8008118:	f1c0 0320 	rsb	r3, r0, #32
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	430b      	orrs	r3, r1
 8008122:	40c2      	lsrs	r2, r0
 8008124:	6163      	str	r3, [r4, #20]
 8008126:	9201      	str	r2, [sp, #4]
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	61a3      	str	r3, [r4, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	bf14      	ite	ne
 8008130:	2202      	movne	r2, #2
 8008132:	2201      	moveq	r2, #1
 8008134:	6122      	str	r2, [r4, #16]
 8008136:	b1bd      	cbz	r5, 8008168 <__d2b+0x94>
 8008138:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800813c:	4405      	add	r5, r0
 800813e:	603d      	str	r5, [r7, #0]
 8008140:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008144:	6030      	str	r0, [r6, #0]
 8008146:	4620      	mov	r0, r4
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800814e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008152:	e7d6      	b.n	8008102 <__d2b+0x2e>
 8008154:	6161      	str	r1, [r4, #20]
 8008156:	e7e7      	b.n	8008128 <__d2b+0x54>
 8008158:	a801      	add	r0, sp, #4
 800815a:	f7ff fcf1 	bl	8007b40 <__lo0bits>
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	6163      	str	r3, [r4, #20]
 8008162:	3020      	adds	r0, #32
 8008164:	2201      	movs	r2, #1
 8008166:	e7e5      	b.n	8008134 <__d2b+0x60>
 8008168:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800816c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008170:	6038      	str	r0, [r7, #0]
 8008172:	6918      	ldr	r0, [r3, #16]
 8008174:	f7ff fcc4 	bl	8007b00 <__hi0bits>
 8008178:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800817c:	e7e2      	b.n	8008144 <__d2b+0x70>
 800817e:	bf00      	nop
 8008180:	08009b10 	.word	0x08009b10
 8008184:	08009b98 	.word	0x08009b98

08008188 <__ratio>:
 8008188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	4688      	mov	r8, r1
 800818e:	4669      	mov	r1, sp
 8008190:	4681      	mov	r9, r0
 8008192:	f7ff ff55 	bl	8008040 <__b2d>
 8008196:	a901      	add	r1, sp, #4
 8008198:	4640      	mov	r0, r8
 800819a:	ec55 4b10 	vmov	r4, r5, d0
 800819e:	f7ff ff4f 	bl	8008040 <__b2d>
 80081a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80081aa:	eba3 0c02 	sub.w	ip, r3, r2
 80081ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80081b8:	ec51 0b10 	vmov	r0, r1, d0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfd6      	itet	le
 80081c0:	460a      	movle	r2, r1
 80081c2:	462a      	movgt	r2, r5
 80081c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80081c8:	468b      	mov	fp, r1
 80081ca:	462f      	mov	r7, r5
 80081cc:	bfd4      	ite	le
 80081ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80081d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80081d6:	4620      	mov	r0, r4
 80081d8:	ee10 2a10 	vmov	r2, s0
 80081dc:	465b      	mov	r3, fp
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fb44 	bl	800086c <__aeabi_ddiv>
 80081e4:	ec41 0b10 	vmov	d0, r0, r1
 80081e8:	b003      	add	sp, #12
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081ee <__copybits>:
 80081ee:	3901      	subs	r1, #1
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	1149      	asrs	r1, r1, #5
 80081f4:	6914      	ldr	r4, [r2, #16]
 80081f6:	3101      	adds	r1, #1
 80081f8:	f102 0314 	add.w	r3, r2, #20
 80081fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008200:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008204:	1f05      	subs	r5, r0, #4
 8008206:	42a3      	cmp	r3, r4
 8008208:	d30c      	bcc.n	8008224 <__copybits+0x36>
 800820a:	1aa3      	subs	r3, r4, r2
 800820c:	3b11      	subs	r3, #17
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	3211      	adds	r2, #17
 8008214:	42a2      	cmp	r2, r4
 8008216:	bf88      	it	hi
 8008218:	2300      	movhi	r3, #0
 800821a:	4418      	add	r0, r3
 800821c:	2300      	movs	r3, #0
 800821e:	4288      	cmp	r0, r1
 8008220:	d305      	bcc.n	800822e <__copybits+0x40>
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	f853 6b04 	ldr.w	r6, [r3], #4
 8008228:	f845 6f04 	str.w	r6, [r5, #4]!
 800822c:	e7eb      	b.n	8008206 <__copybits+0x18>
 800822e:	f840 3b04 	str.w	r3, [r0], #4
 8008232:	e7f4      	b.n	800821e <__copybits+0x30>

08008234 <__any_on>:
 8008234:	f100 0214 	add.w	r2, r0, #20
 8008238:	6900      	ldr	r0, [r0, #16]
 800823a:	114b      	asrs	r3, r1, #5
 800823c:	4298      	cmp	r0, r3
 800823e:	b510      	push	{r4, lr}
 8008240:	db11      	blt.n	8008266 <__any_on+0x32>
 8008242:	dd0a      	ble.n	800825a <__any_on+0x26>
 8008244:	f011 011f 	ands.w	r1, r1, #31
 8008248:	d007      	beq.n	800825a <__any_on+0x26>
 800824a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800824e:	fa24 f001 	lsr.w	r0, r4, r1
 8008252:	fa00 f101 	lsl.w	r1, r0, r1
 8008256:	428c      	cmp	r4, r1
 8008258:	d10b      	bne.n	8008272 <__any_on+0x3e>
 800825a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800825e:	4293      	cmp	r3, r2
 8008260:	d803      	bhi.n	800826a <__any_on+0x36>
 8008262:	2000      	movs	r0, #0
 8008264:	bd10      	pop	{r4, pc}
 8008266:	4603      	mov	r3, r0
 8008268:	e7f7      	b.n	800825a <__any_on+0x26>
 800826a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800826e:	2900      	cmp	r1, #0
 8008270:	d0f5      	beq.n	800825e <__any_on+0x2a>
 8008272:	2001      	movs	r0, #1
 8008274:	e7f6      	b.n	8008264 <__any_on+0x30>

08008276 <__ascii_wctomb>:
 8008276:	b149      	cbz	r1, 800828c <__ascii_wctomb+0x16>
 8008278:	2aff      	cmp	r2, #255	; 0xff
 800827a:	bf85      	ittet	hi
 800827c:	238a      	movhi	r3, #138	; 0x8a
 800827e:	6003      	strhi	r3, [r0, #0]
 8008280:	700a      	strbls	r2, [r1, #0]
 8008282:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008286:	bf98      	it	ls
 8008288:	2001      	movls	r0, #1
 800828a:	4770      	bx	lr
 800828c:	4608      	mov	r0, r1
 800828e:	4770      	bx	lr

08008290 <__ssputs_r>:
 8008290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	688e      	ldr	r6, [r1, #8]
 8008296:	461f      	mov	r7, r3
 8008298:	42be      	cmp	r6, r7
 800829a:	680b      	ldr	r3, [r1, #0]
 800829c:	4682      	mov	sl, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	4690      	mov	r8, r2
 80082a2:	d82c      	bhi.n	80082fe <__ssputs_r+0x6e>
 80082a4:	898a      	ldrh	r2, [r1, #12]
 80082a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082aa:	d026      	beq.n	80082fa <__ssputs_r+0x6a>
 80082ac:	6965      	ldr	r5, [r4, #20]
 80082ae:	6909      	ldr	r1, [r1, #16]
 80082b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082b4:	eba3 0901 	sub.w	r9, r3, r1
 80082b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082bc:	1c7b      	adds	r3, r7, #1
 80082be:	444b      	add	r3, r9
 80082c0:	106d      	asrs	r5, r5, #1
 80082c2:	429d      	cmp	r5, r3
 80082c4:	bf38      	it	cc
 80082c6:	461d      	movcc	r5, r3
 80082c8:	0553      	lsls	r3, r2, #21
 80082ca:	d527      	bpl.n	800831c <__ssputs_r+0x8c>
 80082cc:	4629      	mov	r1, r5
 80082ce:	f7ff fa87 	bl	80077e0 <_malloc_r>
 80082d2:	4606      	mov	r6, r0
 80082d4:	b360      	cbz	r0, 8008330 <__ssputs_r+0xa0>
 80082d6:	6921      	ldr	r1, [r4, #16]
 80082d8:	464a      	mov	r2, r9
 80082da:	f7fe fe9c 	bl	8007016 <memcpy>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	6126      	str	r6, [r4, #16]
 80082ec:	6165      	str	r5, [r4, #20]
 80082ee:	444e      	add	r6, r9
 80082f0:	eba5 0509 	sub.w	r5, r5, r9
 80082f4:	6026      	str	r6, [r4, #0]
 80082f6:	60a5      	str	r5, [r4, #8]
 80082f8:	463e      	mov	r6, r7
 80082fa:	42be      	cmp	r6, r7
 80082fc:	d900      	bls.n	8008300 <__ssputs_r+0x70>
 80082fe:	463e      	mov	r6, r7
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	4632      	mov	r2, r6
 8008304:	4641      	mov	r1, r8
 8008306:	f001 f8c5 	bl	8009494 <memmove>
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	1b9b      	subs	r3, r3, r6
 800830e:	60a3      	str	r3, [r4, #8]
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	4433      	add	r3, r6
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	2000      	movs	r0, #0
 8008318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831c:	462a      	mov	r2, r5
 800831e:	f001 f945 	bl	80095ac <_realloc_r>
 8008322:	4606      	mov	r6, r0
 8008324:	2800      	cmp	r0, #0
 8008326:	d1e0      	bne.n	80082ea <__ssputs_r+0x5a>
 8008328:	6921      	ldr	r1, [r4, #16]
 800832a:	4650      	mov	r0, sl
 800832c:	f7fe fe94 	bl	8007058 <_free_r>
 8008330:	230c      	movs	r3, #12
 8008332:	f8ca 3000 	str.w	r3, [sl]
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008342:	e7e9      	b.n	8008318 <__ssputs_r+0x88>

08008344 <_svfiprintf_r>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4698      	mov	r8, r3
 800834a:	898b      	ldrh	r3, [r1, #12]
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	b09d      	sub	sp, #116	; 0x74
 8008350:	4607      	mov	r7, r0
 8008352:	460d      	mov	r5, r1
 8008354:	4614      	mov	r4, r2
 8008356:	d50e      	bpl.n	8008376 <_svfiprintf_r+0x32>
 8008358:	690b      	ldr	r3, [r1, #16]
 800835a:	b963      	cbnz	r3, 8008376 <_svfiprintf_r+0x32>
 800835c:	2140      	movs	r1, #64	; 0x40
 800835e:	f7ff fa3f 	bl	80077e0 <_malloc_r>
 8008362:	6028      	str	r0, [r5, #0]
 8008364:	6128      	str	r0, [r5, #16]
 8008366:	b920      	cbnz	r0, 8008372 <_svfiprintf_r+0x2e>
 8008368:	230c      	movs	r3, #12
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008370:	e0d0      	b.n	8008514 <_svfiprintf_r+0x1d0>
 8008372:	2340      	movs	r3, #64	; 0x40
 8008374:	616b      	str	r3, [r5, #20]
 8008376:	2300      	movs	r3, #0
 8008378:	9309      	str	r3, [sp, #36]	; 0x24
 800837a:	2320      	movs	r3, #32
 800837c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008380:	f8cd 800c 	str.w	r8, [sp, #12]
 8008384:	2330      	movs	r3, #48	; 0x30
 8008386:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800852c <_svfiprintf_r+0x1e8>
 800838a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800838e:	f04f 0901 	mov.w	r9, #1
 8008392:	4623      	mov	r3, r4
 8008394:	469a      	mov	sl, r3
 8008396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839a:	b10a      	cbz	r2, 80083a0 <_svfiprintf_r+0x5c>
 800839c:	2a25      	cmp	r2, #37	; 0x25
 800839e:	d1f9      	bne.n	8008394 <_svfiprintf_r+0x50>
 80083a0:	ebba 0b04 	subs.w	fp, sl, r4
 80083a4:	d00b      	beq.n	80083be <_svfiprintf_r+0x7a>
 80083a6:	465b      	mov	r3, fp
 80083a8:	4622      	mov	r2, r4
 80083aa:	4629      	mov	r1, r5
 80083ac:	4638      	mov	r0, r7
 80083ae:	f7ff ff6f 	bl	8008290 <__ssputs_r>
 80083b2:	3001      	adds	r0, #1
 80083b4:	f000 80a9 	beq.w	800850a <_svfiprintf_r+0x1c6>
 80083b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ba:	445a      	add	r2, fp
 80083bc:	9209      	str	r2, [sp, #36]	; 0x24
 80083be:	f89a 3000 	ldrb.w	r3, [sl]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 80a1 	beq.w	800850a <_svfiprintf_r+0x1c6>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d2:	f10a 0a01 	add.w	sl, sl, #1
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	9307      	str	r3, [sp, #28]
 80083da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083de:	931a      	str	r3, [sp, #104]	; 0x68
 80083e0:	4654      	mov	r4, sl
 80083e2:	2205      	movs	r2, #5
 80083e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e8:	4850      	ldr	r0, [pc, #320]	; (800852c <_svfiprintf_r+0x1e8>)
 80083ea:	f7f7 ff09 	bl	8000200 <memchr>
 80083ee:	9a04      	ldr	r2, [sp, #16]
 80083f0:	b9d8      	cbnz	r0, 800842a <_svfiprintf_r+0xe6>
 80083f2:	06d0      	lsls	r0, r2, #27
 80083f4:	bf44      	itt	mi
 80083f6:	2320      	movmi	r3, #32
 80083f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083fc:	0711      	lsls	r1, r2, #28
 80083fe:	bf44      	itt	mi
 8008400:	232b      	movmi	r3, #43	; 0x2b
 8008402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008406:	f89a 3000 	ldrb.w	r3, [sl]
 800840a:	2b2a      	cmp	r3, #42	; 0x2a
 800840c:	d015      	beq.n	800843a <_svfiprintf_r+0xf6>
 800840e:	9a07      	ldr	r2, [sp, #28]
 8008410:	4654      	mov	r4, sl
 8008412:	2000      	movs	r0, #0
 8008414:	f04f 0c0a 	mov.w	ip, #10
 8008418:	4621      	mov	r1, r4
 800841a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800841e:	3b30      	subs	r3, #48	; 0x30
 8008420:	2b09      	cmp	r3, #9
 8008422:	d94d      	bls.n	80084c0 <_svfiprintf_r+0x17c>
 8008424:	b1b0      	cbz	r0, 8008454 <_svfiprintf_r+0x110>
 8008426:	9207      	str	r2, [sp, #28]
 8008428:	e014      	b.n	8008454 <_svfiprintf_r+0x110>
 800842a:	eba0 0308 	sub.w	r3, r0, r8
 800842e:	fa09 f303 	lsl.w	r3, r9, r3
 8008432:	4313      	orrs	r3, r2
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	46a2      	mov	sl, r4
 8008438:	e7d2      	b.n	80083e0 <_svfiprintf_r+0x9c>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	1d19      	adds	r1, r3, #4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	9103      	str	r1, [sp, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	bfbb      	ittet	lt
 8008446:	425b      	neglt	r3, r3
 8008448:	f042 0202 	orrlt.w	r2, r2, #2
 800844c:	9307      	strge	r3, [sp, #28]
 800844e:	9307      	strlt	r3, [sp, #28]
 8008450:	bfb8      	it	lt
 8008452:	9204      	strlt	r2, [sp, #16]
 8008454:	7823      	ldrb	r3, [r4, #0]
 8008456:	2b2e      	cmp	r3, #46	; 0x2e
 8008458:	d10c      	bne.n	8008474 <_svfiprintf_r+0x130>
 800845a:	7863      	ldrb	r3, [r4, #1]
 800845c:	2b2a      	cmp	r3, #42	; 0x2a
 800845e:	d134      	bne.n	80084ca <_svfiprintf_r+0x186>
 8008460:	9b03      	ldr	r3, [sp, #12]
 8008462:	1d1a      	adds	r2, r3, #4
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	9203      	str	r2, [sp, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfb8      	it	lt
 800846c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008470:	3402      	adds	r4, #2
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800853c <_svfiprintf_r+0x1f8>
 8008478:	7821      	ldrb	r1, [r4, #0]
 800847a:	2203      	movs	r2, #3
 800847c:	4650      	mov	r0, sl
 800847e:	f7f7 febf 	bl	8000200 <memchr>
 8008482:	b138      	cbz	r0, 8008494 <_svfiprintf_r+0x150>
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	eba0 000a 	sub.w	r0, r0, sl
 800848a:	2240      	movs	r2, #64	; 0x40
 800848c:	4082      	lsls	r2, r0
 800848e:	4313      	orrs	r3, r2
 8008490:	3401      	adds	r4, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	4825      	ldr	r0, [pc, #148]	; (8008530 <_svfiprintf_r+0x1ec>)
 800849a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800849e:	2206      	movs	r2, #6
 80084a0:	f7f7 feae 	bl	8000200 <memchr>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d038      	beq.n	800851a <_svfiprintf_r+0x1d6>
 80084a8:	4b22      	ldr	r3, [pc, #136]	; (8008534 <_svfiprintf_r+0x1f0>)
 80084aa:	bb1b      	cbnz	r3, 80084f4 <_svfiprintf_r+0x1b0>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	3307      	adds	r3, #7
 80084b0:	f023 0307 	bic.w	r3, r3, #7
 80084b4:	3308      	adds	r3, #8
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ba:	4433      	add	r3, r6
 80084bc:	9309      	str	r3, [sp, #36]	; 0x24
 80084be:	e768      	b.n	8008392 <_svfiprintf_r+0x4e>
 80084c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c4:	460c      	mov	r4, r1
 80084c6:	2001      	movs	r0, #1
 80084c8:	e7a6      	b.n	8008418 <_svfiprintf_r+0xd4>
 80084ca:	2300      	movs	r3, #0
 80084cc:	3401      	adds	r4, #1
 80084ce:	9305      	str	r3, [sp, #20]
 80084d0:	4619      	mov	r1, r3
 80084d2:	f04f 0c0a 	mov.w	ip, #10
 80084d6:	4620      	mov	r0, r4
 80084d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084dc:	3a30      	subs	r2, #48	; 0x30
 80084de:	2a09      	cmp	r2, #9
 80084e0:	d903      	bls.n	80084ea <_svfiprintf_r+0x1a6>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0c6      	beq.n	8008474 <_svfiprintf_r+0x130>
 80084e6:	9105      	str	r1, [sp, #20]
 80084e8:	e7c4      	b.n	8008474 <_svfiprintf_r+0x130>
 80084ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ee:	4604      	mov	r4, r0
 80084f0:	2301      	movs	r3, #1
 80084f2:	e7f0      	b.n	80084d6 <_svfiprintf_r+0x192>
 80084f4:	ab03      	add	r3, sp, #12
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	462a      	mov	r2, r5
 80084fa:	4b0f      	ldr	r3, [pc, #60]	; (8008538 <_svfiprintf_r+0x1f4>)
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	4638      	mov	r0, r7
 8008500:	f3af 8000 	nop.w
 8008504:	1c42      	adds	r2, r0, #1
 8008506:	4606      	mov	r6, r0
 8008508:	d1d6      	bne.n	80084b8 <_svfiprintf_r+0x174>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	065b      	lsls	r3, r3, #25
 800850e:	f53f af2d 	bmi.w	800836c <_svfiprintf_r+0x28>
 8008512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008514:	b01d      	add	sp, #116	; 0x74
 8008516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	ab03      	add	r3, sp, #12
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	462a      	mov	r2, r5
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <_svfiprintf_r+0x1f4>)
 8008522:	a904      	add	r1, sp, #16
 8008524:	4638      	mov	r0, r7
 8008526:	f000 fb8f 	bl	8008c48 <_printf_i>
 800852a:	e7eb      	b.n	8008504 <_svfiprintf_r+0x1c0>
 800852c:	08009df5 	.word	0x08009df5
 8008530:	08009dff 	.word	0x08009dff
 8008534:	00000000 	.word	0x00000000
 8008538:	08008291 	.word	0x08008291
 800853c:	08009dfb 	.word	0x08009dfb

08008540 <_sungetc_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	1c4b      	adds	r3, r1, #1
 8008544:	4614      	mov	r4, r2
 8008546:	d103      	bne.n	8008550 <_sungetc_r+0x10>
 8008548:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800854c:	4628      	mov	r0, r5
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	8993      	ldrh	r3, [r2, #12]
 8008552:	f023 0320 	bic.w	r3, r3, #32
 8008556:	8193      	strh	r3, [r2, #12]
 8008558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800855a:	6852      	ldr	r2, [r2, #4]
 800855c:	b2cd      	uxtb	r5, r1
 800855e:	b18b      	cbz	r3, 8008584 <_sungetc_r+0x44>
 8008560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008562:	4293      	cmp	r3, r2
 8008564:	dd08      	ble.n	8008578 <_sungetc_r+0x38>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	1e5a      	subs	r2, r3, #1
 800856a:	6022      	str	r2, [r4, #0]
 800856c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	6063      	str	r3, [r4, #4]
 8008576:	e7e9      	b.n	800854c <_sungetc_r+0xc>
 8008578:	4621      	mov	r1, r4
 800857a:	f000 febc 	bl	80092f6 <__submore>
 800857e:	2800      	cmp	r0, #0
 8008580:	d0f1      	beq.n	8008566 <_sungetc_r+0x26>
 8008582:	e7e1      	b.n	8008548 <_sungetc_r+0x8>
 8008584:	6921      	ldr	r1, [r4, #16]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	b151      	cbz	r1, 80085a0 <_sungetc_r+0x60>
 800858a:	4299      	cmp	r1, r3
 800858c:	d208      	bcs.n	80085a0 <_sungetc_r+0x60>
 800858e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008592:	42a9      	cmp	r1, r5
 8008594:	d104      	bne.n	80085a0 <_sungetc_r+0x60>
 8008596:	3b01      	subs	r3, #1
 8008598:	3201      	adds	r2, #1
 800859a:	6023      	str	r3, [r4, #0]
 800859c:	6062      	str	r2, [r4, #4]
 800859e:	e7d5      	b.n	800854c <_sungetc_r+0xc>
 80085a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80085a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085a8:	6363      	str	r3, [r4, #52]	; 0x34
 80085aa:	2303      	movs	r3, #3
 80085ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80085ae:	4623      	mov	r3, r4
 80085b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	2301      	movs	r3, #1
 80085b8:	e7dc      	b.n	8008574 <_sungetc_r+0x34>

080085ba <__ssrefill_r>:
 80085ba:	b510      	push	{r4, lr}
 80085bc:	460c      	mov	r4, r1
 80085be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80085c0:	b169      	cbz	r1, 80085de <__ssrefill_r+0x24>
 80085c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c6:	4299      	cmp	r1, r3
 80085c8:	d001      	beq.n	80085ce <__ssrefill_r+0x14>
 80085ca:	f7fe fd45 	bl	8007058 <_free_r>
 80085ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085d0:	6063      	str	r3, [r4, #4]
 80085d2:	2000      	movs	r0, #0
 80085d4:	6360      	str	r0, [r4, #52]	; 0x34
 80085d6:	b113      	cbz	r3, 80085de <__ssrefill_r+0x24>
 80085d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	2300      	movs	r3, #0
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f043 0320 	orr.w	r3, r3, #32
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f2:	e7f3      	b.n	80085dc <__ssrefill_r+0x22>

080085f4 <__ssvfiscanf_r>:
 80085f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	460c      	mov	r4, r1
 80085fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80085fe:	2100      	movs	r1, #0
 8008600:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008604:	49a6      	ldr	r1, [pc, #664]	; (80088a0 <__ssvfiscanf_r+0x2ac>)
 8008606:	91a0      	str	r1, [sp, #640]	; 0x280
 8008608:	f10d 0804 	add.w	r8, sp, #4
 800860c:	49a5      	ldr	r1, [pc, #660]	; (80088a4 <__ssvfiscanf_r+0x2b0>)
 800860e:	4fa6      	ldr	r7, [pc, #664]	; (80088a8 <__ssvfiscanf_r+0x2b4>)
 8008610:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80088ac <__ssvfiscanf_r+0x2b8>
 8008614:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008618:	4606      	mov	r6, r0
 800861a:	91a1      	str	r1, [sp, #644]	; 0x284
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	7813      	ldrb	r3, [r2, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 815a 	beq.w	80088da <__ssvfiscanf_r+0x2e6>
 8008626:	5cf9      	ldrb	r1, [r7, r3]
 8008628:	f011 0108 	ands.w	r1, r1, #8
 800862c:	f102 0501 	add.w	r5, r2, #1
 8008630:	d019      	beq.n	8008666 <__ssvfiscanf_r+0x72>
 8008632:	6863      	ldr	r3, [r4, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	dd0f      	ble.n	8008658 <__ssvfiscanf_r+0x64>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	5cba      	ldrb	r2, [r7, r2]
 800863e:	0712      	lsls	r2, r2, #28
 8008640:	d401      	bmi.n	8008646 <__ssvfiscanf_r+0x52>
 8008642:	462a      	mov	r2, r5
 8008644:	e7eb      	b.n	800861e <__ssvfiscanf_r+0x2a>
 8008646:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008648:	3201      	adds	r2, #1
 800864a:	9245      	str	r2, [sp, #276]	; 0x114
 800864c:	6862      	ldr	r2, [r4, #4]
 800864e:	3301      	adds	r3, #1
 8008650:	3a01      	subs	r2, #1
 8008652:	6062      	str	r2, [r4, #4]
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	e7ec      	b.n	8008632 <__ssvfiscanf_r+0x3e>
 8008658:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800865a:	4621      	mov	r1, r4
 800865c:	4630      	mov	r0, r6
 800865e:	4798      	blx	r3
 8008660:	2800      	cmp	r0, #0
 8008662:	d0e9      	beq.n	8008638 <__ssvfiscanf_r+0x44>
 8008664:	e7ed      	b.n	8008642 <__ssvfiscanf_r+0x4e>
 8008666:	2b25      	cmp	r3, #37	; 0x25
 8008668:	d012      	beq.n	8008690 <__ssvfiscanf_r+0x9c>
 800866a:	469a      	mov	sl, r3
 800866c:	6863      	ldr	r3, [r4, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f340 8091 	ble.w	8008796 <__ssvfiscanf_r+0x1a2>
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	7813      	ldrb	r3, [r2, #0]
 8008678:	4553      	cmp	r3, sl
 800867a:	f040 812e 	bne.w	80088da <__ssvfiscanf_r+0x2e6>
 800867e:	6863      	ldr	r3, [r4, #4]
 8008680:	3b01      	subs	r3, #1
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008686:	3201      	adds	r2, #1
 8008688:	3301      	adds	r3, #1
 800868a:	6022      	str	r2, [r4, #0]
 800868c:	9345      	str	r3, [sp, #276]	; 0x114
 800868e:	e7d8      	b.n	8008642 <__ssvfiscanf_r+0x4e>
 8008690:	9141      	str	r1, [sp, #260]	; 0x104
 8008692:	9143      	str	r1, [sp, #268]	; 0x10c
 8008694:	7853      	ldrb	r3, [r2, #1]
 8008696:	2b2a      	cmp	r3, #42	; 0x2a
 8008698:	bf02      	ittt	eq
 800869a:	2310      	moveq	r3, #16
 800869c:	1c95      	addeq	r5, r2, #2
 800869e:	9341      	streq	r3, [sp, #260]	; 0x104
 80086a0:	220a      	movs	r2, #10
 80086a2:	46aa      	mov	sl, r5
 80086a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80086a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80086ac:	2b09      	cmp	r3, #9
 80086ae:	d91c      	bls.n	80086ea <__ssvfiscanf_r+0xf6>
 80086b0:	487e      	ldr	r0, [pc, #504]	; (80088ac <__ssvfiscanf_r+0x2b8>)
 80086b2:	2203      	movs	r2, #3
 80086b4:	f7f7 fda4 	bl	8000200 <memchr>
 80086b8:	b138      	cbz	r0, 80086ca <__ssvfiscanf_r+0xd6>
 80086ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80086bc:	eba0 0009 	sub.w	r0, r0, r9
 80086c0:	2301      	movs	r3, #1
 80086c2:	4083      	lsls	r3, r0
 80086c4:	4313      	orrs	r3, r2
 80086c6:	9341      	str	r3, [sp, #260]	; 0x104
 80086c8:	4655      	mov	r5, sl
 80086ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086ce:	2b78      	cmp	r3, #120	; 0x78
 80086d0:	d806      	bhi.n	80086e0 <__ssvfiscanf_r+0xec>
 80086d2:	2b57      	cmp	r3, #87	; 0x57
 80086d4:	d810      	bhi.n	80086f8 <__ssvfiscanf_r+0x104>
 80086d6:	2b25      	cmp	r3, #37	; 0x25
 80086d8:	d0c7      	beq.n	800866a <__ssvfiscanf_r+0x76>
 80086da:	d857      	bhi.n	800878c <__ssvfiscanf_r+0x198>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d065      	beq.n	80087ac <__ssvfiscanf_r+0x1b8>
 80086e0:	2303      	movs	r3, #3
 80086e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80086e4:	230a      	movs	r3, #10
 80086e6:	9342      	str	r3, [sp, #264]	; 0x108
 80086e8:	e076      	b.n	80087d8 <__ssvfiscanf_r+0x1e4>
 80086ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80086ec:	fb02 1103 	mla	r1, r2, r3, r1
 80086f0:	3930      	subs	r1, #48	; 0x30
 80086f2:	9143      	str	r1, [sp, #268]	; 0x10c
 80086f4:	4655      	mov	r5, sl
 80086f6:	e7d4      	b.n	80086a2 <__ssvfiscanf_r+0xae>
 80086f8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80086fc:	2a20      	cmp	r2, #32
 80086fe:	d8ef      	bhi.n	80086e0 <__ssvfiscanf_r+0xec>
 8008700:	a101      	add	r1, pc, #4	; (adr r1, 8008708 <__ssvfiscanf_r+0x114>)
 8008702:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008706:	bf00      	nop
 8008708:	080087bb 	.word	0x080087bb
 800870c:	080086e1 	.word	0x080086e1
 8008710:	080086e1 	.word	0x080086e1
 8008714:	08008819 	.word	0x08008819
 8008718:	080086e1 	.word	0x080086e1
 800871c:	080086e1 	.word	0x080086e1
 8008720:	080086e1 	.word	0x080086e1
 8008724:	080086e1 	.word	0x080086e1
 8008728:	080086e1 	.word	0x080086e1
 800872c:	080086e1 	.word	0x080086e1
 8008730:	080086e1 	.word	0x080086e1
 8008734:	0800882f 	.word	0x0800882f
 8008738:	08008815 	.word	0x08008815
 800873c:	08008793 	.word	0x08008793
 8008740:	08008793 	.word	0x08008793
 8008744:	08008793 	.word	0x08008793
 8008748:	080086e1 	.word	0x080086e1
 800874c:	080087d1 	.word	0x080087d1
 8008750:	080086e1 	.word	0x080086e1
 8008754:	080086e1 	.word	0x080086e1
 8008758:	080086e1 	.word	0x080086e1
 800875c:	080086e1 	.word	0x080086e1
 8008760:	0800883f 	.word	0x0800883f
 8008764:	0800880d 	.word	0x0800880d
 8008768:	080087b3 	.word	0x080087b3
 800876c:	080086e1 	.word	0x080086e1
 8008770:	080086e1 	.word	0x080086e1
 8008774:	0800883b 	.word	0x0800883b
 8008778:	080086e1 	.word	0x080086e1
 800877c:	08008815 	.word	0x08008815
 8008780:	080086e1 	.word	0x080086e1
 8008784:	080086e1 	.word	0x080086e1
 8008788:	080087bb 	.word	0x080087bb
 800878c:	3b45      	subs	r3, #69	; 0x45
 800878e:	2b02      	cmp	r3, #2
 8008790:	d8a6      	bhi.n	80086e0 <__ssvfiscanf_r+0xec>
 8008792:	2305      	movs	r3, #5
 8008794:	e01f      	b.n	80087d6 <__ssvfiscanf_r+0x1e2>
 8008796:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008798:	4621      	mov	r1, r4
 800879a:	4630      	mov	r0, r6
 800879c:	4798      	blx	r3
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f af68 	beq.w	8008674 <__ssvfiscanf_r+0x80>
 80087a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f040 808d 	bne.w	80088c6 <__ssvfiscanf_r+0x2d2>
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b0:	e08f      	b.n	80088d2 <__ssvfiscanf_r+0x2de>
 80087b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80087b4:	f042 0220 	orr.w	r2, r2, #32
 80087b8:	9241      	str	r2, [sp, #260]	; 0x104
 80087ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80087bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c0:	9241      	str	r2, [sp, #260]	; 0x104
 80087c2:	2210      	movs	r2, #16
 80087c4:	2b6f      	cmp	r3, #111	; 0x6f
 80087c6:	9242      	str	r2, [sp, #264]	; 0x108
 80087c8:	bf34      	ite	cc
 80087ca:	2303      	movcc	r3, #3
 80087cc:	2304      	movcs	r3, #4
 80087ce:	e002      	b.n	80087d6 <__ssvfiscanf_r+0x1e2>
 80087d0:	2300      	movs	r3, #0
 80087d2:	9342      	str	r3, [sp, #264]	; 0x108
 80087d4:	2303      	movs	r3, #3
 80087d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dd3d      	ble.n	800885a <__ssvfiscanf_r+0x266>
 80087de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087e0:	0659      	lsls	r1, r3, #25
 80087e2:	d404      	bmi.n	80087ee <__ssvfiscanf_r+0x1fa>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	5cba      	ldrb	r2, [r7, r2]
 80087ea:	0712      	lsls	r2, r2, #28
 80087ec:	d43c      	bmi.n	8008868 <__ssvfiscanf_r+0x274>
 80087ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	dc4b      	bgt.n	800888c <__ssvfiscanf_r+0x298>
 80087f4:	466b      	mov	r3, sp
 80087f6:	4622      	mov	r2, r4
 80087f8:	a941      	add	r1, sp, #260	; 0x104
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 fb46 	bl	8008e8c <_scanf_chars>
 8008800:	2801      	cmp	r0, #1
 8008802:	d06a      	beq.n	80088da <__ssvfiscanf_r+0x2e6>
 8008804:	2802      	cmp	r0, #2
 8008806:	f47f af1c 	bne.w	8008642 <__ssvfiscanf_r+0x4e>
 800880a:	e7cb      	b.n	80087a4 <__ssvfiscanf_r+0x1b0>
 800880c:	2308      	movs	r3, #8
 800880e:	9342      	str	r3, [sp, #264]	; 0x108
 8008810:	2304      	movs	r3, #4
 8008812:	e7e0      	b.n	80087d6 <__ssvfiscanf_r+0x1e2>
 8008814:	220a      	movs	r2, #10
 8008816:	e7d5      	b.n	80087c4 <__ssvfiscanf_r+0x1d0>
 8008818:	4629      	mov	r1, r5
 800881a:	4640      	mov	r0, r8
 800881c:	f000 fd32 	bl	8009284 <__sccl>
 8008820:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008826:	9341      	str	r3, [sp, #260]	; 0x104
 8008828:	4605      	mov	r5, r0
 800882a:	2301      	movs	r3, #1
 800882c:	e7d3      	b.n	80087d6 <__ssvfiscanf_r+0x1e2>
 800882e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008834:	9341      	str	r3, [sp, #260]	; 0x104
 8008836:	2300      	movs	r3, #0
 8008838:	e7cd      	b.n	80087d6 <__ssvfiscanf_r+0x1e2>
 800883a:	2302      	movs	r3, #2
 800883c:	e7cb      	b.n	80087d6 <__ssvfiscanf_r+0x1e2>
 800883e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008840:	06c3      	lsls	r3, r0, #27
 8008842:	f53f aefe 	bmi.w	8008642 <__ssvfiscanf_r+0x4e>
 8008846:	9b00      	ldr	r3, [sp, #0]
 8008848:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800884a:	1d19      	adds	r1, r3, #4
 800884c:	9100      	str	r1, [sp, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	07c0      	lsls	r0, r0, #31
 8008852:	bf4c      	ite	mi
 8008854:	801a      	strhmi	r2, [r3, #0]
 8008856:	601a      	strpl	r2, [r3, #0]
 8008858:	e6f3      	b.n	8008642 <__ssvfiscanf_r+0x4e>
 800885a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800885c:	4621      	mov	r1, r4
 800885e:	4630      	mov	r0, r6
 8008860:	4798      	blx	r3
 8008862:	2800      	cmp	r0, #0
 8008864:	d0bb      	beq.n	80087de <__ssvfiscanf_r+0x1ea>
 8008866:	e79d      	b.n	80087a4 <__ssvfiscanf_r+0x1b0>
 8008868:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800886a:	3201      	adds	r2, #1
 800886c:	9245      	str	r2, [sp, #276]	; 0x114
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	3a01      	subs	r2, #1
 8008872:	2a00      	cmp	r2, #0
 8008874:	6062      	str	r2, [r4, #4]
 8008876:	dd02      	ble.n	800887e <__ssvfiscanf_r+0x28a>
 8008878:	3301      	adds	r3, #1
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	e7b2      	b.n	80087e4 <__ssvfiscanf_r+0x1f0>
 800887e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008880:	4621      	mov	r1, r4
 8008882:	4630      	mov	r0, r6
 8008884:	4798      	blx	r3
 8008886:	2800      	cmp	r0, #0
 8008888:	d0ac      	beq.n	80087e4 <__ssvfiscanf_r+0x1f0>
 800888a:	e78b      	b.n	80087a4 <__ssvfiscanf_r+0x1b0>
 800888c:	2b04      	cmp	r3, #4
 800888e:	dc0f      	bgt.n	80088b0 <__ssvfiscanf_r+0x2bc>
 8008890:	466b      	mov	r3, sp
 8008892:	4622      	mov	r2, r4
 8008894:	a941      	add	r1, sp, #260	; 0x104
 8008896:	4630      	mov	r0, r6
 8008898:	f000 fb52 	bl	8008f40 <_scanf_i>
 800889c:	e7b0      	b.n	8008800 <__ssvfiscanf_r+0x20c>
 800889e:	bf00      	nop
 80088a0:	08008541 	.word	0x08008541
 80088a4:	080085bb 	.word	0x080085bb
 80088a8:	08009cf5 	.word	0x08009cf5
 80088ac:	08009dfb 	.word	0x08009dfb
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <__ssvfiscanf_r+0x2ec>)
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f43f aec5 	beq.w	8008642 <__ssvfiscanf_r+0x4e>
 80088b8:	466b      	mov	r3, sp
 80088ba:	4622      	mov	r2, r4
 80088bc:	a941      	add	r1, sp, #260	; 0x104
 80088be:	4630      	mov	r0, r6
 80088c0:	f3af 8000 	nop.w
 80088c4:	e79c      	b.n	8008800 <__ssvfiscanf_r+0x20c>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088cc:	bf18      	it	ne
 80088ce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80088d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80088d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80088dc:	e7f9      	b.n	80088d2 <__ssvfiscanf_r+0x2de>
 80088de:	bf00      	nop
 80088e0:	00000000 	.word	0x00000000

080088e4 <__sfputc_r>:
 80088e4:	6893      	ldr	r3, [r2, #8]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	b410      	push	{r4}
 80088ec:	6093      	str	r3, [r2, #8]
 80088ee:	da08      	bge.n	8008902 <__sfputc_r+0x1e>
 80088f0:	6994      	ldr	r4, [r2, #24]
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	db01      	blt.n	80088fa <__sfputc_r+0x16>
 80088f6:	290a      	cmp	r1, #10
 80088f8:	d103      	bne.n	8008902 <__sfputc_r+0x1e>
 80088fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088fe:	f000 bd34 	b.w	800936a <__swbuf_r>
 8008902:	6813      	ldr	r3, [r2, #0]
 8008904:	1c58      	adds	r0, r3, #1
 8008906:	6010      	str	r0, [r2, #0]
 8008908:	7019      	strb	r1, [r3, #0]
 800890a:	4608      	mov	r0, r1
 800890c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008910:	4770      	bx	lr

08008912 <__sfputs_r>:
 8008912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008914:	4606      	mov	r6, r0
 8008916:	460f      	mov	r7, r1
 8008918:	4614      	mov	r4, r2
 800891a:	18d5      	adds	r5, r2, r3
 800891c:	42ac      	cmp	r4, r5
 800891e:	d101      	bne.n	8008924 <__sfputs_r+0x12>
 8008920:	2000      	movs	r0, #0
 8008922:	e007      	b.n	8008934 <__sfputs_r+0x22>
 8008924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008928:	463a      	mov	r2, r7
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ffda 	bl	80088e4 <__sfputc_r>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d1f3      	bne.n	800891c <__sfputs_r+0xa>
 8008934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008938 <_vfiprintf_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	460d      	mov	r5, r1
 800893e:	b09d      	sub	sp, #116	; 0x74
 8008940:	4614      	mov	r4, r2
 8008942:	4698      	mov	r8, r3
 8008944:	4606      	mov	r6, r0
 8008946:	b118      	cbz	r0, 8008950 <_vfiprintf_r+0x18>
 8008948:	6a03      	ldr	r3, [r0, #32]
 800894a:	b90b      	cbnz	r3, 8008950 <_vfiprintf_r+0x18>
 800894c:	f7fe f9fc 	bl	8006d48 <__sinit>
 8008950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008952:	07d9      	lsls	r1, r3, #31
 8008954:	d405      	bmi.n	8008962 <_vfiprintf_r+0x2a>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	059a      	lsls	r2, r3, #22
 800895a:	d402      	bmi.n	8008962 <_vfiprintf_r+0x2a>
 800895c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800895e:	f7fe fb58 	bl	8007012 <__retarget_lock_acquire_recursive>
 8008962:	89ab      	ldrh	r3, [r5, #12]
 8008964:	071b      	lsls	r3, r3, #28
 8008966:	d501      	bpl.n	800896c <_vfiprintf_r+0x34>
 8008968:	692b      	ldr	r3, [r5, #16]
 800896a:	b99b      	cbnz	r3, 8008994 <_vfiprintf_r+0x5c>
 800896c:	4629      	mov	r1, r5
 800896e:	4630      	mov	r0, r6
 8008970:	f000 fd38 	bl	80093e4 <__swsetup_r>
 8008974:	b170      	cbz	r0, 8008994 <_vfiprintf_r+0x5c>
 8008976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008978:	07dc      	lsls	r4, r3, #31
 800897a:	d504      	bpl.n	8008986 <_vfiprintf_r+0x4e>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008980:	b01d      	add	sp, #116	; 0x74
 8008982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	0598      	lsls	r0, r3, #22
 800898a:	d4f7      	bmi.n	800897c <_vfiprintf_r+0x44>
 800898c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800898e:	f7fe fb41 	bl	8007014 <__retarget_lock_release_recursive>
 8008992:	e7f3      	b.n	800897c <_vfiprintf_r+0x44>
 8008994:	2300      	movs	r3, #0
 8008996:	9309      	str	r3, [sp, #36]	; 0x24
 8008998:	2320      	movs	r3, #32
 800899a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800899e:	f8cd 800c 	str.w	r8, [sp, #12]
 80089a2:	2330      	movs	r3, #48	; 0x30
 80089a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008b58 <_vfiprintf_r+0x220>
 80089a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ac:	f04f 0901 	mov.w	r9, #1
 80089b0:	4623      	mov	r3, r4
 80089b2:	469a      	mov	sl, r3
 80089b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b8:	b10a      	cbz	r2, 80089be <_vfiprintf_r+0x86>
 80089ba:	2a25      	cmp	r2, #37	; 0x25
 80089bc:	d1f9      	bne.n	80089b2 <_vfiprintf_r+0x7a>
 80089be:	ebba 0b04 	subs.w	fp, sl, r4
 80089c2:	d00b      	beq.n	80089dc <_vfiprintf_r+0xa4>
 80089c4:	465b      	mov	r3, fp
 80089c6:	4622      	mov	r2, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff ffa1 	bl	8008912 <__sfputs_r>
 80089d0:	3001      	adds	r0, #1
 80089d2:	f000 80a9 	beq.w	8008b28 <_vfiprintf_r+0x1f0>
 80089d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d8:	445a      	add	r2, fp
 80089da:	9209      	str	r2, [sp, #36]	; 0x24
 80089dc:	f89a 3000 	ldrb.w	r3, [sl]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80a1 	beq.w	8008b28 <_vfiprintf_r+0x1f0>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089f0:	f10a 0a01 	add.w	sl, sl, #1
 80089f4:	9304      	str	r3, [sp, #16]
 80089f6:	9307      	str	r3, [sp, #28]
 80089f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089fc:	931a      	str	r3, [sp, #104]	; 0x68
 80089fe:	4654      	mov	r4, sl
 8008a00:	2205      	movs	r2, #5
 8008a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a06:	4854      	ldr	r0, [pc, #336]	; (8008b58 <_vfiprintf_r+0x220>)
 8008a08:	f7f7 fbfa 	bl	8000200 <memchr>
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	b9d8      	cbnz	r0, 8008a48 <_vfiprintf_r+0x110>
 8008a10:	06d1      	lsls	r1, r2, #27
 8008a12:	bf44      	itt	mi
 8008a14:	2320      	movmi	r3, #32
 8008a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1a:	0713      	lsls	r3, r2, #28
 8008a1c:	bf44      	itt	mi
 8008a1e:	232b      	movmi	r3, #43	; 0x2b
 8008a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a24:	f89a 3000 	ldrb.w	r3, [sl]
 8008a28:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2a:	d015      	beq.n	8008a58 <_vfiprintf_r+0x120>
 8008a2c:	9a07      	ldr	r2, [sp, #28]
 8008a2e:	4654      	mov	r4, sl
 8008a30:	2000      	movs	r0, #0
 8008a32:	f04f 0c0a 	mov.w	ip, #10
 8008a36:	4621      	mov	r1, r4
 8008a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a3c:	3b30      	subs	r3, #48	; 0x30
 8008a3e:	2b09      	cmp	r3, #9
 8008a40:	d94d      	bls.n	8008ade <_vfiprintf_r+0x1a6>
 8008a42:	b1b0      	cbz	r0, 8008a72 <_vfiprintf_r+0x13a>
 8008a44:	9207      	str	r2, [sp, #28]
 8008a46:	e014      	b.n	8008a72 <_vfiprintf_r+0x13a>
 8008a48:	eba0 0308 	sub.w	r3, r0, r8
 8008a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a50:	4313      	orrs	r3, r2
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	46a2      	mov	sl, r4
 8008a56:	e7d2      	b.n	80089fe <_vfiprintf_r+0xc6>
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	1d19      	adds	r1, r3, #4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	9103      	str	r1, [sp, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bfbb      	ittet	lt
 8008a64:	425b      	neglt	r3, r3
 8008a66:	f042 0202 	orrlt.w	r2, r2, #2
 8008a6a:	9307      	strge	r3, [sp, #28]
 8008a6c:	9307      	strlt	r3, [sp, #28]
 8008a6e:	bfb8      	it	lt
 8008a70:	9204      	strlt	r2, [sp, #16]
 8008a72:	7823      	ldrb	r3, [r4, #0]
 8008a74:	2b2e      	cmp	r3, #46	; 0x2e
 8008a76:	d10c      	bne.n	8008a92 <_vfiprintf_r+0x15a>
 8008a78:	7863      	ldrb	r3, [r4, #1]
 8008a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a7c:	d134      	bne.n	8008ae8 <_vfiprintf_r+0x1b0>
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	1d1a      	adds	r2, r3, #4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	9203      	str	r2, [sp, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfb8      	it	lt
 8008a8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a8e:	3402      	adds	r4, #2
 8008a90:	9305      	str	r3, [sp, #20]
 8008a92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008b68 <_vfiprintf_r+0x230>
 8008a96:	7821      	ldrb	r1, [r4, #0]
 8008a98:	2203      	movs	r2, #3
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	f7f7 fbb0 	bl	8000200 <memchr>
 8008aa0:	b138      	cbz	r0, 8008ab2 <_vfiprintf_r+0x17a>
 8008aa2:	9b04      	ldr	r3, [sp, #16]
 8008aa4:	eba0 000a 	sub.w	r0, r0, sl
 8008aa8:	2240      	movs	r2, #64	; 0x40
 8008aaa:	4082      	lsls	r2, r0
 8008aac:	4313      	orrs	r3, r2
 8008aae:	3401      	adds	r4, #1
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab6:	4829      	ldr	r0, [pc, #164]	; (8008b5c <_vfiprintf_r+0x224>)
 8008ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008abc:	2206      	movs	r2, #6
 8008abe:	f7f7 fb9f 	bl	8000200 <memchr>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d03f      	beq.n	8008b46 <_vfiprintf_r+0x20e>
 8008ac6:	4b26      	ldr	r3, [pc, #152]	; (8008b60 <_vfiprintf_r+0x228>)
 8008ac8:	bb1b      	cbnz	r3, 8008b12 <_vfiprintf_r+0x1da>
 8008aca:	9b03      	ldr	r3, [sp, #12]
 8008acc:	3307      	adds	r3, #7
 8008ace:	f023 0307 	bic.w	r3, r3, #7
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	9303      	str	r3, [sp, #12]
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	443b      	add	r3, r7
 8008ada:	9309      	str	r3, [sp, #36]	; 0x24
 8008adc:	e768      	b.n	80089b0 <_vfiprintf_r+0x78>
 8008ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	e7a6      	b.n	8008a36 <_vfiprintf_r+0xfe>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	3401      	adds	r4, #1
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	4619      	mov	r1, r3
 8008af0:	f04f 0c0a 	mov.w	ip, #10
 8008af4:	4620      	mov	r0, r4
 8008af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008afa:	3a30      	subs	r2, #48	; 0x30
 8008afc:	2a09      	cmp	r2, #9
 8008afe:	d903      	bls.n	8008b08 <_vfiprintf_r+0x1d0>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d0c6      	beq.n	8008a92 <_vfiprintf_r+0x15a>
 8008b04:	9105      	str	r1, [sp, #20]
 8008b06:	e7c4      	b.n	8008a92 <_vfiprintf_r+0x15a>
 8008b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e7f0      	b.n	8008af4 <_vfiprintf_r+0x1bc>
 8008b12:	ab03      	add	r3, sp, #12
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	462a      	mov	r2, r5
 8008b18:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <_vfiprintf_r+0x22c>)
 8008b1a:	a904      	add	r1, sp, #16
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f3af 8000 	nop.w
 8008b22:	4607      	mov	r7, r0
 8008b24:	1c78      	adds	r0, r7, #1
 8008b26:	d1d6      	bne.n	8008ad6 <_vfiprintf_r+0x19e>
 8008b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b2a:	07d9      	lsls	r1, r3, #31
 8008b2c:	d405      	bmi.n	8008b3a <_vfiprintf_r+0x202>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	059a      	lsls	r2, r3, #22
 8008b32:	d402      	bmi.n	8008b3a <_vfiprintf_r+0x202>
 8008b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b36:	f7fe fa6d 	bl	8007014 <__retarget_lock_release_recursive>
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	065b      	lsls	r3, r3, #25
 8008b3e:	f53f af1d 	bmi.w	800897c <_vfiprintf_r+0x44>
 8008b42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b44:	e71c      	b.n	8008980 <_vfiprintf_r+0x48>
 8008b46:	ab03      	add	r3, sp, #12
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <_vfiprintf_r+0x22c>)
 8008b4e:	a904      	add	r1, sp, #16
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f879 	bl	8008c48 <_printf_i>
 8008b56:	e7e4      	b.n	8008b22 <_vfiprintf_r+0x1ea>
 8008b58:	08009df5 	.word	0x08009df5
 8008b5c:	08009dff 	.word	0x08009dff
 8008b60:	00000000 	.word	0x00000000
 8008b64:	08008913 	.word	0x08008913
 8008b68:	08009dfb 	.word	0x08009dfb

08008b6c <_printf_common>:
 8008b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	4616      	mov	r6, r2
 8008b72:	4699      	mov	r9, r3
 8008b74:	688a      	ldr	r2, [r1, #8]
 8008b76:	690b      	ldr	r3, [r1, #16]
 8008b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	bfb8      	it	lt
 8008b80:	4613      	movlt	r3, r2
 8008b82:	6033      	str	r3, [r6, #0]
 8008b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b88:	4607      	mov	r7, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	b10a      	cbz	r2, 8008b92 <_printf_common+0x26>
 8008b8e:	3301      	adds	r3, #1
 8008b90:	6033      	str	r3, [r6, #0]
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	0699      	lsls	r1, r3, #26
 8008b96:	bf42      	ittt	mi
 8008b98:	6833      	ldrmi	r3, [r6, #0]
 8008b9a:	3302      	addmi	r3, #2
 8008b9c:	6033      	strmi	r3, [r6, #0]
 8008b9e:	6825      	ldr	r5, [r4, #0]
 8008ba0:	f015 0506 	ands.w	r5, r5, #6
 8008ba4:	d106      	bne.n	8008bb4 <_printf_common+0x48>
 8008ba6:	f104 0a19 	add.w	sl, r4, #25
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	6832      	ldr	r2, [r6, #0]
 8008bae:	1a9b      	subs	r3, r3, r2
 8008bb0:	42ab      	cmp	r3, r5
 8008bb2:	dc26      	bgt.n	8008c02 <_printf_common+0x96>
 8008bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bb8:	1e13      	subs	r3, r2, #0
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	bf18      	it	ne
 8008bbe:	2301      	movne	r3, #1
 8008bc0:	0692      	lsls	r2, r2, #26
 8008bc2:	d42b      	bmi.n	8008c1c <_printf_common+0xb0>
 8008bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c0      	blx	r8
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d01e      	beq.n	8008c10 <_printf_common+0xa4>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	6922      	ldr	r2, [r4, #16]
 8008bd6:	f003 0306 	and.w	r3, r3, #6
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	bf02      	ittt	eq
 8008bde:	68e5      	ldreq	r5, [r4, #12]
 8008be0:	6833      	ldreq	r3, [r6, #0]
 8008be2:	1aed      	subeq	r5, r5, r3
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	bf0c      	ite	eq
 8008be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bec:	2500      	movne	r5, #0
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	bfc4      	itt	gt
 8008bf2:	1a9b      	subgt	r3, r3, r2
 8008bf4:	18ed      	addgt	r5, r5, r3
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	341a      	adds	r4, #26
 8008bfa:	42b5      	cmp	r5, r6
 8008bfc:	d11a      	bne.n	8008c34 <_printf_common+0xc8>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e008      	b.n	8008c14 <_printf_common+0xa8>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4652      	mov	r2, sl
 8008c06:	4649      	mov	r1, r9
 8008c08:	4638      	mov	r0, r7
 8008c0a:	47c0      	blx	r8
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d103      	bne.n	8008c18 <_printf_common+0xac>
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c18:	3501      	adds	r5, #1
 8008c1a:	e7c6      	b.n	8008baa <_printf_common+0x3e>
 8008c1c:	18e1      	adds	r1, r4, r3
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	2030      	movs	r0, #48	; 0x30
 8008c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c26:	4422      	add	r2, r4
 8008c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c30:	3302      	adds	r3, #2
 8008c32:	e7c7      	b.n	8008bc4 <_printf_common+0x58>
 8008c34:	2301      	movs	r3, #1
 8008c36:	4622      	mov	r2, r4
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c0      	blx	r8
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d0e6      	beq.n	8008c10 <_printf_common+0xa4>
 8008c42:	3601      	adds	r6, #1
 8008c44:	e7d9      	b.n	8008bfa <_printf_common+0x8e>
	...

08008c48 <_printf_i>:
 8008c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	7e0f      	ldrb	r7, [r1, #24]
 8008c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c50:	2f78      	cmp	r7, #120	; 0x78
 8008c52:	4691      	mov	r9, r2
 8008c54:	4680      	mov	r8, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	469a      	mov	sl, r3
 8008c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c5e:	d807      	bhi.n	8008c70 <_printf_i+0x28>
 8008c60:	2f62      	cmp	r7, #98	; 0x62
 8008c62:	d80a      	bhi.n	8008c7a <_printf_i+0x32>
 8008c64:	2f00      	cmp	r7, #0
 8008c66:	f000 80d4 	beq.w	8008e12 <_printf_i+0x1ca>
 8008c6a:	2f58      	cmp	r7, #88	; 0x58
 8008c6c:	f000 80c0 	beq.w	8008df0 <_printf_i+0x1a8>
 8008c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c78:	e03a      	b.n	8008cf0 <_printf_i+0xa8>
 8008c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c7e:	2b15      	cmp	r3, #21
 8008c80:	d8f6      	bhi.n	8008c70 <_printf_i+0x28>
 8008c82:	a101      	add	r1, pc, #4	; (adr r1, 8008c88 <_printf_i+0x40>)
 8008c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008cf5 	.word	0x08008cf5
 8008c90:	08008c71 	.word	0x08008c71
 8008c94:	08008c71 	.word	0x08008c71
 8008c98:	08008c71 	.word	0x08008c71
 8008c9c:	08008c71 	.word	0x08008c71
 8008ca0:	08008cf5 	.word	0x08008cf5
 8008ca4:	08008c71 	.word	0x08008c71
 8008ca8:	08008c71 	.word	0x08008c71
 8008cac:	08008c71 	.word	0x08008c71
 8008cb0:	08008c71 	.word	0x08008c71
 8008cb4:	08008df9 	.word	0x08008df9
 8008cb8:	08008d21 	.word	0x08008d21
 8008cbc:	08008db3 	.word	0x08008db3
 8008cc0:	08008c71 	.word	0x08008c71
 8008cc4:	08008c71 	.word	0x08008c71
 8008cc8:	08008e1b 	.word	0x08008e1b
 8008ccc:	08008c71 	.word	0x08008c71
 8008cd0:	08008d21 	.word	0x08008d21
 8008cd4:	08008c71 	.word	0x08008c71
 8008cd8:	08008c71 	.word	0x08008c71
 8008cdc:	08008dbb 	.word	0x08008dbb
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	1d1a      	adds	r2, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	602a      	str	r2, [r5, #0]
 8008ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e09f      	b.n	8008e34 <_printf_i+0x1ec>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	682b      	ldr	r3, [r5, #0]
 8008cf8:	0607      	lsls	r7, r0, #24
 8008cfa:	f103 0104 	add.w	r1, r3, #4
 8008cfe:	6029      	str	r1, [r5, #0]
 8008d00:	d501      	bpl.n	8008d06 <_printf_i+0xbe>
 8008d02:	681e      	ldr	r6, [r3, #0]
 8008d04:	e003      	b.n	8008d0e <_printf_i+0xc6>
 8008d06:	0646      	lsls	r6, r0, #25
 8008d08:	d5fb      	bpl.n	8008d02 <_printf_i+0xba>
 8008d0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	da03      	bge.n	8008d1a <_printf_i+0xd2>
 8008d12:	232d      	movs	r3, #45	; 0x2d
 8008d14:	4276      	negs	r6, r6
 8008d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d1a:	485a      	ldr	r0, [pc, #360]	; (8008e84 <_printf_i+0x23c>)
 8008d1c:	230a      	movs	r3, #10
 8008d1e:	e012      	b.n	8008d46 <_printf_i+0xfe>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	6820      	ldr	r0, [r4, #0]
 8008d24:	1d19      	adds	r1, r3, #4
 8008d26:	6029      	str	r1, [r5, #0]
 8008d28:	0605      	lsls	r5, r0, #24
 8008d2a:	d501      	bpl.n	8008d30 <_printf_i+0xe8>
 8008d2c:	681e      	ldr	r6, [r3, #0]
 8008d2e:	e002      	b.n	8008d36 <_printf_i+0xee>
 8008d30:	0641      	lsls	r1, r0, #25
 8008d32:	d5fb      	bpl.n	8008d2c <_printf_i+0xe4>
 8008d34:	881e      	ldrh	r6, [r3, #0]
 8008d36:	4853      	ldr	r0, [pc, #332]	; (8008e84 <_printf_i+0x23c>)
 8008d38:	2f6f      	cmp	r7, #111	; 0x6f
 8008d3a:	bf0c      	ite	eq
 8008d3c:	2308      	moveq	r3, #8
 8008d3e:	230a      	movne	r3, #10
 8008d40:	2100      	movs	r1, #0
 8008d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d46:	6865      	ldr	r5, [r4, #4]
 8008d48:	60a5      	str	r5, [r4, #8]
 8008d4a:	2d00      	cmp	r5, #0
 8008d4c:	bfa2      	ittt	ge
 8008d4e:	6821      	ldrge	r1, [r4, #0]
 8008d50:	f021 0104 	bicge.w	r1, r1, #4
 8008d54:	6021      	strge	r1, [r4, #0]
 8008d56:	b90e      	cbnz	r6, 8008d5c <_printf_i+0x114>
 8008d58:	2d00      	cmp	r5, #0
 8008d5a:	d04b      	beq.n	8008df4 <_printf_i+0x1ac>
 8008d5c:	4615      	mov	r5, r2
 8008d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d62:	fb03 6711 	mls	r7, r3, r1, r6
 8008d66:	5dc7      	ldrb	r7, [r0, r7]
 8008d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d6c:	4637      	mov	r7, r6
 8008d6e:	42bb      	cmp	r3, r7
 8008d70:	460e      	mov	r6, r1
 8008d72:	d9f4      	bls.n	8008d5e <_printf_i+0x116>
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d10b      	bne.n	8008d90 <_printf_i+0x148>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	07de      	lsls	r6, r3, #31
 8008d7c:	d508      	bpl.n	8008d90 <_printf_i+0x148>
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	6861      	ldr	r1, [r4, #4]
 8008d82:	4299      	cmp	r1, r3
 8008d84:	bfde      	ittt	le
 8008d86:	2330      	movle	r3, #48	; 0x30
 8008d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d90:	1b52      	subs	r2, r2, r5
 8008d92:	6122      	str	r2, [r4, #16]
 8008d94:	f8cd a000 	str.w	sl, [sp]
 8008d98:	464b      	mov	r3, r9
 8008d9a:	aa03      	add	r2, sp, #12
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4640      	mov	r0, r8
 8008da0:	f7ff fee4 	bl	8008b6c <_printf_common>
 8008da4:	3001      	adds	r0, #1
 8008da6:	d14a      	bne.n	8008e3e <_printf_i+0x1f6>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dac:	b004      	add	sp, #16
 8008dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	f043 0320 	orr.w	r3, r3, #32
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	4833      	ldr	r0, [pc, #204]	; (8008e88 <_printf_i+0x240>)
 8008dbc:	2778      	movs	r7, #120	; 0x78
 8008dbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	6829      	ldr	r1, [r5, #0]
 8008dc6:	061f      	lsls	r7, r3, #24
 8008dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dcc:	d402      	bmi.n	8008dd4 <_printf_i+0x18c>
 8008dce:	065f      	lsls	r7, r3, #25
 8008dd0:	bf48      	it	mi
 8008dd2:	b2b6      	uxthmi	r6, r6
 8008dd4:	07df      	lsls	r7, r3, #31
 8008dd6:	bf48      	it	mi
 8008dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8008ddc:	6029      	str	r1, [r5, #0]
 8008dde:	bf48      	it	mi
 8008de0:	6023      	strmi	r3, [r4, #0]
 8008de2:	b91e      	cbnz	r6, 8008dec <_printf_i+0x1a4>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	f023 0320 	bic.w	r3, r3, #32
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	2310      	movs	r3, #16
 8008dee:	e7a7      	b.n	8008d40 <_printf_i+0xf8>
 8008df0:	4824      	ldr	r0, [pc, #144]	; (8008e84 <_printf_i+0x23c>)
 8008df2:	e7e4      	b.n	8008dbe <_printf_i+0x176>
 8008df4:	4615      	mov	r5, r2
 8008df6:	e7bd      	b.n	8008d74 <_printf_i+0x12c>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	6826      	ldr	r6, [r4, #0]
 8008dfc:	6961      	ldr	r1, [r4, #20]
 8008dfe:	1d18      	adds	r0, r3, #4
 8008e00:	6028      	str	r0, [r5, #0]
 8008e02:	0635      	lsls	r5, r6, #24
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	d501      	bpl.n	8008e0c <_printf_i+0x1c4>
 8008e08:	6019      	str	r1, [r3, #0]
 8008e0a:	e002      	b.n	8008e12 <_printf_i+0x1ca>
 8008e0c:	0670      	lsls	r0, r6, #25
 8008e0e:	d5fb      	bpl.n	8008e08 <_printf_i+0x1c0>
 8008e10:	8019      	strh	r1, [r3, #0]
 8008e12:	2300      	movs	r3, #0
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	4615      	mov	r5, r2
 8008e18:	e7bc      	b.n	8008d94 <_printf_i+0x14c>
 8008e1a:	682b      	ldr	r3, [r5, #0]
 8008e1c:	1d1a      	adds	r2, r3, #4
 8008e1e:	602a      	str	r2, [r5, #0]
 8008e20:	681d      	ldr	r5, [r3, #0]
 8008e22:	6862      	ldr	r2, [r4, #4]
 8008e24:	2100      	movs	r1, #0
 8008e26:	4628      	mov	r0, r5
 8008e28:	f7f7 f9ea 	bl	8000200 <memchr>
 8008e2c:	b108      	cbz	r0, 8008e32 <_printf_i+0x1ea>
 8008e2e:	1b40      	subs	r0, r0, r5
 8008e30:	6060      	str	r0, [r4, #4]
 8008e32:	6863      	ldr	r3, [r4, #4]
 8008e34:	6123      	str	r3, [r4, #16]
 8008e36:	2300      	movs	r3, #0
 8008e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e3c:	e7aa      	b.n	8008d94 <_printf_i+0x14c>
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	462a      	mov	r2, r5
 8008e42:	4649      	mov	r1, r9
 8008e44:	4640      	mov	r0, r8
 8008e46:	47d0      	blx	sl
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d0ad      	beq.n	8008da8 <_printf_i+0x160>
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	079b      	lsls	r3, r3, #30
 8008e50:	d413      	bmi.n	8008e7a <_printf_i+0x232>
 8008e52:	68e0      	ldr	r0, [r4, #12]
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	4298      	cmp	r0, r3
 8008e58:	bfb8      	it	lt
 8008e5a:	4618      	movlt	r0, r3
 8008e5c:	e7a6      	b.n	8008dac <_printf_i+0x164>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4632      	mov	r2, r6
 8008e62:	4649      	mov	r1, r9
 8008e64:	4640      	mov	r0, r8
 8008e66:	47d0      	blx	sl
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d09d      	beq.n	8008da8 <_printf_i+0x160>
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	68e3      	ldr	r3, [r4, #12]
 8008e70:	9903      	ldr	r1, [sp, #12]
 8008e72:	1a5b      	subs	r3, r3, r1
 8008e74:	42ab      	cmp	r3, r5
 8008e76:	dcf2      	bgt.n	8008e5e <_printf_i+0x216>
 8008e78:	e7eb      	b.n	8008e52 <_printf_i+0x20a>
 8008e7a:	2500      	movs	r5, #0
 8008e7c:	f104 0619 	add.w	r6, r4, #25
 8008e80:	e7f5      	b.n	8008e6e <_printf_i+0x226>
 8008e82:	bf00      	nop
 8008e84:	08009e06 	.word	0x08009e06
 8008e88:	08009e17 	.word	0x08009e17

08008e8c <_scanf_chars>:
 8008e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e90:	4615      	mov	r5, r2
 8008e92:	688a      	ldr	r2, [r1, #8]
 8008e94:	4680      	mov	r8, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b932      	cbnz	r2, 8008ea8 <_scanf_chars+0x1c>
 8008e9a:	698a      	ldr	r2, [r1, #24]
 8008e9c:	2a00      	cmp	r2, #0
 8008e9e:	bf0c      	ite	eq
 8008ea0:	2201      	moveq	r2, #1
 8008ea2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008ea6:	608a      	str	r2, [r1, #8]
 8008ea8:	6822      	ldr	r2, [r4, #0]
 8008eaa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008f3c <_scanf_chars+0xb0>
 8008eae:	06d1      	lsls	r1, r2, #27
 8008eb0:	bf5f      	itttt	pl
 8008eb2:	681a      	ldrpl	r2, [r3, #0]
 8008eb4:	1d11      	addpl	r1, r2, #4
 8008eb6:	6019      	strpl	r1, [r3, #0]
 8008eb8:	6816      	ldrpl	r6, [r2, #0]
 8008eba:	2700      	movs	r7, #0
 8008ebc:	69a0      	ldr	r0, [r4, #24]
 8008ebe:	b188      	cbz	r0, 8008ee4 <_scanf_chars+0x58>
 8008ec0:	2801      	cmp	r0, #1
 8008ec2:	d107      	bne.n	8008ed4 <_scanf_chars+0x48>
 8008ec4:	682a      	ldr	r2, [r5, #0]
 8008ec6:	7811      	ldrb	r1, [r2, #0]
 8008ec8:	6962      	ldr	r2, [r4, #20]
 8008eca:	5c52      	ldrb	r2, [r2, r1]
 8008ecc:	b952      	cbnz	r2, 8008ee4 <_scanf_chars+0x58>
 8008ece:	2f00      	cmp	r7, #0
 8008ed0:	d031      	beq.n	8008f36 <_scanf_chars+0xaa>
 8008ed2:	e022      	b.n	8008f1a <_scanf_chars+0x8e>
 8008ed4:	2802      	cmp	r0, #2
 8008ed6:	d120      	bne.n	8008f1a <_scanf_chars+0x8e>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008ee0:	071b      	lsls	r3, r3, #28
 8008ee2:	d41a      	bmi.n	8008f1a <_scanf_chars+0x8e>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	06da      	lsls	r2, r3, #27
 8008ee8:	bf5e      	ittt	pl
 8008eea:	682b      	ldrpl	r3, [r5, #0]
 8008eec:	781b      	ldrbpl	r3, [r3, #0]
 8008eee:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008ef2:	682a      	ldr	r2, [r5, #0]
 8008ef4:	686b      	ldr	r3, [r5, #4]
 8008ef6:	3201      	adds	r2, #1
 8008ef8:	602a      	str	r2, [r5, #0]
 8008efa:	68a2      	ldr	r2, [r4, #8]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	3a01      	subs	r2, #1
 8008f00:	606b      	str	r3, [r5, #4]
 8008f02:	3701      	adds	r7, #1
 8008f04:	60a2      	str	r2, [r4, #8]
 8008f06:	b142      	cbz	r2, 8008f1a <_scanf_chars+0x8e>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dcd7      	bgt.n	8008ebc <_scanf_chars+0x30>
 8008f0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f10:	4629      	mov	r1, r5
 8008f12:	4640      	mov	r0, r8
 8008f14:	4798      	blx	r3
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d0d0      	beq.n	8008ebc <_scanf_chars+0x30>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	f013 0310 	ands.w	r3, r3, #16
 8008f20:	d105      	bne.n	8008f2e <_scanf_chars+0xa2>
 8008f22:	68e2      	ldr	r2, [r4, #12]
 8008f24:	3201      	adds	r2, #1
 8008f26:	60e2      	str	r2, [r4, #12]
 8008f28:	69a2      	ldr	r2, [r4, #24]
 8008f2a:	b102      	cbz	r2, 8008f2e <_scanf_chars+0xa2>
 8008f2c:	7033      	strb	r3, [r6, #0]
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	443b      	add	r3, r7
 8008f32:	6123      	str	r3, [r4, #16]
 8008f34:	2000      	movs	r0, #0
 8008f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f3a:	bf00      	nop
 8008f3c:	08009cf5 	.word	0x08009cf5

08008f40 <_scanf_i>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	4698      	mov	r8, r3
 8008f46:	4b74      	ldr	r3, [pc, #464]	; (8009118 <_scanf_i+0x1d8>)
 8008f48:	460c      	mov	r4, r1
 8008f4a:	4682      	mov	sl, r0
 8008f4c:	4616      	mov	r6, r2
 8008f4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f52:	b087      	sub	sp, #28
 8008f54:	ab03      	add	r3, sp, #12
 8008f56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008f5a:	4b70      	ldr	r3, [pc, #448]	; (800911c <_scanf_i+0x1dc>)
 8008f5c:	69a1      	ldr	r1, [r4, #24]
 8008f5e:	4a70      	ldr	r2, [pc, #448]	; (8009120 <_scanf_i+0x1e0>)
 8008f60:	2903      	cmp	r1, #3
 8008f62:	bf18      	it	ne
 8008f64:	461a      	movne	r2, r3
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	9201      	str	r2, [sp, #4]
 8008f6a:	1e5a      	subs	r2, r3, #1
 8008f6c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f70:	bf88      	it	hi
 8008f72:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f76:	4627      	mov	r7, r4
 8008f78:	bf82      	ittt	hi
 8008f7a:	eb03 0905 	addhi.w	r9, r3, r5
 8008f7e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f82:	60a3      	strhi	r3, [r4, #8]
 8008f84:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008f88:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008f8c:	bf98      	it	ls
 8008f8e:	f04f 0900 	movls.w	r9, #0
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	463d      	mov	r5, r7
 8008f96:	f04f 0b00 	mov.w	fp, #0
 8008f9a:	6831      	ldr	r1, [r6, #0]
 8008f9c:	ab03      	add	r3, sp, #12
 8008f9e:	7809      	ldrb	r1, [r1, #0]
 8008fa0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	f7f7 f92b 	bl	8000200 <memchr>
 8008faa:	b328      	cbz	r0, 8008ff8 <_scanf_i+0xb8>
 8008fac:	f1bb 0f01 	cmp.w	fp, #1
 8008fb0:	d159      	bne.n	8009066 <_scanf_i+0x126>
 8008fb2:	6862      	ldr	r2, [r4, #4]
 8008fb4:	b92a      	cbnz	r2, 8008fc2 <_scanf_i+0x82>
 8008fb6:	6822      	ldr	r2, [r4, #0]
 8008fb8:	2308      	movs	r3, #8
 8008fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fbe:	6063      	str	r3, [r4, #4]
 8008fc0:	6022      	str	r2, [r4, #0]
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	68a2      	ldr	r2, [r4, #8]
 8008fcc:	1e51      	subs	r1, r2, #1
 8008fce:	60a1      	str	r1, [r4, #8]
 8008fd0:	b192      	cbz	r2, 8008ff8 <_scanf_i+0xb8>
 8008fd2:	6832      	ldr	r2, [r6, #0]
 8008fd4:	1c51      	adds	r1, r2, #1
 8008fd6:	6031      	str	r1, [r6, #0]
 8008fd8:	7812      	ldrb	r2, [r2, #0]
 8008fda:	f805 2b01 	strb.w	r2, [r5], #1
 8008fde:	6872      	ldr	r2, [r6, #4]
 8008fe0:	3a01      	subs	r2, #1
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	6072      	str	r2, [r6, #4]
 8008fe6:	dc07      	bgt.n	8008ff8 <_scanf_i+0xb8>
 8008fe8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008fec:	4631      	mov	r1, r6
 8008fee:	4650      	mov	r0, sl
 8008ff0:	4790      	blx	r2
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f040 8085 	bne.w	8009102 <_scanf_i+0x1c2>
 8008ff8:	f10b 0b01 	add.w	fp, fp, #1
 8008ffc:	f1bb 0f03 	cmp.w	fp, #3
 8009000:	d1cb      	bne.n	8008f9a <_scanf_i+0x5a>
 8009002:	6863      	ldr	r3, [r4, #4]
 8009004:	b90b      	cbnz	r3, 800900a <_scanf_i+0xca>
 8009006:	230a      	movs	r3, #10
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	6863      	ldr	r3, [r4, #4]
 800900c:	4945      	ldr	r1, [pc, #276]	; (8009124 <_scanf_i+0x1e4>)
 800900e:	6960      	ldr	r0, [r4, #20]
 8009010:	1ac9      	subs	r1, r1, r3
 8009012:	f000 f937 	bl	8009284 <__sccl>
 8009016:	f04f 0b00 	mov.w	fp, #0
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d03d      	beq.n	800909e <_scanf_i+0x15e>
 8009022:	6831      	ldr	r1, [r6, #0]
 8009024:	6960      	ldr	r0, [r4, #20]
 8009026:	f891 c000 	ldrb.w	ip, [r1]
 800902a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800902e:	2800      	cmp	r0, #0
 8009030:	d035      	beq.n	800909e <_scanf_i+0x15e>
 8009032:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009036:	d124      	bne.n	8009082 <_scanf_i+0x142>
 8009038:	0510      	lsls	r0, r2, #20
 800903a:	d522      	bpl.n	8009082 <_scanf_i+0x142>
 800903c:	f10b 0b01 	add.w	fp, fp, #1
 8009040:	f1b9 0f00 	cmp.w	r9, #0
 8009044:	d003      	beq.n	800904e <_scanf_i+0x10e>
 8009046:	3301      	adds	r3, #1
 8009048:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800904c:	60a3      	str	r3, [r4, #8]
 800904e:	6873      	ldr	r3, [r6, #4]
 8009050:	3b01      	subs	r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	6073      	str	r3, [r6, #4]
 8009056:	dd1b      	ble.n	8009090 <_scanf_i+0x150>
 8009058:	6833      	ldr	r3, [r6, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	6033      	str	r3, [r6, #0]
 800905e:	68a3      	ldr	r3, [r4, #8]
 8009060:	3b01      	subs	r3, #1
 8009062:	60a3      	str	r3, [r4, #8]
 8009064:	e7d9      	b.n	800901a <_scanf_i+0xda>
 8009066:	f1bb 0f02 	cmp.w	fp, #2
 800906a:	d1ae      	bne.n	8008fca <_scanf_i+0x8a>
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009072:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009076:	d1bf      	bne.n	8008ff8 <_scanf_i+0xb8>
 8009078:	2310      	movs	r3, #16
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009080:	e7a2      	b.n	8008fc8 <_scanf_i+0x88>
 8009082:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	780b      	ldrb	r3, [r1, #0]
 800908a:	f805 3b01 	strb.w	r3, [r5], #1
 800908e:	e7de      	b.n	800904e <_scanf_i+0x10e>
 8009090:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009094:	4631      	mov	r1, r6
 8009096:	4650      	mov	r0, sl
 8009098:	4798      	blx	r3
 800909a:	2800      	cmp	r0, #0
 800909c:	d0df      	beq.n	800905e <_scanf_i+0x11e>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	05d9      	lsls	r1, r3, #23
 80090a2:	d50d      	bpl.n	80090c0 <_scanf_i+0x180>
 80090a4:	42bd      	cmp	r5, r7
 80090a6:	d909      	bls.n	80090bc <_scanf_i+0x17c>
 80090a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80090ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b0:	4632      	mov	r2, r6
 80090b2:	4650      	mov	r0, sl
 80090b4:	4798      	blx	r3
 80090b6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80090ba:	464d      	mov	r5, r9
 80090bc:	42bd      	cmp	r5, r7
 80090be:	d028      	beq.n	8009112 <_scanf_i+0x1d2>
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	f012 0210 	ands.w	r2, r2, #16
 80090c6:	d113      	bne.n	80090f0 <_scanf_i+0x1b0>
 80090c8:	702a      	strb	r2, [r5, #0]
 80090ca:	6863      	ldr	r3, [r4, #4]
 80090cc:	9e01      	ldr	r6, [sp, #4]
 80090ce:	4639      	mov	r1, r7
 80090d0:	4650      	mov	r0, sl
 80090d2:	47b0      	blx	r6
 80090d4:	f8d8 3000 	ldr.w	r3, [r8]
 80090d8:	6821      	ldr	r1, [r4, #0]
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	f8c8 2000 	str.w	r2, [r8]
 80090e0:	f011 0f20 	tst.w	r1, #32
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	d00f      	beq.n	8009108 <_scanf_i+0x1c8>
 80090e8:	6018      	str	r0, [r3, #0]
 80090ea:	68e3      	ldr	r3, [r4, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60e3      	str	r3, [r4, #12]
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	1bed      	subs	r5, r5, r7
 80090f4:	445d      	add	r5, fp
 80090f6:	442b      	add	r3, r5
 80090f8:	6123      	str	r3, [r4, #16]
 80090fa:	2000      	movs	r0, #0
 80090fc:	b007      	add	sp, #28
 80090fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009102:	f04f 0b00 	mov.w	fp, #0
 8009106:	e7ca      	b.n	800909e <_scanf_i+0x15e>
 8009108:	07ca      	lsls	r2, r1, #31
 800910a:	bf4c      	ite	mi
 800910c:	8018      	strhmi	r0, [r3, #0]
 800910e:	6018      	strpl	r0, [r3, #0]
 8009110:	e7eb      	b.n	80090ea <_scanf_i+0x1aa>
 8009112:	2001      	movs	r0, #1
 8009114:	e7f2      	b.n	80090fc <_scanf_i+0x1bc>
 8009116:	bf00      	nop
 8009118:	080099f4 	.word	0x080099f4
 800911c:	080097f9 	.word	0x080097f9
 8009120:	08009711 	.word	0x08009711
 8009124:	08009e38 	.word	0x08009e38

08009128 <__sflush_r>:
 8009128:	898a      	ldrh	r2, [r1, #12]
 800912a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912e:	4605      	mov	r5, r0
 8009130:	0710      	lsls	r0, r2, #28
 8009132:	460c      	mov	r4, r1
 8009134:	d458      	bmi.n	80091e8 <__sflush_r+0xc0>
 8009136:	684b      	ldr	r3, [r1, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	dc05      	bgt.n	8009148 <__sflush_r+0x20>
 800913c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800913e:	2b00      	cmp	r3, #0
 8009140:	dc02      	bgt.n	8009148 <__sflush_r+0x20>
 8009142:	2000      	movs	r0, #0
 8009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800914a:	2e00      	cmp	r6, #0
 800914c:	d0f9      	beq.n	8009142 <__sflush_r+0x1a>
 800914e:	2300      	movs	r3, #0
 8009150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009154:	682f      	ldr	r7, [r5, #0]
 8009156:	6a21      	ldr	r1, [r4, #32]
 8009158:	602b      	str	r3, [r5, #0]
 800915a:	d032      	beq.n	80091c2 <__sflush_r+0x9a>
 800915c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	075a      	lsls	r2, r3, #29
 8009162:	d505      	bpl.n	8009170 <__sflush_r+0x48>
 8009164:	6863      	ldr	r3, [r4, #4]
 8009166:	1ac0      	subs	r0, r0, r3
 8009168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800916a:	b10b      	cbz	r3, 8009170 <__sflush_r+0x48>
 800916c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800916e:	1ac0      	subs	r0, r0, r3
 8009170:	2300      	movs	r3, #0
 8009172:	4602      	mov	r2, r0
 8009174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009176:	6a21      	ldr	r1, [r4, #32]
 8009178:	4628      	mov	r0, r5
 800917a:	47b0      	blx	r6
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	d106      	bne.n	8009190 <__sflush_r+0x68>
 8009182:	6829      	ldr	r1, [r5, #0]
 8009184:	291d      	cmp	r1, #29
 8009186:	d82b      	bhi.n	80091e0 <__sflush_r+0xb8>
 8009188:	4a29      	ldr	r2, [pc, #164]	; (8009230 <__sflush_r+0x108>)
 800918a:	410a      	asrs	r2, r1
 800918c:	07d6      	lsls	r6, r2, #31
 800918e:	d427      	bmi.n	80091e0 <__sflush_r+0xb8>
 8009190:	2200      	movs	r2, #0
 8009192:	6062      	str	r2, [r4, #4]
 8009194:	04d9      	lsls	r1, r3, #19
 8009196:	6922      	ldr	r2, [r4, #16]
 8009198:	6022      	str	r2, [r4, #0]
 800919a:	d504      	bpl.n	80091a6 <__sflush_r+0x7e>
 800919c:	1c42      	adds	r2, r0, #1
 800919e:	d101      	bne.n	80091a4 <__sflush_r+0x7c>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b903      	cbnz	r3, 80091a6 <__sflush_r+0x7e>
 80091a4:	6560      	str	r0, [r4, #84]	; 0x54
 80091a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091a8:	602f      	str	r7, [r5, #0]
 80091aa:	2900      	cmp	r1, #0
 80091ac:	d0c9      	beq.n	8009142 <__sflush_r+0x1a>
 80091ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091b2:	4299      	cmp	r1, r3
 80091b4:	d002      	beq.n	80091bc <__sflush_r+0x94>
 80091b6:	4628      	mov	r0, r5
 80091b8:	f7fd ff4e 	bl	8007058 <_free_r>
 80091bc:	2000      	movs	r0, #0
 80091be:	6360      	str	r0, [r4, #52]	; 0x34
 80091c0:	e7c0      	b.n	8009144 <__sflush_r+0x1c>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b0      	blx	r6
 80091c8:	1c41      	adds	r1, r0, #1
 80091ca:	d1c8      	bne.n	800915e <__sflush_r+0x36>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0c5      	beq.n	800915e <__sflush_r+0x36>
 80091d2:	2b1d      	cmp	r3, #29
 80091d4:	d001      	beq.n	80091da <__sflush_r+0xb2>
 80091d6:	2b16      	cmp	r3, #22
 80091d8:	d101      	bne.n	80091de <__sflush_r+0xb6>
 80091da:	602f      	str	r7, [r5, #0]
 80091dc:	e7b1      	b.n	8009142 <__sflush_r+0x1a>
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	e7ad      	b.n	8009144 <__sflush_r+0x1c>
 80091e8:	690f      	ldr	r7, [r1, #16]
 80091ea:	2f00      	cmp	r7, #0
 80091ec:	d0a9      	beq.n	8009142 <__sflush_r+0x1a>
 80091ee:	0793      	lsls	r3, r2, #30
 80091f0:	680e      	ldr	r6, [r1, #0]
 80091f2:	bf08      	it	eq
 80091f4:	694b      	ldreq	r3, [r1, #20]
 80091f6:	600f      	str	r7, [r1, #0]
 80091f8:	bf18      	it	ne
 80091fa:	2300      	movne	r3, #0
 80091fc:	eba6 0807 	sub.w	r8, r6, r7
 8009200:	608b      	str	r3, [r1, #8]
 8009202:	f1b8 0f00 	cmp.w	r8, #0
 8009206:	dd9c      	ble.n	8009142 <__sflush_r+0x1a>
 8009208:	6a21      	ldr	r1, [r4, #32]
 800920a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800920c:	4643      	mov	r3, r8
 800920e:	463a      	mov	r2, r7
 8009210:	4628      	mov	r0, r5
 8009212:	47b0      	blx	r6
 8009214:	2800      	cmp	r0, #0
 8009216:	dc06      	bgt.n	8009226 <__sflush_r+0xfe>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009224:	e78e      	b.n	8009144 <__sflush_r+0x1c>
 8009226:	4407      	add	r7, r0
 8009228:	eba8 0800 	sub.w	r8, r8, r0
 800922c:	e7e9      	b.n	8009202 <__sflush_r+0xda>
 800922e:	bf00      	nop
 8009230:	dfbffffe 	.word	0xdfbffffe

08009234 <_fflush_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	690b      	ldr	r3, [r1, #16]
 8009238:	4605      	mov	r5, r0
 800923a:	460c      	mov	r4, r1
 800923c:	b913      	cbnz	r3, 8009244 <_fflush_r+0x10>
 800923e:	2500      	movs	r5, #0
 8009240:	4628      	mov	r0, r5
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	b118      	cbz	r0, 800924e <_fflush_r+0x1a>
 8009246:	6a03      	ldr	r3, [r0, #32]
 8009248:	b90b      	cbnz	r3, 800924e <_fflush_r+0x1a>
 800924a:	f7fd fd7d 	bl	8006d48 <__sinit>
 800924e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0f3      	beq.n	800923e <_fflush_r+0xa>
 8009256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009258:	07d0      	lsls	r0, r2, #31
 800925a:	d404      	bmi.n	8009266 <_fflush_r+0x32>
 800925c:	0599      	lsls	r1, r3, #22
 800925e:	d402      	bmi.n	8009266 <_fflush_r+0x32>
 8009260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009262:	f7fd fed6 	bl	8007012 <__retarget_lock_acquire_recursive>
 8009266:	4628      	mov	r0, r5
 8009268:	4621      	mov	r1, r4
 800926a:	f7ff ff5d 	bl	8009128 <__sflush_r>
 800926e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009270:	07da      	lsls	r2, r3, #31
 8009272:	4605      	mov	r5, r0
 8009274:	d4e4      	bmi.n	8009240 <_fflush_r+0xc>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	059b      	lsls	r3, r3, #22
 800927a:	d4e1      	bmi.n	8009240 <_fflush_r+0xc>
 800927c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800927e:	f7fd fec9 	bl	8007014 <__retarget_lock_release_recursive>
 8009282:	e7dd      	b.n	8009240 <_fflush_r+0xc>

08009284 <__sccl>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	780b      	ldrb	r3, [r1, #0]
 8009288:	4604      	mov	r4, r0
 800928a:	2b5e      	cmp	r3, #94	; 0x5e
 800928c:	bf0b      	itete	eq
 800928e:	784b      	ldrbeq	r3, [r1, #1]
 8009290:	1c4a      	addne	r2, r1, #1
 8009292:	1c8a      	addeq	r2, r1, #2
 8009294:	2100      	movne	r1, #0
 8009296:	bf08      	it	eq
 8009298:	2101      	moveq	r1, #1
 800929a:	3801      	subs	r0, #1
 800929c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80092a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80092a4:	42a8      	cmp	r0, r5
 80092a6:	d1fb      	bne.n	80092a0 <__sccl+0x1c>
 80092a8:	b90b      	cbnz	r3, 80092ae <__sccl+0x2a>
 80092aa:	1e50      	subs	r0, r2, #1
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	f081 0101 	eor.w	r1, r1, #1
 80092b2:	54e1      	strb	r1, [r4, r3]
 80092b4:	4610      	mov	r0, r2
 80092b6:	4602      	mov	r2, r0
 80092b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80092bc:	2d2d      	cmp	r5, #45	; 0x2d
 80092be:	d005      	beq.n	80092cc <__sccl+0x48>
 80092c0:	2d5d      	cmp	r5, #93	; 0x5d
 80092c2:	d016      	beq.n	80092f2 <__sccl+0x6e>
 80092c4:	2d00      	cmp	r5, #0
 80092c6:	d0f1      	beq.n	80092ac <__sccl+0x28>
 80092c8:	462b      	mov	r3, r5
 80092ca:	e7f2      	b.n	80092b2 <__sccl+0x2e>
 80092cc:	7846      	ldrb	r6, [r0, #1]
 80092ce:	2e5d      	cmp	r6, #93	; 0x5d
 80092d0:	d0fa      	beq.n	80092c8 <__sccl+0x44>
 80092d2:	42b3      	cmp	r3, r6
 80092d4:	dcf8      	bgt.n	80092c8 <__sccl+0x44>
 80092d6:	3002      	adds	r0, #2
 80092d8:	461a      	mov	r2, r3
 80092da:	3201      	adds	r2, #1
 80092dc:	4296      	cmp	r6, r2
 80092de:	54a1      	strb	r1, [r4, r2]
 80092e0:	dcfb      	bgt.n	80092da <__sccl+0x56>
 80092e2:	1af2      	subs	r2, r6, r3
 80092e4:	3a01      	subs	r2, #1
 80092e6:	1c5d      	adds	r5, r3, #1
 80092e8:	42b3      	cmp	r3, r6
 80092ea:	bfa8      	it	ge
 80092ec:	2200      	movge	r2, #0
 80092ee:	18ab      	adds	r3, r5, r2
 80092f0:	e7e1      	b.n	80092b6 <__sccl+0x32>
 80092f2:	4610      	mov	r0, r2
 80092f4:	e7da      	b.n	80092ac <__sccl+0x28>

080092f6 <__submore>:
 80092f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fa:	460c      	mov	r4, r1
 80092fc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80092fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009302:	4299      	cmp	r1, r3
 8009304:	d11d      	bne.n	8009342 <__submore+0x4c>
 8009306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800930a:	f7fe fa69 	bl	80077e0 <_malloc_r>
 800930e:	b918      	cbnz	r0, 8009318 <__submore+0x22>
 8009310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800931c:	63a3      	str	r3, [r4, #56]	; 0x38
 800931e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009322:	6360      	str	r0, [r4, #52]	; 0x34
 8009324:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009328:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800932c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009330:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009334:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009338:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800933c:	6020      	str	r0, [r4, #0]
 800933e:	2000      	movs	r0, #0
 8009340:	e7e8      	b.n	8009314 <__submore+0x1e>
 8009342:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009344:	0077      	lsls	r7, r6, #1
 8009346:	463a      	mov	r2, r7
 8009348:	f000 f930 	bl	80095ac <_realloc_r>
 800934c:	4605      	mov	r5, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	d0de      	beq.n	8009310 <__submore+0x1a>
 8009352:	eb00 0806 	add.w	r8, r0, r6
 8009356:	4601      	mov	r1, r0
 8009358:	4632      	mov	r2, r6
 800935a:	4640      	mov	r0, r8
 800935c:	f7fd fe5b 	bl	8007016 <memcpy>
 8009360:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009364:	f8c4 8000 	str.w	r8, [r4]
 8009368:	e7e9      	b.n	800933e <__submore+0x48>

0800936a <__swbuf_r>:
 800936a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936c:	460e      	mov	r6, r1
 800936e:	4614      	mov	r4, r2
 8009370:	4605      	mov	r5, r0
 8009372:	b118      	cbz	r0, 800937c <__swbuf_r+0x12>
 8009374:	6a03      	ldr	r3, [r0, #32]
 8009376:	b90b      	cbnz	r3, 800937c <__swbuf_r+0x12>
 8009378:	f7fd fce6 	bl	8006d48 <__sinit>
 800937c:	69a3      	ldr	r3, [r4, #24]
 800937e:	60a3      	str	r3, [r4, #8]
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	071a      	lsls	r2, r3, #28
 8009384:	d525      	bpl.n	80093d2 <__swbuf_r+0x68>
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	b31b      	cbz	r3, 80093d2 <__swbuf_r+0x68>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	6922      	ldr	r2, [r4, #16]
 800938e:	1a98      	subs	r0, r3, r2
 8009390:	6963      	ldr	r3, [r4, #20]
 8009392:	b2f6      	uxtb	r6, r6
 8009394:	4283      	cmp	r3, r0
 8009396:	4637      	mov	r7, r6
 8009398:	dc04      	bgt.n	80093a4 <__swbuf_r+0x3a>
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f7ff ff49 	bl	8009234 <_fflush_r>
 80093a2:	b9e0      	cbnz	r0, 80093de <__swbuf_r+0x74>
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	60a3      	str	r3, [r4, #8]
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	6022      	str	r2, [r4, #0]
 80093b0:	701e      	strb	r6, [r3, #0]
 80093b2:	6962      	ldr	r2, [r4, #20]
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d004      	beq.n	80093c4 <__swbuf_r+0x5a>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	07db      	lsls	r3, r3, #31
 80093be:	d506      	bpl.n	80093ce <__swbuf_r+0x64>
 80093c0:	2e0a      	cmp	r6, #10
 80093c2:	d104      	bne.n	80093ce <__swbuf_r+0x64>
 80093c4:	4621      	mov	r1, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	f7ff ff34 	bl	8009234 <_fflush_r>
 80093cc:	b938      	cbnz	r0, 80093de <__swbuf_r+0x74>
 80093ce:	4638      	mov	r0, r7
 80093d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 f805 	bl	80093e4 <__swsetup_r>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d0d5      	beq.n	800938a <__swbuf_r+0x20>
 80093de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80093e2:	e7f4      	b.n	80093ce <__swbuf_r+0x64>

080093e4 <__swsetup_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4b2a      	ldr	r3, [pc, #168]	; (8009490 <__swsetup_r+0xac>)
 80093e8:	4605      	mov	r5, r0
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	460c      	mov	r4, r1
 80093ee:	b118      	cbz	r0, 80093f8 <__swsetup_r+0x14>
 80093f0:	6a03      	ldr	r3, [r0, #32]
 80093f2:	b90b      	cbnz	r3, 80093f8 <__swsetup_r+0x14>
 80093f4:	f7fd fca8 	bl	8006d48 <__sinit>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093fe:	0718      	lsls	r0, r3, #28
 8009400:	d422      	bmi.n	8009448 <__swsetup_r+0x64>
 8009402:	06d9      	lsls	r1, r3, #27
 8009404:	d407      	bmi.n	8009416 <__swsetup_r+0x32>
 8009406:	2309      	movs	r3, #9
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009414:	e034      	b.n	8009480 <__swsetup_r+0x9c>
 8009416:	0758      	lsls	r0, r3, #29
 8009418:	d512      	bpl.n	8009440 <__swsetup_r+0x5c>
 800941a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800941c:	b141      	cbz	r1, 8009430 <__swsetup_r+0x4c>
 800941e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009422:	4299      	cmp	r1, r3
 8009424:	d002      	beq.n	800942c <__swsetup_r+0x48>
 8009426:	4628      	mov	r0, r5
 8009428:	f7fd fe16 	bl	8007058 <_free_r>
 800942c:	2300      	movs	r3, #0
 800942e:	6363      	str	r3, [r4, #52]	; 0x34
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	2300      	movs	r3, #0
 800943a:	6063      	str	r3, [r4, #4]
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f043 0308 	orr.w	r3, r3, #8
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	b94b      	cbnz	r3, 8009460 <__swsetup_r+0x7c>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009456:	d003      	beq.n	8009460 <__swsetup_r+0x7c>
 8009458:	4621      	mov	r1, r4
 800945a:	4628      	mov	r0, r5
 800945c:	f000 f9f4 	bl	8009848 <__smakebuf_r>
 8009460:	89a0      	ldrh	r0, [r4, #12]
 8009462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009466:	f010 0301 	ands.w	r3, r0, #1
 800946a:	d00a      	beq.n	8009482 <__swsetup_r+0x9e>
 800946c:	2300      	movs	r3, #0
 800946e:	60a3      	str	r3, [r4, #8]
 8009470:	6963      	ldr	r3, [r4, #20]
 8009472:	425b      	negs	r3, r3
 8009474:	61a3      	str	r3, [r4, #24]
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	b943      	cbnz	r3, 800948c <__swsetup_r+0xa8>
 800947a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800947e:	d1c4      	bne.n	800940a <__swsetup_r+0x26>
 8009480:	bd38      	pop	{r3, r4, r5, pc}
 8009482:	0781      	lsls	r1, r0, #30
 8009484:	bf58      	it	pl
 8009486:	6963      	ldrpl	r3, [r4, #20]
 8009488:	60a3      	str	r3, [r4, #8]
 800948a:	e7f4      	b.n	8009476 <__swsetup_r+0x92>
 800948c:	2000      	movs	r0, #0
 800948e:	e7f7      	b.n	8009480 <__swsetup_r+0x9c>
 8009490:	200001d8 	.word	0x200001d8

08009494 <memmove>:
 8009494:	4288      	cmp	r0, r1
 8009496:	b510      	push	{r4, lr}
 8009498:	eb01 0402 	add.w	r4, r1, r2
 800949c:	d902      	bls.n	80094a4 <memmove+0x10>
 800949e:	4284      	cmp	r4, r0
 80094a0:	4623      	mov	r3, r4
 80094a2:	d807      	bhi.n	80094b4 <memmove+0x20>
 80094a4:	1e43      	subs	r3, r0, #1
 80094a6:	42a1      	cmp	r1, r4
 80094a8:	d008      	beq.n	80094bc <memmove+0x28>
 80094aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094b2:	e7f8      	b.n	80094a6 <memmove+0x12>
 80094b4:	4402      	add	r2, r0
 80094b6:	4601      	mov	r1, r0
 80094b8:	428a      	cmp	r2, r1
 80094ba:	d100      	bne.n	80094be <memmove+0x2a>
 80094bc:	bd10      	pop	{r4, pc}
 80094be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094c6:	e7f7      	b.n	80094b8 <memmove+0x24>

080094c8 <_raise_r>:
 80094c8:	291f      	cmp	r1, #31
 80094ca:	b538      	push	{r3, r4, r5, lr}
 80094cc:	4604      	mov	r4, r0
 80094ce:	460d      	mov	r5, r1
 80094d0:	d904      	bls.n	80094dc <_raise_r+0x14>
 80094d2:	2316      	movs	r3, #22
 80094d4:	6003      	str	r3, [r0, #0]
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80094de:	b112      	cbz	r2, 80094e6 <_raise_r+0x1e>
 80094e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094e4:	b94b      	cbnz	r3, 80094fa <_raise_r+0x32>
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 f830 	bl	800954c <_getpid_r>
 80094ec:	462a      	mov	r2, r5
 80094ee:	4601      	mov	r1, r0
 80094f0:	4620      	mov	r0, r4
 80094f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094f6:	f000 b817 	b.w	8009528 <_kill_r>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d00a      	beq.n	8009514 <_raise_r+0x4c>
 80094fe:	1c59      	adds	r1, r3, #1
 8009500:	d103      	bne.n	800950a <_raise_r+0x42>
 8009502:	2316      	movs	r3, #22
 8009504:	6003      	str	r3, [r0, #0]
 8009506:	2001      	movs	r0, #1
 8009508:	e7e7      	b.n	80094da <_raise_r+0x12>
 800950a:	2400      	movs	r4, #0
 800950c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009510:	4628      	mov	r0, r5
 8009512:	4798      	blx	r3
 8009514:	2000      	movs	r0, #0
 8009516:	e7e0      	b.n	80094da <_raise_r+0x12>

08009518 <raise>:
 8009518:	4b02      	ldr	r3, [pc, #8]	; (8009524 <raise+0xc>)
 800951a:	4601      	mov	r1, r0
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	f7ff bfd3 	b.w	80094c8 <_raise_r>
 8009522:	bf00      	nop
 8009524:	200001d8 	.word	0x200001d8

08009528 <_kill_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d07      	ldr	r5, [pc, #28]	; (8009548 <_kill_r+0x20>)
 800952c:	2300      	movs	r3, #0
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	602b      	str	r3, [r5, #0]
 8009536:	f7f8 fc11 	bl	8001d5c <_kill>
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d102      	bne.n	8009544 <_kill_r+0x1c>
 800953e:	682b      	ldr	r3, [r5, #0]
 8009540:	b103      	cbz	r3, 8009544 <_kill_r+0x1c>
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	bd38      	pop	{r3, r4, r5, pc}
 8009546:	bf00      	nop
 8009548:	20000898 	.word	0x20000898

0800954c <_getpid_r>:
 800954c:	f7f8 bbfe 	b.w	8001d4c <_getpid>

08009550 <_sbrk_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d06      	ldr	r5, [pc, #24]	; (800956c <_sbrk_r+0x1c>)
 8009554:	2300      	movs	r3, #0
 8009556:	4604      	mov	r4, r0
 8009558:	4608      	mov	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7f8 fc86 	bl	8001e6c <_sbrk>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_sbrk_r+0x1a>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_sbrk_r+0x1a>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20000898 	.word	0x20000898

08009570 <_calloc_r>:
 8009570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009572:	fba1 2402 	umull	r2, r4, r1, r2
 8009576:	b94c      	cbnz	r4, 800958c <_calloc_r+0x1c>
 8009578:	4611      	mov	r1, r2
 800957a:	9201      	str	r2, [sp, #4]
 800957c:	f7fe f930 	bl	80077e0 <_malloc_r>
 8009580:	9a01      	ldr	r2, [sp, #4]
 8009582:	4605      	mov	r5, r0
 8009584:	b930      	cbnz	r0, 8009594 <_calloc_r+0x24>
 8009586:	4628      	mov	r0, r5
 8009588:	b003      	add	sp, #12
 800958a:	bd30      	pop	{r4, r5, pc}
 800958c:	220c      	movs	r2, #12
 800958e:	6002      	str	r2, [r0, #0]
 8009590:	2500      	movs	r5, #0
 8009592:	e7f8      	b.n	8009586 <_calloc_r+0x16>
 8009594:	4621      	mov	r1, r4
 8009596:	f7fd fcb0 	bl	8006efa <memset>
 800959a:	e7f4      	b.n	8009586 <_calloc_r+0x16>

0800959c <malloc>:
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <malloc+0xc>)
 800959e:	4601      	mov	r1, r0
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	f7fe b91d 	b.w	80077e0 <_malloc_r>
 80095a6:	bf00      	nop
 80095a8:	200001d8 	.word	0x200001d8

080095ac <_realloc_r>:
 80095ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b0:	4680      	mov	r8, r0
 80095b2:	4614      	mov	r4, r2
 80095b4:	460e      	mov	r6, r1
 80095b6:	b921      	cbnz	r1, 80095c2 <_realloc_r+0x16>
 80095b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	4611      	mov	r1, r2
 80095be:	f7fe b90f 	b.w	80077e0 <_malloc_r>
 80095c2:	b92a      	cbnz	r2, 80095d0 <_realloc_r+0x24>
 80095c4:	f7fd fd48 	bl	8007058 <_free_r>
 80095c8:	4625      	mov	r5, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d0:	f000 f998 	bl	8009904 <_malloc_usable_size_r>
 80095d4:	4284      	cmp	r4, r0
 80095d6:	4607      	mov	r7, r0
 80095d8:	d802      	bhi.n	80095e0 <_realloc_r+0x34>
 80095da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095de:	d812      	bhi.n	8009606 <_realloc_r+0x5a>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7fe f8fc 	bl	80077e0 <_malloc_r>
 80095e8:	4605      	mov	r5, r0
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0ed      	beq.n	80095ca <_realloc_r+0x1e>
 80095ee:	42bc      	cmp	r4, r7
 80095f0:	4622      	mov	r2, r4
 80095f2:	4631      	mov	r1, r6
 80095f4:	bf28      	it	cs
 80095f6:	463a      	movcs	r2, r7
 80095f8:	f7fd fd0d 	bl	8007016 <memcpy>
 80095fc:	4631      	mov	r1, r6
 80095fe:	4640      	mov	r0, r8
 8009600:	f7fd fd2a 	bl	8007058 <_free_r>
 8009604:	e7e1      	b.n	80095ca <_realloc_r+0x1e>
 8009606:	4635      	mov	r5, r6
 8009608:	e7df      	b.n	80095ca <_realloc_r+0x1e>
	...

0800960c <_strtol_l.constprop.0>:
 800960c:	2b01      	cmp	r3, #1
 800960e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009612:	d001      	beq.n	8009618 <_strtol_l.constprop.0+0xc>
 8009614:	2b24      	cmp	r3, #36	; 0x24
 8009616:	d906      	bls.n	8009626 <_strtol_l.constprop.0+0x1a>
 8009618:	f7fd fcd0 	bl	8006fbc <__errno>
 800961c:	2316      	movs	r3, #22
 800961e:	6003      	str	r3, [r0, #0]
 8009620:	2000      	movs	r0, #0
 8009622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009626:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800970c <_strtol_l.constprop.0+0x100>
 800962a:	460d      	mov	r5, r1
 800962c:	462e      	mov	r6, r5
 800962e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009632:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009636:	f017 0708 	ands.w	r7, r7, #8
 800963a:	d1f7      	bne.n	800962c <_strtol_l.constprop.0+0x20>
 800963c:	2c2d      	cmp	r4, #45	; 0x2d
 800963e:	d132      	bne.n	80096a6 <_strtol_l.constprop.0+0x9a>
 8009640:	782c      	ldrb	r4, [r5, #0]
 8009642:	2701      	movs	r7, #1
 8009644:	1cb5      	adds	r5, r6, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d05b      	beq.n	8009702 <_strtol_l.constprop.0+0xf6>
 800964a:	2b10      	cmp	r3, #16
 800964c:	d109      	bne.n	8009662 <_strtol_l.constprop.0+0x56>
 800964e:	2c30      	cmp	r4, #48	; 0x30
 8009650:	d107      	bne.n	8009662 <_strtol_l.constprop.0+0x56>
 8009652:	782c      	ldrb	r4, [r5, #0]
 8009654:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009658:	2c58      	cmp	r4, #88	; 0x58
 800965a:	d14d      	bne.n	80096f8 <_strtol_l.constprop.0+0xec>
 800965c:	786c      	ldrb	r4, [r5, #1]
 800965e:	2310      	movs	r3, #16
 8009660:	3502      	adds	r5, #2
 8009662:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009666:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800966a:	f04f 0e00 	mov.w	lr, #0
 800966e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009672:	4676      	mov	r6, lr
 8009674:	fb03 8a19 	mls	sl, r3, r9, r8
 8009678:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800967c:	f1bc 0f09 	cmp.w	ip, #9
 8009680:	d816      	bhi.n	80096b0 <_strtol_l.constprop.0+0xa4>
 8009682:	4664      	mov	r4, ip
 8009684:	42a3      	cmp	r3, r4
 8009686:	dd24      	ble.n	80096d2 <_strtol_l.constprop.0+0xc6>
 8009688:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800968c:	d008      	beq.n	80096a0 <_strtol_l.constprop.0+0x94>
 800968e:	45b1      	cmp	r9, r6
 8009690:	d31c      	bcc.n	80096cc <_strtol_l.constprop.0+0xc0>
 8009692:	d101      	bne.n	8009698 <_strtol_l.constprop.0+0x8c>
 8009694:	45a2      	cmp	sl, r4
 8009696:	db19      	blt.n	80096cc <_strtol_l.constprop.0+0xc0>
 8009698:	fb06 4603 	mla	r6, r6, r3, r4
 800969c:	f04f 0e01 	mov.w	lr, #1
 80096a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096a4:	e7e8      	b.n	8009678 <_strtol_l.constprop.0+0x6c>
 80096a6:	2c2b      	cmp	r4, #43	; 0x2b
 80096a8:	bf04      	itt	eq
 80096aa:	782c      	ldrbeq	r4, [r5, #0]
 80096ac:	1cb5      	addeq	r5, r6, #2
 80096ae:	e7ca      	b.n	8009646 <_strtol_l.constprop.0+0x3a>
 80096b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80096b4:	f1bc 0f19 	cmp.w	ip, #25
 80096b8:	d801      	bhi.n	80096be <_strtol_l.constprop.0+0xb2>
 80096ba:	3c37      	subs	r4, #55	; 0x37
 80096bc:	e7e2      	b.n	8009684 <_strtol_l.constprop.0+0x78>
 80096be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80096c2:	f1bc 0f19 	cmp.w	ip, #25
 80096c6:	d804      	bhi.n	80096d2 <_strtol_l.constprop.0+0xc6>
 80096c8:	3c57      	subs	r4, #87	; 0x57
 80096ca:	e7db      	b.n	8009684 <_strtol_l.constprop.0+0x78>
 80096cc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80096d0:	e7e6      	b.n	80096a0 <_strtol_l.constprop.0+0x94>
 80096d2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80096d6:	d105      	bne.n	80096e4 <_strtol_l.constprop.0+0xd8>
 80096d8:	2322      	movs	r3, #34	; 0x22
 80096da:	6003      	str	r3, [r0, #0]
 80096dc:	4646      	mov	r6, r8
 80096de:	b942      	cbnz	r2, 80096f2 <_strtol_l.constprop.0+0xe6>
 80096e0:	4630      	mov	r0, r6
 80096e2:	e79e      	b.n	8009622 <_strtol_l.constprop.0+0x16>
 80096e4:	b107      	cbz	r7, 80096e8 <_strtol_l.constprop.0+0xdc>
 80096e6:	4276      	negs	r6, r6
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	d0f9      	beq.n	80096e0 <_strtol_l.constprop.0+0xd4>
 80096ec:	f1be 0f00 	cmp.w	lr, #0
 80096f0:	d000      	beq.n	80096f4 <_strtol_l.constprop.0+0xe8>
 80096f2:	1e69      	subs	r1, r5, #1
 80096f4:	6011      	str	r1, [r2, #0]
 80096f6:	e7f3      	b.n	80096e0 <_strtol_l.constprop.0+0xd4>
 80096f8:	2430      	movs	r4, #48	; 0x30
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1b1      	bne.n	8009662 <_strtol_l.constprop.0+0x56>
 80096fe:	2308      	movs	r3, #8
 8009700:	e7af      	b.n	8009662 <_strtol_l.constprop.0+0x56>
 8009702:	2c30      	cmp	r4, #48	; 0x30
 8009704:	d0a5      	beq.n	8009652 <_strtol_l.constprop.0+0x46>
 8009706:	230a      	movs	r3, #10
 8009708:	e7ab      	b.n	8009662 <_strtol_l.constprop.0+0x56>
 800970a:	bf00      	nop
 800970c:	08009cf5 	.word	0x08009cf5

08009710 <_strtol_r>:
 8009710:	f7ff bf7c 	b.w	800960c <_strtol_l.constprop.0>

08009714 <_strtoul_l.constprop.0>:
 8009714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009718:	4f36      	ldr	r7, [pc, #216]	; (80097f4 <_strtoul_l.constprop.0+0xe0>)
 800971a:	4686      	mov	lr, r0
 800971c:	460d      	mov	r5, r1
 800971e:	4628      	mov	r0, r5
 8009720:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009724:	5d3e      	ldrb	r6, [r7, r4]
 8009726:	f016 0608 	ands.w	r6, r6, #8
 800972a:	d1f8      	bne.n	800971e <_strtoul_l.constprop.0+0xa>
 800972c:	2c2d      	cmp	r4, #45	; 0x2d
 800972e:	d130      	bne.n	8009792 <_strtoul_l.constprop.0+0x7e>
 8009730:	782c      	ldrb	r4, [r5, #0]
 8009732:	2601      	movs	r6, #1
 8009734:	1c85      	adds	r5, r0, #2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d057      	beq.n	80097ea <_strtoul_l.constprop.0+0xd6>
 800973a:	2b10      	cmp	r3, #16
 800973c:	d109      	bne.n	8009752 <_strtoul_l.constprop.0+0x3e>
 800973e:	2c30      	cmp	r4, #48	; 0x30
 8009740:	d107      	bne.n	8009752 <_strtoul_l.constprop.0+0x3e>
 8009742:	7828      	ldrb	r0, [r5, #0]
 8009744:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009748:	2858      	cmp	r0, #88	; 0x58
 800974a:	d149      	bne.n	80097e0 <_strtoul_l.constprop.0+0xcc>
 800974c:	786c      	ldrb	r4, [r5, #1]
 800974e:	2310      	movs	r3, #16
 8009750:	3502      	adds	r5, #2
 8009752:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009756:	2700      	movs	r7, #0
 8009758:	fbb8 f8f3 	udiv	r8, r8, r3
 800975c:	fb03 f908 	mul.w	r9, r3, r8
 8009760:	ea6f 0909 	mvn.w	r9, r9
 8009764:	4638      	mov	r0, r7
 8009766:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800976a:	f1bc 0f09 	cmp.w	ip, #9
 800976e:	d815      	bhi.n	800979c <_strtoul_l.constprop.0+0x88>
 8009770:	4664      	mov	r4, ip
 8009772:	42a3      	cmp	r3, r4
 8009774:	dd23      	ble.n	80097be <_strtoul_l.constprop.0+0xaa>
 8009776:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800977a:	d007      	beq.n	800978c <_strtoul_l.constprop.0+0x78>
 800977c:	4580      	cmp	r8, r0
 800977e:	d31b      	bcc.n	80097b8 <_strtoul_l.constprop.0+0xa4>
 8009780:	d101      	bne.n	8009786 <_strtoul_l.constprop.0+0x72>
 8009782:	45a1      	cmp	r9, r4
 8009784:	db18      	blt.n	80097b8 <_strtoul_l.constprop.0+0xa4>
 8009786:	fb00 4003 	mla	r0, r0, r3, r4
 800978a:	2701      	movs	r7, #1
 800978c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009790:	e7e9      	b.n	8009766 <_strtoul_l.constprop.0+0x52>
 8009792:	2c2b      	cmp	r4, #43	; 0x2b
 8009794:	bf04      	itt	eq
 8009796:	782c      	ldrbeq	r4, [r5, #0]
 8009798:	1c85      	addeq	r5, r0, #2
 800979a:	e7cc      	b.n	8009736 <_strtoul_l.constprop.0+0x22>
 800979c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80097a0:	f1bc 0f19 	cmp.w	ip, #25
 80097a4:	d801      	bhi.n	80097aa <_strtoul_l.constprop.0+0x96>
 80097a6:	3c37      	subs	r4, #55	; 0x37
 80097a8:	e7e3      	b.n	8009772 <_strtoul_l.constprop.0+0x5e>
 80097aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80097ae:	f1bc 0f19 	cmp.w	ip, #25
 80097b2:	d804      	bhi.n	80097be <_strtoul_l.constprop.0+0xaa>
 80097b4:	3c57      	subs	r4, #87	; 0x57
 80097b6:	e7dc      	b.n	8009772 <_strtoul_l.constprop.0+0x5e>
 80097b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80097bc:	e7e6      	b.n	800978c <_strtoul_l.constprop.0+0x78>
 80097be:	1c7b      	adds	r3, r7, #1
 80097c0:	d106      	bne.n	80097d0 <_strtoul_l.constprop.0+0xbc>
 80097c2:	2322      	movs	r3, #34	; 0x22
 80097c4:	f8ce 3000 	str.w	r3, [lr]
 80097c8:	4638      	mov	r0, r7
 80097ca:	b932      	cbnz	r2, 80097da <_strtoul_l.constprop.0+0xc6>
 80097cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d0:	b106      	cbz	r6, 80097d4 <_strtoul_l.constprop.0+0xc0>
 80097d2:	4240      	negs	r0, r0
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d0f9      	beq.n	80097cc <_strtoul_l.constprop.0+0xb8>
 80097d8:	b107      	cbz	r7, 80097dc <_strtoul_l.constprop.0+0xc8>
 80097da:	1e69      	subs	r1, r5, #1
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	e7f5      	b.n	80097cc <_strtoul_l.constprop.0+0xb8>
 80097e0:	2430      	movs	r4, #48	; 0x30
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1b5      	bne.n	8009752 <_strtoul_l.constprop.0+0x3e>
 80097e6:	2308      	movs	r3, #8
 80097e8:	e7b3      	b.n	8009752 <_strtoul_l.constprop.0+0x3e>
 80097ea:	2c30      	cmp	r4, #48	; 0x30
 80097ec:	d0a9      	beq.n	8009742 <_strtoul_l.constprop.0+0x2e>
 80097ee:	230a      	movs	r3, #10
 80097f0:	e7af      	b.n	8009752 <_strtoul_l.constprop.0+0x3e>
 80097f2:	bf00      	nop
 80097f4:	08009cf5 	.word	0x08009cf5

080097f8 <_strtoul_r>:
 80097f8:	f7ff bf8c 	b.w	8009714 <_strtoul_l.constprop.0>

080097fc <__swhatbuf_r>:
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	460c      	mov	r4, r1
 8009800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009804:	2900      	cmp	r1, #0
 8009806:	b096      	sub	sp, #88	; 0x58
 8009808:	4615      	mov	r5, r2
 800980a:	461e      	mov	r6, r3
 800980c:	da0d      	bge.n	800982a <__swhatbuf_r+0x2e>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009814:	f04f 0100 	mov.w	r1, #0
 8009818:	bf0c      	ite	eq
 800981a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800981e:	2340      	movne	r3, #64	; 0x40
 8009820:	2000      	movs	r0, #0
 8009822:	6031      	str	r1, [r6, #0]
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	b016      	add	sp, #88	; 0x58
 8009828:	bd70      	pop	{r4, r5, r6, pc}
 800982a:	466a      	mov	r2, sp
 800982c:	f000 f848 	bl	80098c0 <_fstat_r>
 8009830:	2800      	cmp	r0, #0
 8009832:	dbec      	blt.n	800980e <__swhatbuf_r+0x12>
 8009834:	9901      	ldr	r1, [sp, #4]
 8009836:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800983a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800983e:	4259      	negs	r1, r3
 8009840:	4159      	adcs	r1, r3
 8009842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009846:	e7eb      	b.n	8009820 <__swhatbuf_r+0x24>

08009848 <__smakebuf_r>:
 8009848:	898b      	ldrh	r3, [r1, #12]
 800984a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800984c:	079d      	lsls	r5, r3, #30
 800984e:	4606      	mov	r6, r0
 8009850:	460c      	mov	r4, r1
 8009852:	d507      	bpl.n	8009864 <__smakebuf_r+0x1c>
 8009854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	6123      	str	r3, [r4, #16]
 800985c:	2301      	movs	r3, #1
 800985e:	6163      	str	r3, [r4, #20]
 8009860:	b002      	add	sp, #8
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	ab01      	add	r3, sp, #4
 8009866:	466a      	mov	r2, sp
 8009868:	f7ff ffc8 	bl	80097fc <__swhatbuf_r>
 800986c:	9900      	ldr	r1, [sp, #0]
 800986e:	4605      	mov	r5, r0
 8009870:	4630      	mov	r0, r6
 8009872:	f7fd ffb5 	bl	80077e0 <_malloc_r>
 8009876:	b948      	cbnz	r0, 800988c <__smakebuf_r+0x44>
 8009878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800987c:	059a      	lsls	r2, r3, #22
 800987e:	d4ef      	bmi.n	8009860 <__smakebuf_r+0x18>
 8009880:	f023 0303 	bic.w	r3, r3, #3
 8009884:	f043 0302 	orr.w	r3, r3, #2
 8009888:	81a3      	strh	r3, [r4, #12]
 800988a:	e7e3      	b.n	8009854 <__smakebuf_r+0xc>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	6020      	str	r0, [r4, #0]
 8009890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	9b00      	ldr	r3, [sp, #0]
 8009898:	6163      	str	r3, [r4, #20]
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	6120      	str	r0, [r4, #16]
 800989e:	b15b      	cbz	r3, 80098b8 <__smakebuf_r+0x70>
 80098a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a4:	4630      	mov	r0, r6
 80098a6:	f000 f81d 	bl	80098e4 <_isatty_r>
 80098aa:	b128      	cbz	r0, 80098b8 <__smakebuf_r+0x70>
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	f043 0301 	orr.w	r3, r3, #1
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	431d      	orrs	r5, r3
 80098bc:	81a5      	strh	r5, [r4, #12]
 80098be:	e7cf      	b.n	8009860 <__smakebuf_r+0x18>

080098c0 <_fstat_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d07      	ldr	r5, [pc, #28]	; (80098e0 <_fstat_r+0x20>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	4611      	mov	r1, r2
 80098cc:	602b      	str	r3, [r5, #0]
 80098ce:	f7f8 faa4 	bl	8001e1a <_fstat>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	d102      	bne.n	80098dc <_fstat_r+0x1c>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	b103      	cbz	r3, 80098dc <_fstat_r+0x1c>
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	bd38      	pop	{r3, r4, r5, pc}
 80098de:	bf00      	nop
 80098e0:	20000898 	.word	0x20000898

080098e4 <_isatty_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d06      	ldr	r5, [pc, #24]	; (8009900 <_isatty_r+0x1c>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	f7f8 faa3 	bl	8001e3a <_isatty>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_isatty_r+0x1a>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_isatty_r+0x1a>
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	20000898 	.word	0x20000898

08009904 <_malloc_usable_size_r>:
 8009904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009908:	1f18      	subs	r0, r3, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfbc      	itt	lt
 800990e:	580b      	ldrlt	r3, [r1, r0]
 8009910:	18c0      	addlt	r0, r0, r3
 8009912:	4770      	bx	lr

08009914 <_init>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	bf00      	nop
 8009918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991a:	bc08      	pop	{r3}
 800991c:	469e      	mov	lr, r3
 800991e:	4770      	bx	lr

08009920 <_fini>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	bf00      	nop
 8009924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009926:	bc08      	pop	{r3}
 8009928:	469e      	mov	lr, r3
 800992a:	4770      	bx	lr
